
TP_Systemes_Ucontroleur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003aa4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08003c2c  08003c2c  00004c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c90  08003c90  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003c90  08003c90  00004c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c98  08003c98  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c98  08003c98  00004c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c9c  08003c9c  00004c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003ca0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  20000068  08003d08  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08003d08  00005260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ada3  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bee  00000000  00000000  0000fe3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  00011a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000759  00000000  00000000  000123e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a67  00000000  00000000  00012b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c08b  00000000  00000000  000395a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9579  00000000  00000000  00045633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012ebac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c3c  00000000  00000000  0012ebf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0013182c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003c14 	.word	0x08003c14

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08003c14 	.word	0x08003c14

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08a      	sub	sp, #40	@ 0x28
 80004f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050a:	4b2b      	ldr	r3, [pc, #172]	@ (80005b8 <MX_GPIO_Init+0xc4>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800050e:	4a2a      	ldr	r2, [pc, #168]	@ (80005b8 <MX_GPIO_Init+0xc4>)
 8000510:	f043 0304 	orr.w	r3, r3, #4
 8000514:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000516:	4b28      	ldr	r3, [pc, #160]	@ (80005b8 <MX_GPIO_Init+0xc4>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051a:	f003 0304 	and.w	r3, r3, #4
 800051e:	613b      	str	r3, [r7, #16]
 8000520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000522:	4b25      	ldr	r3, [pc, #148]	@ (80005b8 <MX_GPIO_Init+0xc4>)
 8000524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000526:	4a24      	ldr	r2, [pc, #144]	@ (80005b8 <MX_GPIO_Init+0xc4>)
 8000528:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800052c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052e:	4b22      	ldr	r3, [pc, #136]	@ (80005b8 <MX_GPIO_Init+0xc4>)
 8000530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053a:	4b1f      	ldr	r3, [pc, #124]	@ (80005b8 <MX_GPIO_Init+0xc4>)
 800053c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053e:	4a1e      	ldr	r2, [pc, #120]	@ (80005b8 <MX_GPIO_Init+0xc4>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000546:	4b1c      	ldr	r3, [pc, #112]	@ (80005b8 <MX_GPIO_Init+0xc4>)
 8000548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	4b19      	ldr	r3, [pc, #100]	@ (80005b8 <MX_GPIO_Init+0xc4>)
 8000554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000556:	4a18      	ldr	r2, [pc, #96]	@ (80005b8 <MX_GPIO_Init+0xc4>)
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055e:	4b16      	ldr	r3, [pc, #88]	@ (80005b8 <MX_GPIO_Init+0xc4>)
 8000560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	2120      	movs	r1, #32
 800056e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000572:	f000 fda5 	bl	80010c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000576:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800057a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800057c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000580:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	2300      	movs	r3, #0
 8000584:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	4619      	mov	r1, r3
 800058c:	480b      	ldr	r0, [pc, #44]	@ (80005bc <MX_GPIO_Init+0xc8>)
 800058e:	f000 fbed 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000592:	2320      	movs	r3, #32
 8000594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000596:	2301      	movs	r3, #1
 8000598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	2300      	movs	r3, #0
 80005a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	4619      	mov	r1, r3
 80005a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ac:	f000 fbde 	bl	8000d6c <HAL_GPIO_Init>

}
 80005b0:	bf00      	nop
 80005b2:	3728      	adds	r7, #40	@ 0x28
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40021000 	.word	0x40021000
 80005bc:	48000800 	.word	0x48000800

080005c0 <__io_putchar>:

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
int	__io_putchar(int t)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&t, 1, 100);
 80005c8:	1d39      	adds	r1, r7, #4
 80005ca:	2364      	movs	r3, #100	@ 0x64
 80005cc:	2201      	movs	r2, #1
 80005ce:	4804      	ldr	r0, [pc, #16]	@ (80005e0 <__io_putchar+0x20>)
 80005d0:	f002 f916 	bl	8002800 <HAL_UART_Transmit>
	return (t);
 80005d4:	687b      	ldr	r3, [r7, #4]
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000088 	.word	0x20000088

080005e4 <testLed>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void	testLed()
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80005e8:	2120      	movs	r1, #32
 80005ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ee:	f000 fd7f 	bl	80010f0 <HAL_GPIO_TogglePin>
	HAL_Delay(500); // attendre 500ms
 80005f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005f6:	f000 faaf 	bl	8000b58 <HAL_Delay>
	return ;
 80005fa:	bf00      	nop
}
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <testUart>:
void	testUart()
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	printf("Bonjour, je suis un test \r\n");
 8000604:	4802      	ldr	r0, [pc, #8]	@ (8000610 <testUart+0x10>)
 8000606:	f002 ff71 	bl	80034ec <puts>
	return ;
 800060a:	bf00      	nop
}
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	08003c2c 	.word	0x08003c2c

08000614 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000618:	f000 fa22 	bl	8000a60 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800061c:	f000 f80a 	bl	8000634 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000620:	f7ff ff68 	bl	80004f4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000624:	f000 f966 	bl	80008f4 <MX_USART2_UART_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		testLed(); // Fonction test LED
 8000628:	f7ff ffdc 	bl	80005e4 <testLed>
		testUart();
 800062c:	f7ff ffe8 	bl	8000600 <testUart>
		testLed(); // Fonction test LED
 8000630:	bf00      	nop
 8000632:	e7f9      	b.n	8000628 <main+0x14>

08000634 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b096      	sub	sp, #88	@ 0x58
 8000638:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	2244      	movs	r2, #68	@ 0x44
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f003 f832 	bl	80036ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	463b      	mov	r3, r7
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000656:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800065a:	f000 fd71 	bl	8001140 <HAL_PWREx_ControlVoltageScaling>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000664:	f000 f837 	bl	80006d6 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000668:	2302      	movs	r3, #2
 800066a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000670:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000672:	2310      	movs	r3, #16
 8000674:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067a:	2302      	movs	r3, #2
 800067c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800067e:	2301      	movs	r3, #1
 8000680:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000682:	230a      	movs	r3, #10
 8000684:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000686:	2307      	movs	r3, #7
 8000688:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800068a:	2302      	movs	r3, #2
 800068c:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4618      	mov	r0, r3
 8000698:	f000 fda8 	bl	80011ec <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x72>
	{
		Error_Handler();
 80006a2:	f000 f818 	bl	80006d6 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	230f      	movs	r3, #15
 80006a8:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2303      	movs	r3, #3
 80006ac:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ba:	463b      	mov	r3, r7
 80006bc:	2104      	movs	r1, #4
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 f970 	bl	80019a4 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x9a>
	{
		Error_Handler();
 80006ca:	f000 f804 	bl	80006d6 <Error_Handler>
	}
}
 80006ce:	bf00      	nop
 80006d0:	3758      	adds	r7, #88	@ 0x58
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006da:	b672      	cpsid	i
}
 80006dc:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80006de:	bf00      	nop
 80006e0:	e7fd      	b.n	80006de <Error_Handler+0x8>
	...

080006e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <HAL_MspInit+0x44>)
 80006ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000728 <HAL_MspInit+0x44>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80006f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <HAL_MspInit+0x44>)
 80006f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000702:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <HAL_MspInit+0x44>)
 8000704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000706:	4a08      	ldr	r2, [pc, #32]	@ (8000728 <HAL_MspInit+0x44>)
 8000708:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800070c:	6593      	str	r3, [r2, #88]	@ 0x58
 800070e:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <HAL_MspInit+0x44>)
 8000710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40021000 	.word	0x40021000

0800072c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000730:	bf00      	nop
 8000732:	e7fd      	b.n	8000730 <NMI_Handler+0x4>

08000734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <HardFault_Handler+0x4>

0800073c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000740:	bf00      	nop
 8000742:	e7fd      	b.n	8000740 <MemManage_Handler+0x4>

08000744 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000748:	bf00      	nop
 800074a:	e7fd      	b.n	8000748 <BusFault_Handler+0x4>

0800074c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <UsageFault_Handler+0x4>

08000754 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000782:	f000 f9c9 	bl	8000b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}

0800078a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b086      	sub	sp, #24
 800078e:	af00      	add	r7, sp, #0
 8000790:	60f8      	str	r0, [r7, #12]
 8000792:	60b9      	str	r1, [r7, #8]
 8000794:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	e00a      	b.n	80007b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800079c:	f3af 8000 	nop.w
 80007a0:	4601      	mov	r1, r0
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	1c5a      	adds	r2, r3, #1
 80007a6:	60ba      	str	r2, [r7, #8]
 80007a8:	b2ca      	uxtb	r2, r1
 80007aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	3301      	adds	r3, #1
 80007b0:	617b      	str	r3, [r7, #20]
 80007b2:	697a      	ldr	r2, [r7, #20]
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	dbf0      	blt.n	800079c <_read+0x12>
  }

  return len;
 80007ba:	687b      	ldr	r3, [r7, #4]
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	e009      	b.n	80007ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	1c5a      	adds	r2, r3, #1
 80007da:	60ba      	str	r2, [r7, #8]
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff feee 	bl	80005c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	3301      	adds	r3, #1
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	697a      	ldr	r2, [r7, #20]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	dbf1      	blt.n	80007d6 <_write+0x12>
  }
  return len;
 80007f2:	687b      	ldr	r3, [r7, #4]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3718      	adds	r7, #24
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <_close>:

int _close(int file)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000804:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000808:	4618      	mov	r0, r3
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000824:	605a      	str	r2, [r3, #4]
  return 0;
 8000826:	2300      	movs	r3, #0
}
 8000828:	4618      	mov	r0, r3
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <_isatty>:

int _isatty(int file)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800083c:	2301      	movs	r3, #1
}
 800083e:	4618      	mov	r0, r3
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800084a:	b480      	push	{r7}
 800084c:	b085      	sub	sp, #20
 800084e:	af00      	add	r7, sp, #0
 8000850:	60f8      	str	r0, [r7, #12]
 8000852:	60b9      	str	r1, [r7, #8]
 8000854:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000856:	2300      	movs	r3, #0
}
 8000858:	4618      	mov	r0, r3
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800086c:	4a14      	ldr	r2, [pc, #80]	@ (80008c0 <_sbrk+0x5c>)
 800086e:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <_sbrk+0x60>)
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000878:	4b13      	ldr	r3, [pc, #76]	@ (80008c8 <_sbrk+0x64>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d102      	bne.n	8000886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000880:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <_sbrk+0x64>)
 8000882:	4a12      	ldr	r2, [pc, #72]	@ (80008cc <_sbrk+0x68>)
 8000884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000886:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <_sbrk+0x64>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4413      	add	r3, r2
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	429a      	cmp	r2, r3
 8000892:	d207      	bcs.n	80008a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000894:	f002 ff58 	bl	8003748 <__errno>
 8000898:	4603      	mov	r3, r0
 800089a:	220c      	movs	r2, #12
 800089c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800089e:	f04f 33ff 	mov.w	r3, #4294967295
 80008a2:	e009      	b.n	80008b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008a4:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <_sbrk+0x64>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008aa:	4b07      	ldr	r3, [pc, #28]	@ (80008c8 <_sbrk+0x64>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4413      	add	r3, r2
 80008b2:	4a05      	ldr	r2, [pc, #20]	@ (80008c8 <_sbrk+0x64>)
 80008b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008b6:	68fb      	ldr	r3, [r7, #12]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3718      	adds	r7, #24
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20018000 	.word	0x20018000
 80008c4:	00000400 	.word	0x00000400
 80008c8:	20000084 	.word	0x20000084
 80008cc:	20000260 	.word	0x20000260

080008d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <SystemInit+0x20>)
 80008d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008da:	4a05      	ldr	r2, [pc, #20]	@ (80008f0 <SystemInit+0x20>)
 80008dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f8:	4b14      	ldr	r3, [pc, #80]	@ (800094c <MX_USART2_UART_Init+0x58>)
 80008fa:	4a15      	ldr	r2, [pc, #84]	@ (8000950 <MX_USART2_UART_Init+0x5c>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008fe:	4b13      	ldr	r3, [pc, #76]	@ (800094c <MX_USART2_UART_Init+0x58>)
 8000900:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000904:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b11      	ldr	r3, [pc, #68]	@ (800094c <MX_USART2_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <MX_USART2_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <MX_USART2_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <MX_USART2_UART_Init+0x58>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <MX_USART2_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b09      	ldr	r3, [pc, #36]	@ (800094c <MX_USART2_UART_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092a:	4b08      	ldr	r3, [pc, #32]	@ (800094c <MX_USART2_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <MX_USART2_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	@ (800094c <MX_USART2_UART_Init+0x58>)
 8000938:	f001 ff14 	bl	8002764 <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000942:	f7ff fec8 	bl	80006d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	20000088 	.word	0x20000088
 8000950:	40004400 	.word	0x40004400

08000954 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b0ac      	sub	sp, #176	@ 0xb0
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	2288      	movs	r2, #136	@ 0x88
 8000972:	2100      	movs	r1, #0
 8000974:	4618      	mov	r0, r3
 8000976:	f002 fe99 	bl	80036ac <memset>
  if(uartHandle->Instance==USART2)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a21      	ldr	r2, [pc, #132]	@ (8000a04 <HAL_UART_MspInit+0xb0>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d13b      	bne.n	80009fc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000984:	2302      	movs	r3, #2
 8000986:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000988:	2300      	movs	r3, #0
 800098a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4618      	mov	r0, r3
 8000992:	f001 fa2b 	bl	8001dec <HAL_RCCEx_PeriphCLKConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800099c:	f7ff fe9b 	bl	80006d6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009a0:	4b19      	ldr	r3, [pc, #100]	@ (8000a08 <HAL_UART_MspInit+0xb4>)
 80009a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009a4:	4a18      	ldr	r2, [pc, #96]	@ (8000a08 <HAL_UART_MspInit+0xb4>)
 80009a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80009ac:	4b16      	ldr	r3, [pc, #88]	@ (8000a08 <HAL_UART_MspInit+0xb4>)
 80009ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b8:	4b13      	ldr	r3, [pc, #76]	@ (8000a08 <HAL_UART_MspInit+0xb4>)
 80009ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009bc:	4a12      	ldr	r2, [pc, #72]	@ (8000a08 <HAL_UART_MspInit+0xb4>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c4:	4b10      	ldr	r3, [pc, #64]	@ (8000a08 <HAL_UART_MspInit+0xb4>)
 80009c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009d0:	230c      	movs	r3, #12
 80009d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009e8:	2307      	movs	r3, #7
 80009ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009f2:	4619      	mov	r1, r3
 80009f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f8:	f000 f9b8 	bl	8000d6c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009fc:	bf00      	nop
 80009fe:	37b0      	adds	r7, #176	@ 0xb0
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40004400 	.word	0x40004400
 8000a08:	40021000 	.word	0x40021000

08000a0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a10:	f7ff ff5e 	bl	80008d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a14:	480c      	ldr	r0, [pc, #48]	@ (8000a48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a16:	490d      	ldr	r1, [pc, #52]	@ (8000a4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a18:	4a0d      	ldr	r2, [pc, #52]	@ (8000a50 <LoopForever+0xe>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a1c:	e002      	b.n	8000a24 <LoopCopyDataInit>

08000a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a22:	3304      	adds	r3, #4

08000a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a28:	d3f9      	bcc.n	8000a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a58 <LoopForever+0x16>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a30:	e001      	b.n	8000a36 <LoopFillZerobss>

08000a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a34:	3204      	adds	r2, #4

08000a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a38:	d3fb      	bcc.n	8000a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a3a:	f002 fe8b 	bl	8003754 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a3e:	f7ff fde9 	bl	8000614 <main>

08000a42 <LoopForever>:

LoopForever:
    b LoopForever
 8000a42:	e7fe      	b.n	8000a42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a4c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a50:	08003ca0 	.word	0x08003ca0
  ldr r2, =_sbss
 8000a54:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a58:	20000260 	.word	0x20000260

08000a5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC1_2_IRQHandler>
	...

08000a60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a66:	2300      	movs	r3, #0
 8000a68:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <HAL_Init+0x3c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a9c <HAL_Init+0x3c>)
 8000a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a74:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a76:	2003      	movs	r0, #3
 8000a78:	f000 f944 	bl	8000d04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f000 f80f 	bl	8000aa0 <HAL_InitTick>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d002      	beq.n	8000a8e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	71fb      	strb	r3, [r7, #7]
 8000a8c:	e001      	b.n	8000a92 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a8e:	f7ff fe29 	bl	80006e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a92:	79fb      	ldrb	r3, [r7, #7]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40022000 	.word	0x40022000

08000aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000aac:	4b17      	ldr	r3, [pc, #92]	@ (8000b0c <HAL_InitTick+0x6c>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d023      	beq.n	8000afc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ab4:	4b16      	ldr	r3, [pc, #88]	@ (8000b10 <HAL_InitTick+0x70>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b14      	ldr	r3, [pc, #80]	@ (8000b0c <HAL_InitTick+0x6c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4619      	mov	r1, r3
 8000abe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f941 	bl	8000d52 <HAL_SYSTICK_Config>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d10f      	bne.n	8000af6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2b0f      	cmp	r3, #15
 8000ada:	d809      	bhi.n	8000af0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000adc:	2200      	movs	r2, #0
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae4:	f000 f919 	bl	8000d1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8000b14 <HAL_InitTick+0x74>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6013      	str	r3, [r2, #0]
 8000aee:	e007      	b.n	8000b00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000af0:	2301      	movs	r3, #1
 8000af2:	73fb      	strb	r3, [r7, #15]
 8000af4:	e004      	b.n	8000b00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	73fb      	strb	r3, [r7, #15]
 8000afa:	e001      	b.n	8000b00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000afc:	2301      	movs	r3, #1
 8000afe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000004 	.word	0x20000004

08000b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <HAL_IncTick+0x20>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <HAL_IncTick+0x24>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a04      	ldr	r2, [pc, #16]	@ (8000b3c <HAL_IncTick+0x24>)
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000110 	.word	0x20000110

08000b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return uwTick;
 8000b44:	4b03      	ldr	r3, [pc, #12]	@ (8000b54 <HAL_GetTick+0x14>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000110 	.word	0x20000110

08000b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b60:	f7ff ffee 	bl	8000b40 <HAL_GetTick>
 8000b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b70:	d005      	beq.n	8000b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b72:	4b0a      	ldr	r3, [pc, #40]	@ (8000b9c <HAL_Delay+0x44>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	461a      	mov	r2, r3
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b7e:	bf00      	nop
 8000b80:	f7ff ffde 	bl	8000b40 <HAL_GetTick>
 8000b84:	4602      	mov	r2, r0
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d8f7      	bhi.n	8000b80 <HAL_Delay+0x28>
  {
  }
}
 8000b90:	bf00      	nop
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000008 	.word	0x20000008

08000ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f003 0307 	and.w	r3, r3, #7
 8000bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bd2:	4a04      	ldr	r2, [pc, #16]	@ (8000be4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	60d3      	str	r3, [r2, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bec:	4b04      	ldr	r3, [pc, #16]	@ (8000c00 <__NVIC_GetPriorityGrouping+0x18>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	0a1b      	lsrs	r3, r3, #8
 8000bf2:	f003 0307 	and.w	r3, r3, #7
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	6039      	str	r1, [r7, #0]
 8000c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	db0a      	blt.n	8000c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	490c      	ldr	r1, [pc, #48]	@ (8000c50 <__NVIC_SetPriority+0x4c>)
 8000c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c22:	0112      	lsls	r2, r2, #4
 8000c24:	b2d2      	uxtb	r2, r2
 8000c26:	440b      	add	r3, r1
 8000c28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c2c:	e00a      	b.n	8000c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4908      	ldr	r1, [pc, #32]	@ (8000c54 <__NVIC_SetPriority+0x50>)
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	f003 030f 	and.w	r3, r3, #15
 8000c3a:	3b04      	subs	r3, #4
 8000c3c:	0112      	lsls	r2, r2, #4
 8000c3e:	b2d2      	uxtb	r2, r2
 8000c40:	440b      	add	r3, r1
 8000c42:	761a      	strb	r2, [r3, #24]
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000e100 	.word	0xe000e100
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b089      	sub	sp, #36	@ 0x24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	f1c3 0307 	rsb	r3, r3, #7
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	bf28      	it	cs
 8000c76:	2304      	movcs	r3, #4
 8000c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3304      	adds	r3, #4
 8000c7e:	2b06      	cmp	r3, #6
 8000c80:	d902      	bls.n	8000c88 <NVIC_EncodePriority+0x30>
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3b03      	subs	r3, #3
 8000c86:	e000      	b.n	8000c8a <NVIC_EncodePriority+0x32>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43da      	mvns	r2, r3
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	401a      	ands	r2, r3
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8000caa:	43d9      	mvns	r1, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	4313      	orrs	r3, r2
         );
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3724      	adds	r7, #36	@ 0x24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cd0:	d301      	bcc.n	8000cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e00f      	b.n	8000cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <SysTick_Config+0x40>)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cde:	210f      	movs	r1, #15
 8000ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce4:	f7ff ff8e 	bl	8000c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce8:	4b05      	ldr	r3, [pc, #20]	@ (8000d00 <SysTick_Config+0x40>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cee:	4b04      	ldr	r3, [pc, #16]	@ (8000d00 <SysTick_Config+0x40>)
 8000cf0:	2207      	movs	r2, #7
 8000cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	e000e010 	.word	0xe000e010

08000d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f7ff ff47 	bl	8000ba0 <__NVIC_SetPriorityGrouping>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b086      	sub	sp, #24
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4603      	mov	r3, r0
 8000d22:	60b9      	str	r1, [r7, #8]
 8000d24:	607a      	str	r2, [r7, #4]
 8000d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d2c:	f7ff ff5c 	bl	8000be8 <__NVIC_GetPriorityGrouping>
 8000d30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	68b9      	ldr	r1, [r7, #8]
 8000d36:	6978      	ldr	r0, [r7, #20]
 8000d38:	f7ff ff8e 	bl	8000c58 <NVIC_EncodePriority>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d42:	4611      	mov	r1, r2
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ff5d 	bl	8000c04 <__NVIC_SetPriority>
}
 8000d4a:	bf00      	nop
 8000d4c:	3718      	adds	r7, #24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff ffb0 	bl	8000cc0 <SysTick_Config>
 8000d60:	4603      	mov	r3, r0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b087      	sub	sp, #28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d7a:	e17f      	b.n	800107c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	2101      	movs	r1, #1
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	fa01 f303 	lsl.w	r3, r1, r3
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f000 8171 	beq.w	8001076 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f003 0303 	and.w	r3, r3, #3
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d005      	beq.n	8000dac <HAL_GPIO_Init+0x40>
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f003 0303 	and.w	r3, r3, #3
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d130      	bne.n	8000e0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	2203      	movs	r2, #3
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	68da      	ldr	r2, [r3, #12]
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000de2:	2201      	movs	r2, #1
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	091b      	lsrs	r3, r3, #4
 8000df8:	f003 0201 	and.w	r2, r3, #1
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 0303 	and.w	r3, r3, #3
 8000e16:	2b03      	cmp	r3, #3
 8000e18:	d118      	bne.n	8000e4c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e20:	2201      	movs	r2, #1
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	08db      	lsrs	r3, r3, #3
 8000e36:	f003 0201 	and.w	r2, r3, #1
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0303 	and.w	r3, r3, #3
 8000e54:	2b03      	cmp	r3, #3
 8000e56:	d017      	beq.n	8000e88 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	2203      	movs	r2, #3
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0303 	and.w	r3, r3, #3
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d123      	bne.n	8000edc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	08da      	lsrs	r2, r3, #3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3208      	adds	r2, #8
 8000e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	f003 0307 	and.w	r3, r3, #7
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	220f      	movs	r2, #15
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	691a      	ldr	r2, [r3, #16]
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	08da      	lsrs	r2, r3, #3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3208      	adds	r2, #8
 8000ed6:	6939      	ldr	r1, [r7, #16]
 8000ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0203 	and.w	r2, r3, #3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	f000 80ac 	beq.w	8001076 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1e:	4b5f      	ldr	r3, [pc, #380]	@ (800109c <HAL_GPIO_Init+0x330>)
 8000f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f22:	4a5e      	ldr	r2, [pc, #376]	@ (800109c <HAL_GPIO_Init+0x330>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f2a:	4b5c      	ldr	r3, [pc, #368]	@ (800109c <HAL_GPIO_Init+0x330>)
 8000f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f36:	4a5a      	ldr	r2, [pc, #360]	@ (80010a0 <HAL_GPIO_Init+0x334>)
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	089b      	lsrs	r3, r3, #2
 8000f3c:	3302      	adds	r3, #2
 8000f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f42:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	f003 0303 	and.w	r3, r3, #3
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	220f      	movs	r2, #15
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f60:	d025      	beq.n	8000fae <HAL_GPIO_Init+0x242>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4f      	ldr	r2, [pc, #316]	@ (80010a4 <HAL_GPIO_Init+0x338>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d01f      	beq.n	8000faa <HAL_GPIO_Init+0x23e>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4e      	ldr	r2, [pc, #312]	@ (80010a8 <HAL_GPIO_Init+0x33c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d019      	beq.n	8000fa6 <HAL_GPIO_Init+0x23a>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4d      	ldr	r2, [pc, #308]	@ (80010ac <HAL_GPIO_Init+0x340>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d013      	beq.n	8000fa2 <HAL_GPIO_Init+0x236>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4c      	ldr	r2, [pc, #304]	@ (80010b0 <HAL_GPIO_Init+0x344>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d00d      	beq.n	8000f9e <HAL_GPIO_Init+0x232>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4b      	ldr	r2, [pc, #300]	@ (80010b4 <HAL_GPIO_Init+0x348>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d007      	beq.n	8000f9a <HAL_GPIO_Init+0x22e>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4a      	ldr	r2, [pc, #296]	@ (80010b8 <HAL_GPIO_Init+0x34c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d101      	bne.n	8000f96 <HAL_GPIO_Init+0x22a>
 8000f92:	2306      	movs	r3, #6
 8000f94:	e00c      	b.n	8000fb0 <HAL_GPIO_Init+0x244>
 8000f96:	2307      	movs	r3, #7
 8000f98:	e00a      	b.n	8000fb0 <HAL_GPIO_Init+0x244>
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	e008      	b.n	8000fb0 <HAL_GPIO_Init+0x244>
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	e006      	b.n	8000fb0 <HAL_GPIO_Init+0x244>
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e004      	b.n	8000fb0 <HAL_GPIO_Init+0x244>
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	e002      	b.n	8000fb0 <HAL_GPIO_Init+0x244>
 8000faa:	2301      	movs	r3, #1
 8000fac:	e000      	b.n	8000fb0 <HAL_GPIO_Init+0x244>
 8000fae:	2300      	movs	r3, #0
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	f002 0203 	and.w	r2, r2, #3
 8000fb6:	0092      	lsls	r2, r2, #2
 8000fb8:	4093      	lsls	r3, r2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fc0:	4937      	ldr	r1, [pc, #220]	@ (80010a0 <HAL_GPIO_Init+0x334>)
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	089b      	lsrs	r3, r3, #2
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fce:	4b3b      	ldr	r3, [pc, #236]	@ (80010bc <HAL_GPIO_Init+0x350>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ff2:	4a32      	ldr	r2, [pc, #200]	@ (80010bc <HAL_GPIO_Init+0x350>)
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ff8:	4b30      	ldr	r3, [pc, #192]	@ (80010bc <HAL_GPIO_Init+0x350>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	43db      	mvns	r3, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800101c:	4a27      	ldr	r2, [pc, #156]	@ (80010bc <HAL_GPIO_Init+0x350>)
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001022:	4b26      	ldr	r3, [pc, #152]	@ (80010bc <HAL_GPIO_Init+0x350>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4313      	orrs	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001046:	4a1d      	ldr	r2, [pc, #116]	@ (80010bc <HAL_GPIO_Init+0x350>)
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800104c:	4b1b      	ldr	r3, [pc, #108]	@ (80010bc <HAL_GPIO_Init+0x350>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	43db      	mvns	r3, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001070:	4a12      	ldr	r2, [pc, #72]	@ (80010bc <HAL_GPIO_Init+0x350>)
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	3301      	adds	r3, #1
 800107a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa22 f303 	lsr.w	r3, r2, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	f47f ae78 	bne.w	8000d7c <HAL_GPIO_Init+0x10>
  }
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	371c      	adds	r7, #28
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40021000 	.word	0x40021000
 80010a0:	40010000 	.word	0x40010000
 80010a4:	48000400 	.word	0x48000400
 80010a8:	48000800 	.word	0x48000800
 80010ac:	48000c00 	.word	0x48000c00
 80010b0:	48001000 	.word	0x48001000
 80010b4:	48001400 	.word	0x48001400
 80010b8:	48001800 	.word	0x48001800
 80010bc:	40010400 	.word	0x40010400

080010c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	807b      	strh	r3, [r7, #2]
 80010cc:	4613      	mov	r3, r2
 80010ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010d0:	787b      	ldrb	r3, [r7, #1]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010d6:	887a      	ldrh	r2, [r7, #2]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010dc:	e002      	b.n	80010e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010de:	887a      	ldrh	r2, [r7, #2]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010e4:	bf00      	nop
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001102:	887a      	ldrh	r2, [r7, #2]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4013      	ands	r3, r2
 8001108:	041a      	lsls	r2, r3, #16
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	43d9      	mvns	r1, r3
 800110e:	887b      	ldrh	r3, [r7, #2]
 8001110:	400b      	ands	r3, r1
 8001112:	431a      	orrs	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	619a      	str	r2, [r3, #24]
}
 8001118:	bf00      	nop
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001128:	4b04      	ldr	r3, [pc, #16]	@ (800113c <HAL_PWREx_GetVoltageRange+0x18>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40007000 	.word	0x40007000

08001140 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800114e:	d130      	bne.n	80011b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001150:	4b23      	ldr	r3, [pc, #140]	@ (80011e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800115c:	d038      	beq.n	80011d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800115e:	4b20      	ldr	r3, [pc, #128]	@ (80011e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001166:	4a1e      	ldr	r2, [pc, #120]	@ (80011e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001168:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800116c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800116e:	4b1d      	ldr	r3, [pc, #116]	@ (80011e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2232      	movs	r2, #50	@ 0x32
 8001174:	fb02 f303 	mul.w	r3, r2, r3
 8001178:	4a1b      	ldr	r2, [pc, #108]	@ (80011e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800117a:	fba2 2303 	umull	r2, r3, r2, r3
 800117e:	0c9b      	lsrs	r3, r3, #18
 8001180:	3301      	adds	r3, #1
 8001182:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001184:	e002      	b.n	800118c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	3b01      	subs	r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800118c:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800118e:	695b      	ldr	r3, [r3, #20]
 8001190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001194:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001198:	d102      	bne.n	80011a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1f2      	bne.n	8001186 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011a0:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011ac:	d110      	bne.n	80011d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e00f      	b.n	80011d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011b2:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011be:	d007      	beq.n	80011d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011c0:	4b07      	ldr	r3, [pc, #28]	@ (80011e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011c8:	4a05      	ldr	r2, [pc, #20]	@ (80011e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40007000 	.word	0x40007000
 80011e4:	20000000 	.word	0x20000000
 80011e8:	431bde83 	.word	0x431bde83

080011ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e3ca      	b.n	8001994 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011fe:	4b97      	ldr	r3, [pc, #604]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 030c 	and.w	r3, r3, #12
 8001206:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001208:	4b94      	ldr	r3, [pc, #592]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0310 	and.w	r3, r3, #16
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 80e4 	beq.w	80013e8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d007      	beq.n	8001236 <HAL_RCC_OscConfig+0x4a>
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	2b0c      	cmp	r3, #12
 800122a:	f040 808b 	bne.w	8001344 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	2b01      	cmp	r3, #1
 8001232:	f040 8087 	bne.w	8001344 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001236:	4b89      	ldr	r3, [pc, #548]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d005      	beq.n	800124e <HAL_RCC_OscConfig+0x62>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e3a2      	b.n	8001994 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a1a      	ldr	r2, [r3, #32]
 8001252:	4b82      	ldr	r3, [pc, #520]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	2b00      	cmp	r3, #0
 800125c:	d004      	beq.n	8001268 <HAL_RCC_OscConfig+0x7c>
 800125e:	4b7f      	ldr	r3, [pc, #508]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001266:	e005      	b.n	8001274 <HAL_RCC_OscConfig+0x88>
 8001268:	4b7c      	ldr	r3, [pc, #496]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 800126a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800126e:	091b      	lsrs	r3, r3, #4
 8001270:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001274:	4293      	cmp	r3, r2
 8001276:	d223      	bcs.n	80012c0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	4618      	mov	r0, r3
 800127e:	f000 fd55 	bl	8001d2c <RCC_SetFlashLatencyFromMSIRange>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e383      	b.n	8001994 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800128c:	4b73      	ldr	r3, [pc, #460]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a72      	ldr	r2, [pc, #456]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001292:	f043 0308 	orr.w	r3, r3, #8
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	4b70      	ldr	r3, [pc, #448]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	496d      	ldr	r1, [pc, #436]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012aa:	4b6c      	ldr	r3, [pc, #432]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	4968      	ldr	r1, [pc, #416]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	604b      	str	r3, [r1, #4]
 80012be:	e025      	b.n	800130c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012c0:	4b66      	ldr	r3, [pc, #408]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a65      	ldr	r2, [pc, #404]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 80012c6:	f043 0308 	orr.w	r3, r3, #8
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b63      	ldr	r3, [pc, #396]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	4960      	ldr	r1, [pc, #384]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012de:	4b5f      	ldr	r3, [pc, #380]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	021b      	lsls	r3, r3, #8
 80012ec:	495b      	ldr	r1, [pc, #364]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d109      	bne.n	800130c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a1b      	ldr	r3, [r3, #32]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f000 fd15 	bl	8001d2c <RCC_SetFlashLatencyFromMSIRange>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e343      	b.n	8001994 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800130c:	f000 fc4a 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8001310:	4602      	mov	r2, r0
 8001312:	4b52      	ldr	r3, [pc, #328]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	091b      	lsrs	r3, r3, #4
 8001318:	f003 030f 	and.w	r3, r3, #15
 800131c:	4950      	ldr	r1, [pc, #320]	@ (8001460 <HAL_RCC_OscConfig+0x274>)
 800131e:	5ccb      	ldrb	r3, [r1, r3]
 8001320:	f003 031f 	and.w	r3, r3, #31
 8001324:	fa22 f303 	lsr.w	r3, r2, r3
 8001328:	4a4e      	ldr	r2, [pc, #312]	@ (8001464 <HAL_RCC_OscConfig+0x278>)
 800132a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800132c:	4b4e      	ldr	r3, [pc, #312]	@ (8001468 <HAL_RCC_OscConfig+0x27c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fbb5 	bl	8000aa0 <HAL_InitTick>
 8001336:	4603      	mov	r3, r0
 8001338:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d052      	beq.n	80013e6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	e327      	b.n	8001994 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d032      	beq.n	80013b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800134c:	4b43      	ldr	r3, [pc, #268]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a42      	ldr	r2, [pc, #264]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001358:	f7ff fbf2 	bl	8000b40 <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001360:	f7ff fbee 	bl	8000b40 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e310      	b.n	8001994 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001372:	4b3a      	ldr	r3, [pc, #232]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0f0      	beq.n	8001360 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800137e:	4b37      	ldr	r3, [pc, #220]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a36      	ldr	r2, [pc, #216]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001384:	f043 0308 	orr.w	r3, r3, #8
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	4b34      	ldr	r3, [pc, #208]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	4931      	ldr	r1, [pc, #196]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001398:	4313      	orrs	r3, r2
 800139a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800139c:	4b2f      	ldr	r3, [pc, #188]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69db      	ldr	r3, [r3, #28]
 80013a8:	021b      	lsls	r3, r3, #8
 80013aa:	492c      	ldr	r1, [pc, #176]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]
 80013b0:	e01a      	b.n	80013e8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013b2:	4b2a      	ldr	r3, [pc, #168]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a29      	ldr	r2, [pc, #164]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 80013b8:	f023 0301 	bic.w	r3, r3, #1
 80013bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013be:	f7ff fbbf 	bl	8000b40 <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013c6:	f7ff fbbb 	bl	8000b40 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e2dd      	b.n	8001994 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013d8:	4b20      	ldr	r3, [pc, #128]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1f0      	bne.n	80013c6 <HAL_RCC_OscConfig+0x1da>
 80013e4:	e000      	b.n	80013e8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d074      	beq.n	80014de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	2b08      	cmp	r3, #8
 80013f8:	d005      	beq.n	8001406 <HAL_RCC_OscConfig+0x21a>
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	2b0c      	cmp	r3, #12
 80013fe:	d10e      	bne.n	800141e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	2b03      	cmp	r3, #3
 8001404:	d10b      	bne.n	800141e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001406:	4b15      	ldr	r3, [pc, #84]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d064      	beq.n	80014dc <HAL_RCC_OscConfig+0x2f0>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d160      	bne.n	80014dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e2ba      	b.n	8001994 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001426:	d106      	bne.n	8001436 <HAL_RCC_OscConfig+0x24a>
 8001428:	4b0c      	ldr	r3, [pc, #48]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a0b      	ldr	r2, [pc, #44]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 800142e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	e026      	b.n	8001484 <HAL_RCC_OscConfig+0x298>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800143e:	d115      	bne.n	800146c <HAL_RCC_OscConfig+0x280>
 8001440:	4b06      	ldr	r3, [pc, #24]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a05      	ldr	r2, [pc, #20]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001446:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b03      	ldr	r3, [pc, #12]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a02      	ldr	r2, [pc, #8]	@ (800145c <HAL_RCC_OscConfig+0x270>)
 8001452:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	e014      	b.n	8001484 <HAL_RCC_OscConfig+0x298>
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000
 8001460:	08003c48 	.word	0x08003c48
 8001464:	20000000 	.word	0x20000000
 8001468:	20000004 	.word	0x20000004
 800146c:	4ba0      	ldr	r3, [pc, #640]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a9f      	ldr	r2, [pc, #636]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001472:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	4b9d      	ldr	r3, [pc, #628]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a9c      	ldr	r2, [pc, #624]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 800147e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d013      	beq.n	80014b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800148c:	f7ff fb58 	bl	8000b40 <HAL_GetTick>
 8001490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001494:	f7ff fb54 	bl	8000b40 <HAL_GetTick>
 8001498:	4602      	mov	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b64      	cmp	r3, #100	@ 0x64
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e276      	b.n	8001994 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014a6:	4b92      	ldr	r3, [pc, #584]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0x2a8>
 80014b2:	e014      	b.n	80014de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b4:	f7ff fb44 	bl	8000b40 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014bc:	f7ff fb40 	bl	8000b40 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b64      	cmp	r3, #100	@ 0x64
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e262      	b.n	8001994 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ce:	4b88      	ldr	r3, [pc, #544]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0x2d0>
 80014da:	e000      	b.n	80014de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d060      	beq.n	80015ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	2b04      	cmp	r3, #4
 80014ee:	d005      	beq.n	80014fc <HAL_RCC_OscConfig+0x310>
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	2b0c      	cmp	r3, #12
 80014f4:	d119      	bne.n	800152a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d116      	bne.n	800152a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014fc:	4b7c      	ldr	r3, [pc, #496]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001504:	2b00      	cmp	r3, #0
 8001506:	d005      	beq.n	8001514 <HAL_RCC_OscConfig+0x328>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d101      	bne.n	8001514 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e23f      	b.n	8001994 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001514:	4b76      	ldr	r3, [pc, #472]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	061b      	lsls	r3, r3, #24
 8001522:	4973      	ldr	r1, [pc, #460]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001524:	4313      	orrs	r3, r2
 8001526:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001528:	e040      	b.n	80015ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d023      	beq.n	800157a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001532:	4b6f      	ldr	r3, [pc, #444]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a6e      	ldr	r2, [pc, #440]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800153c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153e:	f7ff faff 	bl	8000b40 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001546:	f7ff fafb 	bl	8000b40 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e21d      	b.n	8001994 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001558:	4b65      	ldr	r3, [pc, #404]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0f0      	beq.n	8001546 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001564:	4b62      	ldr	r3, [pc, #392]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	061b      	lsls	r3, r3, #24
 8001572:	495f      	ldr	r1, [pc, #380]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001574:	4313      	orrs	r3, r2
 8001576:	604b      	str	r3, [r1, #4]
 8001578:	e018      	b.n	80015ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800157a:	4b5d      	ldr	r3, [pc, #372]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a5c      	ldr	r2, [pc, #368]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001580:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001586:	f7ff fadb 	bl	8000b40 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800158e:	f7ff fad7 	bl	8000b40 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e1f9      	b.n	8001994 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015a0:	4b53      	ldr	r3, [pc, #332]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1f0      	bne.n	800158e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0308 	and.w	r3, r3, #8
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d03c      	beq.n	8001632 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d01c      	beq.n	80015fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c0:	4b4b      	ldr	r3, [pc, #300]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 80015c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015c6:	4a4a      	ldr	r2, [pc, #296]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d0:	f7ff fab6 	bl	8000b40 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d8:	f7ff fab2 	bl	8000b40 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e1d4      	b.n	8001994 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ea:	4b41      	ldr	r3, [pc, #260]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 80015ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d0ef      	beq.n	80015d8 <HAL_RCC_OscConfig+0x3ec>
 80015f8:	e01b      	b.n	8001632 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015fa:	4b3d      	ldr	r3, [pc, #244]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 80015fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001600:	4a3b      	ldr	r2, [pc, #236]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001602:	f023 0301 	bic.w	r3, r3, #1
 8001606:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160a:	f7ff fa99 	bl	8000b40 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001612:	f7ff fa95 	bl	8000b40 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e1b7      	b.n	8001994 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001624:	4b32      	ldr	r3, [pc, #200]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001626:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1ef      	bne.n	8001612 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0304 	and.w	r3, r3, #4
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 80a6 	beq.w	800178c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001640:	2300      	movs	r3, #0
 8001642:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001644:	4b2a      	ldr	r3, [pc, #168]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10d      	bne.n	800166c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001650:	4b27      	ldr	r3, [pc, #156]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001654:	4a26      	ldr	r2, [pc, #152]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 8001656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800165a:	6593      	str	r3, [r2, #88]	@ 0x58
 800165c:	4b24      	ldr	r3, [pc, #144]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 800165e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001668:	2301      	movs	r3, #1
 800166a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800166c:	4b21      	ldr	r3, [pc, #132]	@ (80016f4 <HAL_RCC_OscConfig+0x508>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001674:	2b00      	cmp	r3, #0
 8001676:	d118      	bne.n	80016aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001678:	4b1e      	ldr	r3, [pc, #120]	@ (80016f4 <HAL_RCC_OscConfig+0x508>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a1d      	ldr	r2, [pc, #116]	@ (80016f4 <HAL_RCC_OscConfig+0x508>)
 800167e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001682:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001684:	f7ff fa5c 	bl	8000b40 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800168c:	f7ff fa58 	bl	8000b40 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e17a      	b.n	8001994 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800169e:	4b15      	ldr	r3, [pc, #84]	@ (80016f4 <HAL_RCC_OscConfig+0x508>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f0      	beq.n	800168c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d108      	bne.n	80016c4 <HAL_RCC_OscConfig+0x4d8>
 80016b2:	4b0f      	ldr	r3, [pc, #60]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 80016b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016b8:	4a0d      	ldr	r2, [pc, #52]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016c2:	e029      	b.n	8001718 <HAL_RCC_OscConfig+0x52c>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2b05      	cmp	r3, #5
 80016ca:	d115      	bne.n	80016f8 <HAL_RCC_OscConfig+0x50c>
 80016cc:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 80016ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016d2:	4a07      	ldr	r2, [pc, #28]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016dc:	4b04      	ldr	r3, [pc, #16]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 80016de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016e2:	4a03      	ldr	r2, [pc, #12]	@ (80016f0 <HAL_RCC_OscConfig+0x504>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016ec:	e014      	b.n	8001718 <HAL_RCC_OscConfig+0x52c>
 80016ee:	bf00      	nop
 80016f0:	40021000 	.word	0x40021000
 80016f4:	40007000 	.word	0x40007000
 80016f8:	4b9c      	ldr	r3, [pc, #624]	@ (800196c <HAL_RCC_OscConfig+0x780>)
 80016fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016fe:	4a9b      	ldr	r2, [pc, #620]	@ (800196c <HAL_RCC_OscConfig+0x780>)
 8001700:	f023 0301 	bic.w	r3, r3, #1
 8001704:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001708:	4b98      	ldr	r3, [pc, #608]	@ (800196c <HAL_RCC_OscConfig+0x780>)
 800170a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800170e:	4a97      	ldr	r2, [pc, #604]	@ (800196c <HAL_RCC_OscConfig+0x780>)
 8001710:	f023 0304 	bic.w	r3, r3, #4
 8001714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d016      	beq.n	800174e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001720:	f7ff fa0e 	bl	8000b40 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001726:	e00a      	b.n	800173e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001728:	f7ff fa0a 	bl	8000b40 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e12a      	b.n	8001994 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800173e:	4b8b      	ldr	r3, [pc, #556]	@ (800196c <HAL_RCC_OscConfig+0x780>)
 8001740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0ed      	beq.n	8001728 <HAL_RCC_OscConfig+0x53c>
 800174c:	e015      	b.n	800177a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174e:	f7ff f9f7 	bl	8000b40 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001754:	e00a      	b.n	800176c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001756:	f7ff f9f3 	bl	8000b40 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001764:	4293      	cmp	r3, r2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e113      	b.n	8001994 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800176c:	4b7f      	ldr	r3, [pc, #508]	@ (800196c <HAL_RCC_OscConfig+0x780>)
 800176e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1ed      	bne.n	8001756 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800177a:	7ffb      	ldrb	r3, [r7, #31]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d105      	bne.n	800178c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001780:	4b7a      	ldr	r3, [pc, #488]	@ (800196c <HAL_RCC_OscConfig+0x780>)
 8001782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001784:	4a79      	ldr	r2, [pc, #484]	@ (800196c <HAL_RCC_OscConfig+0x780>)
 8001786:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800178a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 80fe 	beq.w	8001992 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800179a:	2b02      	cmp	r3, #2
 800179c:	f040 80d0 	bne.w	8001940 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017a0:	4b72      	ldr	r3, [pc, #456]	@ (800196c <HAL_RCC_OscConfig+0x780>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f003 0203 	and.w	r2, r3, #3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d130      	bne.n	8001816 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	3b01      	subs	r3, #1
 80017c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d127      	bne.n	8001816 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d11f      	bne.n	8001816 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80017e0:	2a07      	cmp	r2, #7
 80017e2:	bf14      	ite	ne
 80017e4:	2201      	movne	r2, #1
 80017e6:	2200      	moveq	r2, #0
 80017e8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d113      	bne.n	8001816 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017f8:	085b      	lsrs	r3, r3, #1
 80017fa:	3b01      	subs	r3, #1
 80017fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017fe:	429a      	cmp	r2, r3
 8001800:	d109      	bne.n	8001816 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180c:	085b      	lsrs	r3, r3, #1
 800180e:	3b01      	subs	r3, #1
 8001810:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001812:	429a      	cmp	r2, r3
 8001814:	d06e      	beq.n	80018f4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	2b0c      	cmp	r3, #12
 800181a:	d069      	beq.n	80018f0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800181c:	4b53      	ldr	r3, [pc, #332]	@ (800196c <HAL_RCC_OscConfig+0x780>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d105      	bne.n	8001834 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001828:	4b50      	ldr	r3, [pc, #320]	@ (800196c <HAL_RCC_OscConfig+0x780>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e0ad      	b.n	8001994 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001838:	4b4c      	ldr	r3, [pc, #304]	@ (800196c <HAL_RCC_OscConfig+0x780>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a4b      	ldr	r2, [pc, #300]	@ (800196c <HAL_RCC_OscConfig+0x780>)
 800183e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001842:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001844:	f7ff f97c 	bl	8000b40 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184c:	f7ff f978 	bl	8000b40 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e09a      	b.n	8001994 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800185e:	4b43      	ldr	r3, [pc, #268]	@ (800196c <HAL_RCC_OscConfig+0x780>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800186a:	4b40      	ldr	r3, [pc, #256]	@ (800196c <HAL_RCC_OscConfig+0x780>)
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	4b40      	ldr	r3, [pc, #256]	@ (8001970 <HAL_RCC_OscConfig+0x784>)
 8001870:	4013      	ands	r3, r2
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800187a:	3a01      	subs	r2, #1
 800187c:	0112      	lsls	r2, r2, #4
 800187e:	4311      	orrs	r1, r2
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001884:	0212      	lsls	r2, r2, #8
 8001886:	4311      	orrs	r1, r2
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800188c:	0852      	lsrs	r2, r2, #1
 800188e:	3a01      	subs	r2, #1
 8001890:	0552      	lsls	r2, r2, #21
 8001892:	4311      	orrs	r1, r2
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001898:	0852      	lsrs	r2, r2, #1
 800189a:	3a01      	subs	r2, #1
 800189c:	0652      	lsls	r2, r2, #25
 800189e:	4311      	orrs	r1, r2
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80018a4:	0912      	lsrs	r2, r2, #4
 80018a6:	0452      	lsls	r2, r2, #17
 80018a8:	430a      	orrs	r2, r1
 80018aa:	4930      	ldr	r1, [pc, #192]	@ (800196c <HAL_RCC_OscConfig+0x780>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018b0:	4b2e      	ldr	r3, [pc, #184]	@ (800196c <HAL_RCC_OscConfig+0x780>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a2d      	ldr	r2, [pc, #180]	@ (800196c <HAL_RCC_OscConfig+0x780>)
 80018b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018ba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018bc:	4b2b      	ldr	r3, [pc, #172]	@ (800196c <HAL_RCC_OscConfig+0x780>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	4a2a      	ldr	r2, [pc, #168]	@ (800196c <HAL_RCC_OscConfig+0x780>)
 80018c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018c8:	f7ff f93a 	bl	8000b40 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d0:	f7ff f936 	bl	8000b40 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e058      	b.n	8001994 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018e2:	4b22      	ldr	r3, [pc, #136]	@ (800196c <HAL_RCC_OscConfig+0x780>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018ee:	e050      	b.n	8001992 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e04f      	b.n	8001994 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018f4:	4b1d      	ldr	r3, [pc, #116]	@ (800196c <HAL_RCC_OscConfig+0x780>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d148      	bne.n	8001992 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001900:	4b1a      	ldr	r3, [pc, #104]	@ (800196c <HAL_RCC_OscConfig+0x780>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a19      	ldr	r2, [pc, #100]	@ (800196c <HAL_RCC_OscConfig+0x780>)
 8001906:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800190a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800190c:	4b17      	ldr	r3, [pc, #92]	@ (800196c <HAL_RCC_OscConfig+0x780>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	4a16      	ldr	r2, [pc, #88]	@ (800196c <HAL_RCC_OscConfig+0x780>)
 8001912:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001916:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001918:	f7ff f912 	bl	8000b40 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001920:	f7ff f90e 	bl	8000b40 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e030      	b.n	8001994 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001932:	4b0e      	ldr	r3, [pc, #56]	@ (800196c <HAL_RCC_OscConfig+0x780>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0x734>
 800193e:	e028      	b.n	8001992 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	2b0c      	cmp	r3, #12
 8001944:	d023      	beq.n	800198e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001946:	4b09      	ldr	r3, [pc, #36]	@ (800196c <HAL_RCC_OscConfig+0x780>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a08      	ldr	r2, [pc, #32]	@ (800196c <HAL_RCC_OscConfig+0x780>)
 800194c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001952:	f7ff f8f5 	bl	8000b40 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001958:	e00c      	b.n	8001974 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195a:	f7ff f8f1 	bl	8000b40 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d905      	bls.n	8001974 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e013      	b.n	8001994 <HAL_RCC_OscConfig+0x7a8>
 800196c:	40021000 	.word	0x40021000
 8001970:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001974:	4b09      	ldr	r3, [pc, #36]	@ (800199c <HAL_RCC_OscConfig+0x7b0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1ec      	bne.n	800195a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001980:	4b06      	ldr	r3, [pc, #24]	@ (800199c <HAL_RCC_OscConfig+0x7b0>)
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	4905      	ldr	r1, [pc, #20]	@ (800199c <HAL_RCC_OscConfig+0x7b0>)
 8001986:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <HAL_RCC_OscConfig+0x7b4>)
 8001988:	4013      	ands	r3, r2
 800198a:	60cb      	str	r3, [r1, #12]
 800198c:	e001      	b.n	8001992 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3720      	adds	r7, #32
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40021000 	.word	0x40021000
 80019a0:	feeefffc 	.word	0xfeeefffc

080019a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d101      	bne.n	80019b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0e7      	b.n	8001b88 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019b8:	4b75      	ldr	r3, [pc, #468]	@ (8001b90 <HAL_RCC_ClockConfig+0x1ec>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d910      	bls.n	80019e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019c6:	4b72      	ldr	r3, [pc, #456]	@ (8001b90 <HAL_RCC_ClockConfig+0x1ec>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f023 0207 	bic.w	r2, r3, #7
 80019ce:	4970      	ldr	r1, [pc, #448]	@ (8001b90 <HAL_RCC_ClockConfig+0x1ec>)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d6:	4b6e      	ldr	r3, [pc, #440]	@ (8001b90 <HAL_RCC_ClockConfig+0x1ec>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0cf      	b.n	8001b88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d010      	beq.n	8001a16 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	4b66      	ldr	r3, [pc, #408]	@ (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d908      	bls.n	8001a16 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a04:	4b63      	ldr	r3, [pc, #396]	@ (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	4960      	ldr	r1, [pc, #384]	@ (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d04c      	beq.n	8001abc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d107      	bne.n	8001a3a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a2a:	4b5a      	ldr	r3, [pc, #360]	@ (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d121      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e0a6      	b.n	8001b88 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d107      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a42:	4b54      	ldr	r3, [pc, #336]	@ (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d115      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e09a      	b.n	8001b88 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a5a:	4b4e      	ldr	r3, [pc, #312]	@ (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d109      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e08e      	b.n	8001b88 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a6a:	4b4a      	ldr	r3, [pc, #296]	@ (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e086      	b.n	8001b88 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a7a:	4b46      	ldr	r3, [pc, #280]	@ (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f023 0203 	bic.w	r2, r3, #3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4943      	ldr	r1, [pc, #268]	@ (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a8c:	f7ff f858 	bl	8000b40 <HAL_GetTick>
 8001a90:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a92:	e00a      	b.n	8001aaa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a94:	f7ff f854 	bl	8000b40 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e06e      	b.n	8001b88 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aaa:	4b3a      	ldr	r3, [pc, #232]	@ (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 020c 	and.w	r2, r3, #12
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d1eb      	bne.n	8001a94 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d010      	beq.n	8001aea <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	4b31      	ldr	r3, [pc, #196]	@ (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d208      	bcs.n	8001aea <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad8:	4b2e      	ldr	r3, [pc, #184]	@ (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	492b      	ldr	r1, [pc, #172]	@ (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aea:	4b29      	ldr	r3, [pc, #164]	@ (8001b90 <HAL_RCC_ClockConfig+0x1ec>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0307 	and.w	r3, r3, #7
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d210      	bcs.n	8001b1a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af8:	4b25      	ldr	r3, [pc, #148]	@ (8001b90 <HAL_RCC_ClockConfig+0x1ec>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f023 0207 	bic.w	r2, r3, #7
 8001b00:	4923      	ldr	r1, [pc, #140]	@ (8001b90 <HAL_RCC_ClockConfig+0x1ec>)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b08:	4b21      	ldr	r3, [pc, #132]	@ (8001b90 <HAL_RCC_ClockConfig+0x1ec>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d001      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e036      	b.n	8001b88 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0304 	and.w	r3, r3, #4
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d008      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b26:	4b1b      	ldr	r3, [pc, #108]	@ (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	4918      	ldr	r1, [pc, #96]	@ (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0308 	and.w	r3, r3, #8
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d009      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b44:	4b13      	ldr	r3, [pc, #76]	@ (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	4910      	ldr	r1, [pc, #64]	@ (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b58:	f000 f824 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b94 <HAL_RCC_ClockConfig+0x1f0>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	091b      	lsrs	r3, r3, #4
 8001b64:	f003 030f 	and.w	r3, r3, #15
 8001b68:	490b      	ldr	r1, [pc, #44]	@ (8001b98 <HAL_RCC_ClockConfig+0x1f4>)
 8001b6a:	5ccb      	ldrb	r3, [r1, r3]
 8001b6c:	f003 031f 	and.w	r3, r3, #31
 8001b70:	fa22 f303 	lsr.w	r3, r2, r3
 8001b74:	4a09      	ldr	r2, [pc, #36]	@ (8001b9c <HAL_RCC_ClockConfig+0x1f8>)
 8001b76:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b78:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <HAL_RCC_ClockConfig+0x1fc>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe ff8f 	bl	8000aa0 <HAL_InitTick>
 8001b82:	4603      	mov	r3, r0
 8001b84:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b86:	7afb      	ldrb	r3, [r7, #11]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40022000 	.word	0x40022000
 8001b94:	40021000 	.word	0x40021000
 8001b98:	08003c48 	.word	0x08003c48
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	20000004 	.word	0x20000004

08001ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b089      	sub	sp, #36	@ 0x24
 8001ba8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bb2:	4b3e      	ldr	r3, [pc, #248]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x108>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x108>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d005      	beq.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x34>
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	2b0c      	cmp	r3, #12
 8001bd0:	d121      	bne.n	8001c16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d11e      	bne.n	8001c16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bd8:	4b34      	ldr	r3, [pc, #208]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x108>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0308 	and.w	r3, r3, #8
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d107      	bne.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001be4:	4b31      	ldr	r3, [pc, #196]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x108>)
 8001be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bea:	0a1b      	lsrs	r3, r3, #8
 8001bec:	f003 030f 	and.w	r3, r3, #15
 8001bf0:	61fb      	str	r3, [r7, #28]
 8001bf2:	e005      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bf4:	4b2d      	ldr	r3, [pc, #180]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	091b      	lsrs	r3, r3, #4
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c00:	4a2b      	ldr	r2, [pc, #172]	@ (8001cb0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10d      	bne.n	8001c2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c14:	e00a      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	2b04      	cmp	r3, #4
 8001c1a:	d102      	bne.n	8001c22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c1c:	4b25      	ldr	r3, [pc, #148]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c1e:	61bb      	str	r3, [r7, #24]
 8001c20:	e004      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	2b08      	cmp	r3, #8
 8001c26:	d101      	bne.n	8001c2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c28:	4b23      	ldr	r3, [pc, #140]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	2b0c      	cmp	r3, #12
 8001c30:	d134      	bne.n	8001c9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c32:	4b1e      	ldr	r3, [pc, #120]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x108>)
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d003      	beq.n	8001c4a <HAL_RCC_GetSysClockFreq+0xa6>
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	2b03      	cmp	r3, #3
 8001c46:	d003      	beq.n	8001c50 <HAL_RCC_GetSysClockFreq+0xac>
 8001c48:	e005      	b.n	8001c56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c4c:	617b      	str	r3, [r7, #20]
      break;
 8001c4e:	e005      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c50:	4b19      	ldr	r3, [pc, #100]	@ (8001cb8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c52:	617b      	str	r3, [r7, #20]
      break;
 8001c54:	e002      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	617b      	str	r3, [r7, #20]
      break;
 8001c5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c5c:	4b13      	ldr	r3, [pc, #76]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x108>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	3301      	adds	r3, #1
 8001c68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c6a:	4b10      	ldr	r3, [pc, #64]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x108>)
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	0a1b      	lsrs	r3, r3, #8
 8001c70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	fb03 f202 	mul.w	r2, r3, r2
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c82:	4b0a      	ldr	r3, [pc, #40]	@ (8001cac <HAL_RCC_GetSysClockFreq+0x108>)
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	0e5b      	lsrs	r3, r3, #25
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c9c:	69bb      	ldr	r3, [r7, #24]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3724      	adds	r7, #36	@ 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	08003c60 	.word	0x08003c60
 8001cb4:	00f42400 	.word	0x00f42400
 8001cb8:	007a1200 	.word	0x007a1200

08001cbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc0:	4b03      	ldr	r3, [pc, #12]	@ (8001cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000000 	.word	0x20000000

08001cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cd8:	f7ff fff0 	bl	8001cbc <HAL_RCC_GetHCLKFreq>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	4b06      	ldr	r3, [pc, #24]	@ (8001cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	0a1b      	lsrs	r3, r3, #8
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	4904      	ldr	r1, [pc, #16]	@ (8001cfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cea:	5ccb      	ldrb	r3, [r1, r3]
 8001cec:	f003 031f 	and.w	r3, r3, #31
 8001cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	08003c58 	.word	0x08003c58

08001d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d04:	f7ff ffda 	bl	8001cbc <HAL_RCC_GetHCLKFreq>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	0adb      	lsrs	r3, r3, #11
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	4904      	ldr	r1, [pc, #16]	@ (8001d28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d16:	5ccb      	ldrb	r3, [r1, r3]
 8001d18:	f003 031f 	and.w	r3, r3, #31
 8001d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40021000 	.word	0x40021000
 8001d28:	08003c58 	.word	0x08003c58

08001d2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d34:	2300      	movs	r3, #0
 8001d36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d38:	4b2a      	ldr	r3, [pc, #168]	@ (8001de4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d44:	f7ff f9ee 	bl	8001124 <HAL_PWREx_GetVoltageRange>
 8001d48:	6178      	str	r0, [r7, #20]
 8001d4a:	e014      	b.n	8001d76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d4c:	4b25      	ldr	r3, [pc, #148]	@ (8001de4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d50:	4a24      	ldr	r2, [pc, #144]	@ (8001de4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d56:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d58:	4b22      	ldr	r3, [pc, #136]	@ (8001de4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d64:	f7ff f9de 	bl	8001124 <HAL_PWREx_GetVoltageRange>
 8001d68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001de4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d6e:	4a1d      	ldr	r2, [pc, #116]	@ (8001de4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d74:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d7c:	d10b      	bne.n	8001d96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b80      	cmp	r3, #128	@ 0x80
 8001d82:	d919      	bls.n	8001db8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2ba0      	cmp	r3, #160	@ 0xa0
 8001d88:	d902      	bls.n	8001d90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	e013      	b.n	8001db8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d90:	2301      	movs	r3, #1
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	e010      	b.n	8001db8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b80      	cmp	r3, #128	@ 0x80
 8001d9a:	d902      	bls.n	8001da2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	e00a      	b.n	8001db8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b80      	cmp	r3, #128	@ 0x80
 8001da6:	d102      	bne.n	8001dae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001da8:	2302      	movs	r3, #2
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	e004      	b.n	8001db8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b70      	cmp	r3, #112	@ 0x70
 8001db2:	d101      	bne.n	8001db8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001db4:	2301      	movs	r3, #1
 8001db6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001db8:	4b0b      	ldr	r3, [pc, #44]	@ (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f023 0207 	bic.w	r2, r3, #7
 8001dc0:	4909      	ldr	r1, [pc, #36]	@ (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001dc8:	4b07      	ldr	r3, [pc, #28]	@ (8001de8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d001      	beq.n	8001dda <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40022000 	.word	0x40022000

08001dec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001df4:	2300      	movs	r3, #0
 8001df6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001df8:	2300      	movs	r3, #0
 8001dfa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d041      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e0c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e10:	d02a      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e12:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e16:	d824      	bhi.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e1c:	d008      	beq.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e22:	d81e      	bhi.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00a      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e2c:	d010      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e2e:	e018      	b.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e30:	4b86      	ldr	r3, [pc, #536]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	4a85      	ldr	r2, [pc, #532]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e3a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e3c:	e015      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3304      	adds	r3, #4
 8001e42:	2100      	movs	r1, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f000 fabb 	bl	80023c0 <RCCEx_PLLSAI1_Config>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e4e:	e00c      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3320      	adds	r3, #32
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 fba6 	bl	80025a8 <RCCEx_PLLSAI2_Config>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e60:	e003      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	74fb      	strb	r3, [r7, #19]
      break;
 8001e66:	e000      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e6a:	7cfb      	ldrb	r3, [r7, #19]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d10b      	bne.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e70:	4b76      	ldr	r3, [pc, #472]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e76:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e7e:	4973      	ldr	r1, [pc, #460]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001e86:	e001      	b.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e88:	7cfb      	ldrb	r3, [r7, #19]
 8001e8a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d041      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e9c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001ea0:	d02a      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001ea2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001ea6:	d824      	bhi.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ea8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001eac:	d008      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001eae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001eb2:	d81e      	bhi.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00a      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001eb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ebc:	d010      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001ebe:	e018      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ec0:	4b62      	ldr	r3, [pc, #392]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	4a61      	ldr	r2, [pc, #388]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ec6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ecc:	e015      	b.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 fa73 	bl	80023c0 <RCCEx_PLLSAI1_Config>
 8001eda:	4603      	mov	r3, r0
 8001edc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ede:	e00c      	b.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3320      	adds	r3, #32
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 fb5e 	bl	80025a8 <RCCEx_PLLSAI2_Config>
 8001eec:	4603      	mov	r3, r0
 8001eee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ef0:	e003      	b.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	74fb      	strb	r3, [r7, #19]
      break;
 8001ef6:	e000      	b.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001ef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001efa:	7cfb      	ldrb	r3, [r7, #19]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10b      	bne.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f00:	4b52      	ldr	r3, [pc, #328]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f06:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f0e:	494f      	ldr	r1, [pc, #316]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f16:	e001      	b.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f18:	7cfb      	ldrb	r3, [r7, #19]
 8001f1a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 80a0 	beq.w	800206a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f2e:	4b47      	ldr	r3, [pc, #284]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e000      	b.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00d      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f44:	4b41      	ldr	r3, [pc, #260]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f48:	4a40      	ldr	r2, [pc, #256]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f50:	4b3e      	ldr	r3, [pc, #248]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f60:	4b3b      	ldr	r3, [pc, #236]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a3a      	ldr	r2, [pc, #232]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f6c:	f7fe fde8 	bl	8000b40 <HAL_GetTick>
 8001f70:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f72:	e009      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f74:	f7fe fde4 	bl	8000b40 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d902      	bls.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	74fb      	strb	r3, [r7, #19]
        break;
 8001f86:	e005      	b.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f88:	4b31      	ldr	r3, [pc, #196]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0ef      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f94:	7cfb      	ldrb	r3, [r7, #19]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d15c      	bne.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f9a:	4b2c      	ldr	r3, [pc, #176]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fa0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fa4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d01f      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d019      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fb8:	4b24      	ldr	r3, [pc, #144]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fc4:	4b21      	ldr	r3, [pc, #132]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fca:	4a20      	ldr	r2, [pc, #128]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fda:	4a1c      	ldr	r2, [pc, #112]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fe0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fe4:	4a19      	ldr	r2, [pc, #100]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d016      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff6:	f7fe fda3 	bl	8000b40 <HAL_GetTick>
 8001ffa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ffc:	e00b      	b.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffe:	f7fe fd9f 	bl	8000b40 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	f241 3288 	movw	r2, #5000	@ 0x1388
 800200c:	4293      	cmp	r3, r2
 800200e:	d902      	bls.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	74fb      	strb	r3, [r7, #19]
            break;
 8002014:	e006      	b.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002016:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0ec      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002024:	7cfb      	ldrb	r3, [r7, #19]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d10c      	bne.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800202a:	4b08      	ldr	r3, [pc, #32]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002030:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800203a:	4904      	ldr	r1, [pc, #16]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800203c:	4313      	orrs	r3, r2
 800203e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002042:	e009      	b.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002044:	7cfb      	ldrb	r3, [r7, #19]
 8002046:	74bb      	strb	r3, [r7, #18]
 8002048:	e006      	b.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000
 8002050:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002054:	7cfb      	ldrb	r3, [r7, #19]
 8002056:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002058:	7c7b      	ldrb	r3, [r7, #17]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d105      	bne.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800205e:	4b9e      	ldr	r3, [pc, #632]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002062:	4a9d      	ldr	r2, [pc, #628]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002064:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002068:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00a      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002076:	4b98      	ldr	r3, [pc, #608]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800207c:	f023 0203 	bic.w	r2, r3, #3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002084:	4994      	ldr	r1, [pc, #592]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002086:	4313      	orrs	r3, r2
 8002088:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00a      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002098:	4b8f      	ldr	r3, [pc, #572]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800209a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800209e:	f023 020c 	bic.w	r2, r3, #12
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020a6:	498c      	ldr	r1, [pc, #560]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00a      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020ba:	4b87      	ldr	r3, [pc, #540]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c8:	4983      	ldr	r1, [pc, #524]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00a      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020dc:	4b7e      	ldr	r3, [pc, #504]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ea:	497b      	ldr	r1, [pc, #492]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0310 	and.w	r3, r3, #16
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00a      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020fe:	4b76      	ldr	r3, [pc, #472]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002104:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800210c:	4972      	ldr	r1, [pc, #456]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800210e:	4313      	orrs	r3, r2
 8002110:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0320 	and.w	r3, r3, #32
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00a      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002120:	4b6d      	ldr	r3, [pc, #436]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002126:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800212e:	496a      	ldr	r1, [pc, #424]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002130:	4313      	orrs	r3, r2
 8002132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00a      	beq.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002142:	4b65      	ldr	r3, [pc, #404]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002148:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002150:	4961      	ldr	r1, [pc, #388]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002152:	4313      	orrs	r3, r2
 8002154:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002160:	2b00      	cmp	r3, #0
 8002162:	d00a      	beq.n	800217a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002164:	4b5c      	ldr	r3, [pc, #368]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800216a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002172:	4959      	ldr	r1, [pc, #356]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002174:	4313      	orrs	r3, r2
 8002176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002186:	4b54      	ldr	r3, [pc, #336]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800218c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002194:	4950      	ldr	r1, [pc, #320]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002196:	4313      	orrs	r3, r2
 8002198:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021a8:	4b4b      	ldr	r3, [pc, #300]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b6:	4948      	ldr	r1, [pc, #288]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021ca:	4b43      	ldr	r3, [pc, #268]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d8:	493f      	ldr	r1, [pc, #252]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d028      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021ec:	4b3a      	ldr	r3, [pc, #232]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021fa:	4937      	ldr	r1, [pc, #220]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002206:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800220a:	d106      	bne.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800220c:	4b32      	ldr	r3, [pc, #200]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	4a31      	ldr	r2, [pc, #196]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002212:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002216:	60d3      	str	r3, [r2, #12]
 8002218:	e011      	b.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800221e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002222:	d10c      	bne.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3304      	adds	r3, #4
 8002228:	2101      	movs	r1, #1
 800222a:	4618      	mov	r0, r3
 800222c:	f000 f8c8 	bl	80023c0 <RCCEx_PLLSAI1_Config>
 8002230:	4603      	mov	r3, r0
 8002232:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002234:	7cfb      	ldrb	r3, [r7, #19]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800223a:	7cfb      	ldrb	r3, [r7, #19]
 800223c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d028      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800224a:	4b23      	ldr	r3, [pc, #140]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002250:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002258:	491f      	ldr	r1, [pc, #124]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225a:	4313      	orrs	r3, r2
 800225c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002264:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002268:	d106      	bne.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800226a:	4b1b      	ldr	r3, [pc, #108]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	4a1a      	ldr	r2, [pc, #104]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002270:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002274:	60d3      	str	r3, [r2, #12]
 8002276:	e011      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800227c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002280:	d10c      	bne.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3304      	adds	r3, #4
 8002286:	2101      	movs	r1, #1
 8002288:	4618      	mov	r0, r3
 800228a:	f000 f899 	bl	80023c0 <RCCEx_PLLSAI1_Config>
 800228e:	4603      	mov	r3, r0
 8002290:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002292:	7cfb      	ldrb	r3, [r7, #19]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002298:	7cfb      	ldrb	r3, [r7, #19]
 800229a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d02b      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022a8:	4b0b      	ldr	r3, [pc, #44]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022b6:	4908      	ldr	r1, [pc, #32]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022c6:	d109      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022c8:	4b03      	ldr	r3, [pc, #12]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4a02      	ldr	r2, [pc, #8]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022d2:	60d3      	str	r3, [r2, #12]
 80022d4:	e014      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022e4:	d10c      	bne.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3304      	adds	r3, #4
 80022ea:	2101      	movs	r1, #1
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 f867 	bl	80023c0 <RCCEx_PLLSAI1_Config>
 80022f2:	4603      	mov	r3, r0
 80022f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022f6:	7cfb      	ldrb	r3, [r7, #19]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80022fc:	7cfb      	ldrb	r3, [r7, #19]
 80022fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d02f      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800230c:	4b2b      	ldr	r3, [pc, #172]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800230e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002312:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800231a:	4928      	ldr	r1, [pc, #160]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800231c:	4313      	orrs	r3, r2
 800231e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002326:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800232a:	d10d      	bne.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3304      	adds	r3, #4
 8002330:	2102      	movs	r1, #2
 8002332:	4618      	mov	r0, r3
 8002334:	f000 f844 	bl	80023c0 <RCCEx_PLLSAI1_Config>
 8002338:	4603      	mov	r3, r0
 800233a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800233c:	7cfb      	ldrb	r3, [r7, #19]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d014      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002342:	7cfb      	ldrb	r3, [r7, #19]
 8002344:	74bb      	strb	r3, [r7, #18]
 8002346:	e011      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800234c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002350:	d10c      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3320      	adds	r3, #32
 8002356:	2102      	movs	r1, #2
 8002358:	4618      	mov	r0, r3
 800235a:	f000 f925 	bl	80025a8 <RCCEx_PLLSAI2_Config>
 800235e:	4603      	mov	r3, r0
 8002360:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002362:	7cfb      	ldrb	r3, [r7, #19]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002368:	7cfb      	ldrb	r3, [r7, #19]
 800236a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00a      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002378:	4b10      	ldr	r3, [pc, #64]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800237a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800237e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002386:	490d      	ldr	r1, [pc, #52]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002388:	4313      	orrs	r3, r2
 800238a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00b      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800239a:	4b08      	ldr	r3, [pc, #32]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800239c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023aa:	4904      	ldr	r1, [pc, #16]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000

080023c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023ce:	4b75      	ldr	r3, [pc, #468]	@ (80025a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d018      	beq.n	800240c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023da:	4b72      	ldr	r3, [pc, #456]	@ (80025a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f003 0203 	and.w	r2, r3, #3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d10d      	bne.n	8002406 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
       ||
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d009      	beq.n	8002406 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023f2:	4b6c      	ldr	r3, [pc, #432]	@ (80025a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	091b      	lsrs	r3, r3, #4
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
       ||
 8002402:	429a      	cmp	r2, r3
 8002404:	d047      	beq.n	8002496 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
 800240a:	e044      	b.n	8002496 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b03      	cmp	r3, #3
 8002412:	d018      	beq.n	8002446 <RCCEx_PLLSAI1_Config+0x86>
 8002414:	2b03      	cmp	r3, #3
 8002416:	d825      	bhi.n	8002464 <RCCEx_PLLSAI1_Config+0xa4>
 8002418:	2b01      	cmp	r3, #1
 800241a:	d002      	beq.n	8002422 <RCCEx_PLLSAI1_Config+0x62>
 800241c:	2b02      	cmp	r3, #2
 800241e:	d009      	beq.n	8002434 <RCCEx_PLLSAI1_Config+0x74>
 8002420:	e020      	b.n	8002464 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002422:	4b60      	ldr	r3, [pc, #384]	@ (80025a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d11d      	bne.n	800246a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002432:	e01a      	b.n	800246a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002434:	4b5b      	ldr	r3, [pc, #364]	@ (80025a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800243c:	2b00      	cmp	r3, #0
 800243e:	d116      	bne.n	800246e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002444:	e013      	b.n	800246e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002446:	4b57      	ldr	r3, [pc, #348]	@ (80025a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10f      	bne.n	8002472 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002452:	4b54      	ldr	r3, [pc, #336]	@ (80025a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d109      	bne.n	8002472 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002462:	e006      	b.n	8002472 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	73fb      	strb	r3, [r7, #15]
      break;
 8002468:	e004      	b.n	8002474 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800246a:	bf00      	nop
 800246c:	e002      	b.n	8002474 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800246e:	bf00      	nop
 8002470:	e000      	b.n	8002474 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002472:	bf00      	nop
    }

    if(status == HAL_OK)
 8002474:	7bfb      	ldrb	r3, [r7, #15]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10d      	bne.n	8002496 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800247a:	4b4a      	ldr	r3, [pc, #296]	@ (80025a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6819      	ldr	r1, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	3b01      	subs	r3, #1
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	430b      	orrs	r3, r1
 8002490:	4944      	ldr	r1, [pc, #272]	@ (80025a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002492:	4313      	orrs	r3, r2
 8002494:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002496:	7bfb      	ldrb	r3, [r7, #15]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d17d      	bne.n	8002598 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800249c:	4b41      	ldr	r3, [pc, #260]	@ (80025a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a40      	ldr	r2, [pc, #256]	@ (80025a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80024a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024a8:	f7fe fb4a 	bl	8000b40 <HAL_GetTick>
 80024ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024ae:	e009      	b.n	80024c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024b0:	f7fe fb46 	bl	8000b40 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d902      	bls.n	80024c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	73fb      	strb	r3, [r7, #15]
        break;
 80024c2:	e005      	b.n	80024d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024c4:	4b37      	ldr	r3, [pc, #220]	@ (80025a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1ef      	bne.n	80024b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d160      	bne.n	8002598 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d111      	bne.n	8002500 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024dc:	4b31      	ldr	r3, [pc, #196]	@ (80025a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80024e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6892      	ldr	r2, [r2, #8]
 80024ec:	0211      	lsls	r1, r2, #8
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	68d2      	ldr	r2, [r2, #12]
 80024f2:	0912      	lsrs	r2, r2, #4
 80024f4:	0452      	lsls	r2, r2, #17
 80024f6:	430a      	orrs	r2, r1
 80024f8:	492a      	ldr	r1, [pc, #168]	@ (80025a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	610b      	str	r3, [r1, #16]
 80024fe:	e027      	b.n	8002550 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d112      	bne.n	800252c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002506:	4b27      	ldr	r3, [pc, #156]	@ (80025a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800250e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6892      	ldr	r2, [r2, #8]
 8002516:	0211      	lsls	r1, r2, #8
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6912      	ldr	r2, [r2, #16]
 800251c:	0852      	lsrs	r2, r2, #1
 800251e:	3a01      	subs	r2, #1
 8002520:	0552      	lsls	r2, r2, #21
 8002522:	430a      	orrs	r2, r1
 8002524:	491f      	ldr	r1, [pc, #124]	@ (80025a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002526:	4313      	orrs	r3, r2
 8002528:	610b      	str	r3, [r1, #16]
 800252a:	e011      	b.n	8002550 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800252c:	4b1d      	ldr	r3, [pc, #116]	@ (80025a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002534:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6892      	ldr	r2, [r2, #8]
 800253c:	0211      	lsls	r1, r2, #8
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6952      	ldr	r2, [r2, #20]
 8002542:	0852      	lsrs	r2, r2, #1
 8002544:	3a01      	subs	r2, #1
 8002546:	0652      	lsls	r2, r2, #25
 8002548:	430a      	orrs	r2, r1
 800254a:	4916      	ldr	r1, [pc, #88]	@ (80025a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800254c:	4313      	orrs	r3, r2
 800254e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002550:	4b14      	ldr	r3, [pc, #80]	@ (80025a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a13      	ldr	r2, [pc, #76]	@ (80025a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002556:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800255a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255c:	f7fe faf0 	bl	8000b40 <HAL_GetTick>
 8002560:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002562:	e009      	b.n	8002578 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002564:	f7fe faec 	bl	8000b40 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d902      	bls.n	8002578 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	73fb      	strb	r3, [r7, #15]
          break;
 8002576:	e005      	b.n	8002584 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002578:	4b0a      	ldr	r3, [pc, #40]	@ (80025a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0ef      	beq.n	8002564 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d106      	bne.n	8002598 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800258a:	4b06      	ldr	r3, [pc, #24]	@ (80025a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800258c:	691a      	ldr	r2, [r3, #16]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	4904      	ldr	r1, [pc, #16]	@ (80025a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002594:	4313      	orrs	r3, r2
 8002596:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002598:	7bfb      	ldrb	r3, [r7, #15]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000

080025a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002760 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d018      	beq.n	80025f4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80025c2:	4b67      	ldr	r3, [pc, #412]	@ (8002760 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f003 0203 	and.w	r2, r3, #3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d10d      	bne.n	80025ee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
       ||
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d009      	beq.n	80025ee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80025da:	4b61      	ldr	r3, [pc, #388]	@ (8002760 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	091b      	lsrs	r3, r3, #4
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
       ||
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d047      	beq.n	800267e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]
 80025f2:	e044      	b.n	800267e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d018      	beq.n	800262e <RCCEx_PLLSAI2_Config+0x86>
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d825      	bhi.n	800264c <RCCEx_PLLSAI2_Config+0xa4>
 8002600:	2b01      	cmp	r3, #1
 8002602:	d002      	beq.n	800260a <RCCEx_PLLSAI2_Config+0x62>
 8002604:	2b02      	cmp	r3, #2
 8002606:	d009      	beq.n	800261c <RCCEx_PLLSAI2_Config+0x74>
 8002608:	e020      	b.n	800264c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800260a:	4b55      	ldr	r3, [pc, #340]	@ (8002760 <RCCEx_PLLSAI2_Config+0x1b8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d11d      	bne.n	8002652 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800261a:	e01a      	b.n	8002652 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800261c:	4b50      	ldr	r3, [pc, #320]	@ (8002760 <RCCEx_PLLSAI2_Config+0x1b8>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002624:	2b00      	cmp	r3, #0
 8002626:	d116      	bne.n	8002656 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800262c:	e013      	b.n	8002656 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800262e:	4b4c      	ldr	r3, [pc, #304]	@ (8002760 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10f      	bne.n	800265a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800263a:	4b49      	ldr	r3, [pc, #292]	@ (8002760 <RCCEx_PLLSAI2_Config+0x1b8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d109      	bne.n	800265a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800264a:	e006      	b.n	800265a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	73fb      	strb	r3, [r7, #15]
      break;
 8002650:	e004      	b.n	800265c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002652:	bf00      	nop
 8002654:	e002      	b.n	800265c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002656:	bf00      	nop
 8002658:	e000      	b.n	800265c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800265a:	bf00      	nop
    }

    if(status == HAL_OK)
 800265c:	7bfb      	ldrb	r3, [r7, #15]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10d      	bne.n	800267e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002662:	4b3f      	ldr	r3, [pc, #252]	@ (8002760 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6819      	ldr	r1, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	3b01      	subs	r3, #1
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	430b      	orrs	r3, r1
 8002678:	4939      	ldr	r1, [pc, #228]	@ (8002760 <RCCEx_PLLSAI2_Config+0x1b8>)
 800267a:	4313      	orrs	r3, r2
 800267c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d167      	bne.n	8002754 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002684:	4b36      	ldr	r3, [pc, #216]	@ (8002760 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a35      	ldr	r2, [pc, #212]	@ (8002760 <RCCEx_PLLSAI2_Config+0x1b8>)
 800268a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800268e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002690:	f7fe fa56 	bl	8000b40 <HAL_GetTick>
 8002694:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002696:	e009      	b.n	80026ac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002698:	f7fe fa52 	bl	8000b40 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d902      	bls.n	80026ac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	73fb      	strb	r3, [r7, #15]
        break;
 80026aa:	e005      	b.n	80026b8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002760 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1ef      	bne.n	8002698 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d14a      	bne.n	8002754 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d111      	bne.n	80026e8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026c4:	4b26      	ldr	r3, [pc, #152]	@ (8002760 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80026cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6892      	ldr	r2, [r2, #8]
 80026d4:	0211      	lsls	r1, r2, #8
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68d2      	ldr	r2, [r2, #12]
 80026da:	0912      	lsrs	r2, r2, #4
 80026dc:	0452      	lsls	r2, r2, #17
 80026de:	430a      	orrs	r2, r1
 80026e0:	491f      	ldr	r1, [pc, #124]	@ (8002760 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	614b      	str	r3, [r1, #20]
 80026e6:	e011      	b.n	800270c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002760 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80026f0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6892      	ldr	r2, [r2, #8]
 80026f8:	0211      	lsls	r1, r2, #8
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	6912      	ldr	r2, [r2, #16]
 80026fe:	0852      	lsrs	r2, r2, #1
 8002700:	3a01      	subs	r2, #1
 8002702:	0652      	lsls	r2, r2, #25
 8002704:	430a      	orrs	r2, r1
 8002706:	4916      	ldr	r1, [pc, #88]	@ (8002760 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002708:	4313      	orrs	r3, r2
 800270a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800270c:	4b14      	ldr	r3, [pc, #80]	@ (8002760 <RCCEx_PLLSAI2_Config+0x1b8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a13      	ldr	r2, [pc, #76]	@ (8002760 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002712:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002716:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002718:	f7fe fa12 	bl	8000b40 <HAL_GetTick>
 800271c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800271e:	e009      	b.n	8002734 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002720:	f7fe fa0e 	bl	8000b40 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d902      	bls.n	8002734 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	73fb      	strb	r3, [r7, #15]
          break;
 8002732:	e005      	b.n	8002740 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002734:	4b0a      	ldr	r3, [pc, #40]	@ (8002760 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0ef      	beq.n	8002720 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d106      	bne.n	8002754 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002746:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002748:	695a      	ldr	r2, [r3, #20]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	4904      	ldr	r1, [pc, #16]	@ (8002760 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002750:	4313      	orrs	r3, r2
 8002752:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002754:	7bfb      	ldrb	r3, [r7, #15]
}
 8002756:	4618      	mov	r0, r3
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40021000 	.word	0x40021000

08002764 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e040      	b.n	80027f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7fe f8e4 	bl	8000954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2224      	movs	r2, #36	@ 0x24
 8002790:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0201 	bic.w	r2, r2, #1
 80027a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 fb6a 	bl	8002e84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f8af 	bl	8002914 <UART_SetConfig>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e01b      	b.n	80027f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 fbe9 	bl	8002fc8 <UART_CheckIdleState>
 80027f6:	4603      	mov	r3, r0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08a      	sub	sp, #40	@ 0x28
 8002804:	af02      	add	r7, sp, #8
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	603b      	str	r3, [r7, #0]
 800280c:	4613      	mov	r3, r2
 800280e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002814:	2b20      	cmp	r3, #32
 8002816:	d177      	bne.n	8002908 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d002      	beq.n	8002824 <HAL_UART_Transmit+0x24>
 800281e:	88fb      	ldrh	r3, [r7, #6]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e070      	b.n	800290a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2221      	movs	r2, #33	@ 0x21
 8002834:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002836:	f7fe f983 	bl	8000b40 <HAL_GetTick>
 800283a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	88fa      	ldrh	r2, [r7, #6]
 8002840:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	88fa      	ldrh	r2, [r7, #6]
 8002848:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002854:	d108      	bne.n	8002868 <HAL_UART_Transmit+0x68>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	691b      	ldr	r3, [r3, #16]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d104      	bne.n	8002868 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	61bb      	str	r3, [r7, #24]
 8002866:	e003      	b.n	8002870 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800286c:	2300      	movs	r3, #0
 800286e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002870:	e02f      	b.n	80028d2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2200      	movs	r2, #0
 800287a:	2180      	movs	r1, #128	@ 0x80
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 fc4b 	bl	8003118 <UART_WaitOnFlagUntilTimeout>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d004      	beq.n	8002892 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2220      	movs	r2, #32
 800288c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e03b      	b.n	800290a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10b      	bne.n	80028b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	881a      	ldrh	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028a4:	b292      	uxth	r2, r2
 80028a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	3302      	adds	r3, #2
 80028ac:	61bb      	str	r3, [r7, #24]
 80028ae:	e007      	b.n	80028c0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	781a      	ldrb	r2, [r3, #0]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3301      	adds	r3, #1
 80028be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80028d8:	b29b      	uxth	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1c9      	bne.n	8002872 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	2200      	movs	r2, #0
 80028e6:	2140      	movs	r1, #64	@ 0x40
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 fc15 	bl	8003118 <UART_WaitOnFlagUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d004      	beq.n	80028fe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2220      	movs	r2, #32
 80028f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e005      	b.n	800290a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2220      	movs	r2, #32
 8002902:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002904:	2300      	movs	r3, #0
 8002906:	e000      	b.n	800290a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002908:	2302      	movs	r3, #2
  }
}
 800290a:	4618      	mov	r0, r3
 800290c:	3720      	adds	r7, #32
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002918:	b08a      	sub	sp, #40	@ 0x28
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	431a      	orrs	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	431a      	orrs	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	4313      	orrs	r3, r2
 800293a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	4ba4      	ldr	r3, [pc, #656]	@ (8002bd4 <UART_SetConfig+0x2c0>)
 8002944:	4013      	ands	r3, r2
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800294c:	430b      	orrs	r3, r1
 800294e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a99      	ldr	r2, [pc, #612]	@ (8002bd8 <UART_SetConfig+0x2c4>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d004      	beq.n	8002980 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800297c:	4313      	orrs	r3, r2
 800297e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002990:	430a      	orrs	r2, r1
 8002992:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a90      	ldr	r2, [pc, #576]	@ (8002bdc <UART_SetConfig+0x2c8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d126      	bne.n	80029ec <UART_SetConfig+0xd8>
 800299e:	4b90      	ldr	r3, [pc, #576]	@ (8002be0 <UART_SetConfig+0x2cc>)
 80029a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	d81b      	bhi.n	80029e4 <UART_SetConfig+0xd0>
 80029ac:	a201      	add	r2, pc, #4	@ (adr r2, 80029b4 <UART_SetConfig+0xa0>)
 80029ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b2:	bf00      	nop
 80029b4:	080029c5 	.word	0x080029c5
 80029b8:	080029d5 	.word	0x080029d5
 80029bc:	080029cd 	.word	0x080029cd
 80029c0:	080029dd 	.word	0x080029dd
 80029c4:	2301      	movs	r3, #1
 80029c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029ca:	e116      	b.n	8002bfa <UART_SetConfig+0x2e6>
 80029cc:	2302      	movs	r3, #2
 80029ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029d2:	e112      	b.n	8002bfa <UART_SetConfig+0x2e6>
 80029d4:	2304      	movs	r3, #4
 80029d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029da:	e10e      	b.n	8002bfa <UART_SetConfig+0x2e6>
 80029dc:	2308      	movs	r3, #8
 80029de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029e2:	e10a      	b.n	8002bfa <UART_SetConfig+0x2e6>
 80029e4:	2310      	movs	r3, #16
 80029e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029ea:	e106      	b.n	8002bfa <UART_SetConfig+0x2e6>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a7c      	ldr	r2, [pc, #496]	@ (8002be4 <UART_SetConfig+0x2d0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d138      	bne.n	8002a68 <UART_SetConfig+0x154>
 80029f6:	4b7a      	ldr	r3, [pc, #488]	@ (8002be0 <UART_SetConfig+0x2cc>)
 80029f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029fc:	f003 030c 	and.w	r3, r3, #12
 8002a00:	2b0c      	cmp	r3, #12
 8002a02:	d82d      	bhi.n	8002a60 <UART_SetConfig+0x14c>
 8002a04:	a201      	add	r2, pc, #4	@ (adr r2, 8002a0c <UART_SetConfig+0xf8>)
 8002a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0a:	bf00      	nop
 8002a0c:	08002a41 	.word	0x08002a41
 8002a10:	08002a61 	.word	0x08002a61
 8002a14:	08002a61 	.word	0x08002a61
 8002a18:	08002a61 	.word	0x08002a61
 8002a1c:	08002a51 	.word	0x08002a51
 8002a20:	08002a61 	.word	0x08002a61
 8002a24:	08002a61 	.word	0x08002a61
 8002a28:	08002a61 	.word	0x08002a61
 8002a2c:	08002a49 	.word	0x08002a49
 8002a30:	08002a61 	.word	0x08002a61
 8002a34:	08002a61 	.word	0x08002a61
 8002a38:	08002a61 	.word	0x08002a61
 8002a3c:	08002a59 	.word	0x08002a59
 8002a40:	2300      	movs	r3, #0
 8002a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a46:	e0d8      	b.n	8002bfa <UART_SetConfig+0x2e6>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a4e:	e0d4      	b.n	8002bfa <UART_SetConfig+0x2e6>
 8002a50:	2304      	movs	r3, #4
 8002a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a56:	e0d0      	b.n	8002bfa <UART_SetConfig+0x2e6>
 8002a58:	2308      	movs	r3, #8
 8002a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a5e:	e0cc      	b.n	8002bfa <UART_SetConfig+0x2e6>
 8002a60:	2310      	movs	r3, #16
 8002a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a66:	e0c8      	b.n	8002bfa <UART_SetConfig+0x2e6>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a5e      	ldr	r2, [pc, #376]	@ (8002be8 <UART_SetConfig+0x2d4>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d125      	bne.n	8002abe <UART_SetConfig+0x1aa>
 8002a72:	4b5b      	ldr	r3, [pc, #364]	@ (8002be0 <UART_SetConfig+0x2cc>)
 8002a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a78:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002a7c:	2b30      	cmp	r3, #48	@ 0x30
 8002a7e:	d016      	beq.n	8002aae <UART_SetConfig+0x19a>
 8002a80:	2b30      	cmp	r3, #48	@ 0x30
 8002a82:	d818      	bhi.n	8002ab6 <UART_SetConfig+0x1a2>
 8002a84:	2b20      	cmp	r3, #32
 8002a86:	d00a      	beq.n	8002a9e <UART_SetConfig+0x18a>
 8002a88:	2b20      	cmp	r3, #32
 8002a8a:	d814      	bhi.n	8002ab6 <UART_SetConfig+0x1a2>
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <UART_SetConfig+0x182>
 8002a90:	2b10      	cmp	r3, #16
 8002a92:	d008      	beq.n	8002aa6 <UART_SetConfig+0x192>
 8002a94:	e00f      	b.n	8002ab6 <UART_SetConfig+0x1a2>
 8002a96:	2300      	movs	r3, #0
 8002a98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a9c:	e0ad      	b.n	8002bfa <UART_SetConfig+0x2e6>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aa4:	e0a9      	b.n	8002bfa <UART_SetConfig+0x2e6>
 8002aa6:	2304      	movs	r3, #4
 8002aa8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002aac:	e0a5      	b.n	8002bfa <UART_SetConfig+0x2e6>
 8002aae:	2308      	movs	r3, #8
 8002ab0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ab4:	e0a1      	b.n	8002bfa <UART_SetConfig+0x2e6>
 8002ab6:	2310      	movs	r3, #16
 8002ab8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002abc:	e09d      	b.n	8002bfa <UART_SetConfig+0x2e6>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a4a      	ldr	r2, [pc, #296]	@ (8002bec <UART_SetConfig+0x2d8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d125      	bne.n	8002b14 <UART_SetConfig+0x200>
 8002ac8:	4b45      	ldr	r3, [pc, #276]	@ (8002be0 <UART_SetConfig+0x2cc>)
 8002aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ace:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002ad2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ad4:	d016      	beq.n	8002b04 <UART_SetConfig+0x1f0>
 8002ad6:	2bc0      	cmp	r3, #192	@ 0xc0
 8002ad8:	d818      	bhi.n	8002b0c <UART_SetConfig+0x1f8>
 8002ada:	2b80      	cmp	r3, #128	@ 0x80
 8002adc:	d00a      	beq.n	8002af4 <UART_SetConfig+0x1e0>
 8002ade:	2b80      	cmp	r3, #128	@ 0x80
 8002ae0:	d814      	bhi.n	8002b0c <UART_SetConfig+0x1f8>
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <UART_SetConfig+0x1d8>
 8002ae6:	2b40      	cmp	r3, #64	@ 0x40
 8002ae8:	d008      	beq.n	8002afc <UART_SetConfig+0x1e8>
 8002aea:	e00f      	b.n	8002b0c <UART_SetConfig+0x1f8>
 8002aec:	2300      	movs	r3, #0
 8002aee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002af2:	e082      	b.n	8002bfa <UART_SetConfig+0x2e6>
 8002af4:	2302      	movs	r3, #2
 8002af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002afa:	e07e      	b.n	8002bfa <UART_SetConfig+0x2e6>
 8002afc:	2304      	movs	r3, #4
 8002afe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b02:	e07a      	b.n	8002bfa <UART_SetConfig+0x2e6>
 8002b04:	2308      	movs	r3, #8
 8002b06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b0a:	e076      	b.n	8002bfa <UART_SetConfig+0x2e6>
 8002b0c:	2310      	movs	r3, #16
 8002b0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b12:	e072      	b.n	8002bfa <UART_SetConfig+0x2e6>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a35      	ldr	r2, [pc, #212]	@ (8002bf0 <UART_SetConfig+0x2dc>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d12a      	bne.n	8002b74 <UART_SetConfig+0x260>
 8002b1e:	4b30      	ldr	r3, [pc, #192]	@ (8002be0 <UART_SetConfig+0x2cc>)
 8002b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b2c:	d01a      	beq.n	8002b64 <UART_SetConfig+0x250>
 8002b2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b32:	d81b      	bhi.n	8002b6c <UART_SetConfig+0x258>
 8002b34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b38:	d00c      	beq.n	8002b54 <UART_SetConfig+0x240>
 8002b3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b3e:	d815      	bhi.n	8002b6c <UART_SetConfig+0x258>
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <UART_SetConfig+0x238>
 8002b44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b48:	d008      	beq.n	8002b5c <UART_SetConfig+0x248>
 8002b4a:	e00f      	b.n	8002b6c <UART_SetConfig+0x258>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b52:	e052      	b.n	8002bfa <UART_SetConfig+0x2e6>
 8002b54:	2302      	movs	r3, #2
 8002b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b5a:	e04e      	b.n	8002bfa <UART_SetConfig+0x2e6>
 8002b5c:	2304      	movs	r3, #4
 8002b5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b62:	e04a      	b.n	8002bfa <UART_SetConfig+0x2e6>
 8002b64:	2308      	movs	r3, #8
 8002b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b6a:	e046      	b.n	8002bfa <UART_SetConfig+0x2e6>
 8002b6c:	2310      	movs	r3, #16
 8002b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002b72:	e042      	b.n	8002bfa <UART_SetConfig+0x2e6>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a17      	ldr	r2, [pc, #92]	@ (8002bd8 <UART_SetConfig+0x2c4>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d13a      	bne.n	8002bf4 <UART_SetConfig+0x2e0>
 8002b7e:	4b18      	ldr	r3, [pc, #96]	@ (8002be0 <UART_SetConfig+0x2cc>)
 8002b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b8c:	d01a      	beq.n	8002bc4 <UART_SetConfig+0x2b0>
 8002b8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002b92:	d81b      	bhi.n	8002bcc <UART_SetConfig+0x2b8>
 8002b94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b98:	d00c      	beq.n	8002bb4 <UART_SetConfig+0x2a0>
 8002b9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b9e:	d815      	bhi.n	8002bcc <UART_SetConfig+0x2b8>
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <UART_SetConfig+0x298>
 8002ba4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ba8:	d008      	beq.n	8002bbc <UART_SetConfig+0x2a8>
 8002baa:	e00f      	b.n	8002bcc <UART_SetConfig+0x2b8>
 8002bac:	2300      	movs	r3, #0
 8002bae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bb2:	e022      	b.n	8002bfa <UART_SetConfig+0x2e6>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bba:	e01e      	b.n	8002bfa <UART_SetConfig+0x2e6>
 8002bbc:	2304      	movs	r3, #4
 8002bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bc2:	e01a      	b.n	8002bfa <UART_SetConfig+0x2e6>
 8002bc4:	2308      	movs	r3, #8
 8002bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bca:	e016      	b.n	8002bfa <UART_SetConfig+0x2e6>
 8002bcc:	2310      	movs	r3, #16
 8002bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002bd2:	e012      	b.n	8002bfa <UART_SetConfig+0x2e6>
 8002bd4:	efff69f3 	.word	0xefff69f3
 8002bd8:	40008000 	.word	0x40008000
 8002bdc:	40013800 	.word	0x40013800
 8002be0:	40021000 	.word	0x40021000
 8002be4:	40004400 	.word	0x40004400
 8002be8:	40004800 	.word	0x40004800
 8002bec:	40004c00 	.word	0x40004c00
 8002bf0:	40005000 	.word	0x40005000
 8002bf4:	2310      	movs	r3, #16
 8002bf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a9f      	ldr	r2, [pc, #636]	@ (8002e7c <UART_SetConfig+0x568>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d17a      	bne.n	8002cfa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d824      	bhi.n	8002c56 <UART_SetConfig+0x342>
 8002c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c14 <UART_SetConfig+0x300>)
 8002c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c12:	bf00      	nop
 8002c14:	08002c39 	.word	0x08002c39
 8002c18:	08002c57 	.word	0x08002c57
 8002c1c:	08002c41 	.word	0x08002c41
 8002c20:	08002c57 	.word	0x08002c57
 8002c24:	08002c47 	.word	0x08002c47
 8002c28:	08002c57 	.word	0x08002c57
 8002c2c:	08002c57 	.word	0x08002c57
 8002c30:	08002c57 	.word	0x08002c57
 8002c34:	08002c4f 	.word	0x08002c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c38:	f7ff f84c 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 8002c3c:	61f8      	str	r0, [r7, #28]
        break;
 8002c3e:	e010      	b.n	8002c62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c40:	4b8f      	ldr	r3, [pc, #572]	@ (8002e80 <UART_SetConfig+0x56c>)
 8002c42:	61fb      	str	r3, [r7, #28]
        break;
 8002c44:	e00d      	b.n	8002c62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c46:	f7fe ffad 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8002c4a:	61f8      	str	r0, [r7, #28]
        break;
 8002c4c:	e009      	b.n	8002c62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c52:	61fb      	str	r3, [r7, #28]
        break;
 8002c54:	e005      	b.n	8002c62 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002c60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80fb 	beq.w	8002e60 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	4413      	add	r3, r2
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d305      	bcc.n	8002c86 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c80:	69fa      	ldr	r2, [r7, #28]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d903      	bls.n	8002c8e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c8c:	e0e8      	b.n	8002e60 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	2200      	movs	r2, #0
 8002c92:	461c      	mov	r4, r3
 8002c94:	4615      	mov	r5, r2
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	022b      	lsls	r3, r5, #8
 8002ca0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002ca4:	0222      	lsls	r2, r4, #8
 8002ca6:	68f9      	ldr	r1, [r7, #12]
 8002ca8:	6849      	ldr	r1, [r1, #4]
 8002caa:	0849      	lsrs	r1, r1, #1
 8002cac:	2000      	movs	r0, #0
 8002cae:	4688      	mov	r8, r1
 8002cb0:	4681      	mov	r9, r0
 8002cb2:	eb12 0a08 	adds.w	sl, r2, r8
 8002cb6:	eb43 0b09 	adc.w	fp, r3, r9
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	603b      	str	r3, [r7, #0]
 8002cc2:	607a      	str	r2, [r7, #4]
 8002cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cc8:	4650      	mov	r0, sl
 8002cca:	4659      	mov	r1, fp
 8002ccc:	f7fd fa7c 	bl	80001c8 <__aeabi_uldivmod>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002cde:	d308      	bcc.n	8002cf2 <UART_SetConfig+0x3de>
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ce6:	d204      	bcs.n	8002cf2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	60da      	str	r2, [r3, #12]
 8002cf0:	e0b6      	b.n	8002e60 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002cf8:	e0b2      	b.n	8002e60 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	69db      	ldr	r3, [r3, #28]
 8002cfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d02:	d15e      	bne.n	8002dc2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002d04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d828      	bhi.n	8002d5e <UART_SetConfig+0x44a>
 8002d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8002d14 <UART_SetConfig+0x400>)
 8002d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d12:	bf00      	nop
 8002d14:	08002d39 	.word	0x08002d39
 8002d18:	08002d41 	.word	0x08002d41
 8002d1c:	08002d49 	.word	0x08002d49
 8002d20:	08002d5f 	.word	0x08002d5f
 8002d24:	08002d4f 	.word	0x08002d4f
 8002d28:	08002d5f 	.word	0x08002d5f
 8002d2c:	08002d5f 	.word	0x08002d5f
 8002d30:	08002d5f 	.word	0x08002d5f
 8002d34:	08002d57 	.word	0x08002d57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d38:	f7fe ffcc 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 8002d3c:	61f8      	str	r0, [r7, #28]
        break;
 8002d3e:	e014      	b.n	8002d6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d40:	f7fe ffde 	bl	8001d00 <HAL_RCC_GetPCLK2Freq>
 8002d44:	61f8      	str	r0, [r7, #28]
        break;
 8002d46:	e010      	b.n	8002d6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d48:	4b4d      	ldr	r3, [pc, #308]	@ (8002e80 <UART_SetConfig+0x56c>)
 8002d4a:	61fb      	str	r3, [r7, #28]
        break;
 8002d4c:	e00d      	b.n	8002d6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d4e:	f7fe ff29 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8002d52:	61f8      	str	r0, [r7, #28]
        break;
 8002d54:	e009      	b.n	8002d6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d5a:	61fb      	str	r3, [r7, #28]
        break;
 8002d5c:	e005      	b.n	8002d6a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002d68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d077      	beq.n	8002e60 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	005a      	lsls	r2, r3, #1
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	085b      	lsrs	r3, r3, #1
 8002d7a:	441a      	add	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d84:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	2b0f      	cmp	r3, #15
 8002d8a:	d916      	bls.n	8002dba <UART_SetConfig+0x4a6>
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d92:	d212      	bcs.n	8002dba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	f023 030f 	bic.w	r3, r3, #15
 8002d9c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	085b      	lsrs	r3, r3, #1
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	8afb      	ldrh	r3, [r7, #22]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	8afa      	ldrh	r2, [r7, #22]
 8002db6:	60da      	str	r2, [r3, #12]
 8002db8:	e052      	b.n	8002e60 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002dc0:	e04e      	b.n	8002e60 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002dc2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d827      	bhi.n	8002e1a <UART_SetConfig+0x506>
 8002dca:	a201      	add	r2, pc, #4	@ (adr r2, 8002dd0 <UART_SetConfig+0x4bc>)
 8002dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd0:	08002df5 	.word	0x08002df5
 8002dd4:	08002dfd 	.word	0x08002dfd
 8002dd8:	08002e05 	.word	0x08002e05
 8002ddc:	08002e1b 	.word	0x08002e1b
 8002de0:	08002e0b 	.word	0x08002e0b
 8002de4:	08002e1b 	.word	0x08002e1b
 8002de8:	08002e1b 	.word	0x08002e1b
 8002dec:	08002e1b 	.word	0x08002e1b
 8002df0:	08002e13 	.word	0x08002e13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002df4:	f7fe ff6e 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 8002df8:	61f8      	str	r0, [r7, #28]
        break;
 8002dfa:	e014      	b.n	8002e26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002dfc:	f7fe ff80 	bl	8001d00 <HAL_RCC_GetPCLK2Freq>
 8002e00:	61f8      	str	r0, [r7, #28]
        break;
 8002e02:	e010      	b.n	8002e26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e04:	4b1e      	ldr	r3, [pc, #120]	@ (8002e80 <UART_SetConfig+0x56c>)
 8002e06:	61fb      	str	r3, [r7, #28]
        break;
 8002e08:	e00d      	b.n	8002e26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e0a:	f7fe fecb 	bl	8001ba4 <HAL_RCC_GetSysClockFreq>
 8002e0e:	61f8      	str	r0, [r7, #28]
        break;
 8002e10:	e009      	b.n	8002e26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e16:	61fb      	str	r3, [r7, #28]
        break;
 8002e18:	e005      	b.n	8002e26 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002e24:	bf00      	nop
    }

    if (pclk != 0U)
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d019      	beq.n	8002e60 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	085a      	lsrs	r2, r3, #1
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	441a      	add	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	2b0f      	cmp	r3, #15
 8002e44:	d909      	bls.n	8002e5a <UART_SetConfig+0x546>
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e4c:	d205      	bcs.n	8002e5a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60da      	str	r2, [r3, #12]
 8002e58:	e002      	b.n	8002e60 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002e6c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3728      	adds	r7, #40	@ 0x28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40008000 	.word	0x40008000
 8002e80:	00f42400 	.word	0x00f42400

08002e84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00a      	beq.n	8002eae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00a      	beq.n	8002ed0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00a      	beq.n	8002ef2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f18:	f003 0310 	and.w	r3, r3, #16
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00a      	beq.n	8002f36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3a:	f003 0320 	and.w	r3, r3, #32
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	430a      	orrs	r2, r1
 8002f56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d01a      	beq.n	8002f9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f82:	d10a      	bne.n	8002f9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	605a      	str	r2, [r3, #4]
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b098      	sub	sp, #96	@ 0x60
 8002fcc:	af02      	add	r7, sp, #8
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fd8:	f7fd fdb2 	bl	8000b40 <HAL_GetTick>
 8002fdc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d12e      	bne.n	800304a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f88c 	bl	8003118 <UART_WaitOnFlagUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d021      	beq.n	800304a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800300e:	e853 3f00 	ldrex	r3, [r3]
 8003012:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003016:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800301a:	653b      	str	r3, [r7, #80]	@ 0x50
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003024:	647b      	str	r3, [r7, #68]	@ 0x44
 8003026:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003028:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800302a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800302c:	e841 2300 	strex	r3, r2, [r1]
 8003030:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1e6      	bne.n	8003006 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2220      	movs	r2, #32
 800303c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e062      	b.n	8003110 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b04      	cmp	r3, #4
 8003056:	d149      	bne.n	80030ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003058:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003060:	2200      	movs	r2, #0
 8003062:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f856 	bl	8003118 <UART_WaitOnFlagUntilTimeout>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d03c      	beq.n	80030ec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307a:	e853 3f00 	ldrex	r3, [r3]
 800307e:	623b      	str	r3, [r7, #32]
   return(result);
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003086:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	461a      	mov	r2, r3
 800308e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003090:	633b      	str	r3, [r7, #48]	@ 0x30
 8003092:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003094:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003096:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003098:	e841 2300 	strex	r3, r2, [r1]
 800309c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800309e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1e6      	bne.n	8003072 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	3308      	adds	r3, #8
 80030aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	e853 3f00 	ldrex	r3, [r3]
 80030b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f023 0301 	bic.w	r3, r3, #1
 80030ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	3308      	adds	r3, #8
 80030c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030c4:	61fa      	str	r2, [r7, #28]
 80030c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c8:	69b9      	ldr	r1, [r7, #24]
 80030ca:	69fa      	ldr	r2, [r7, #28]
 80030cc:	e841 2300 	strex	r3, r2, [r1]
 80030d0:	617b      	str	r3, [r7, #20]
   return(result);
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1e5      	bne.n	80030a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2220      	movs	r2, #32
 80030dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e011      	b.n	8003110 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2220      	movs	r2, #32
 80030f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2220      	movs	r2, #32
 80030f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3758      	adds	r7, #88	@ 0x58
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	4613      	mov	r3, r2
 8003126:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003128:	e04f      	b.n	80031ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003130:	d04b      	beq.n	80031ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003132:	f7fd fd05 	bl	8000b40 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	429a      	cmp	r2, r3
 8003140:	d302      	bcc.n	8003148 <UART_WaitOnFlagUntilTimeout+0x30>
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e04e      	b.n	80031ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	2b00      	cmp	r3, #0
 8003158:	d037      	beq.n	80031ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2b80      	cmp	r3, #128	@ 0x80
 800315e:	d034      	beq.n	80031ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2b40      	cmp	r3, #64	@ 0x40
 8003164:	d031      	beq.n	80031ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b08      	cmp	r3, #8
 8003172:	d110      	bne.n	8003196 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2208      	movs	r2, #8
 800317a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 f838 	bl	80031f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2208      	movs	r2, #8
 8003186:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e029      	b.n	80031ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031a4:	d111      	bne.n	80031ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80031ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 f81e 	bl	80031f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2220      	movs	r2, #32
 80031ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e00f      	b.n	80031ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69da      	ldr	r2, [r3, #28]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	4013      	ands	r3, r2
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	bf0c      	ite	eq
 80031da:	2301      	moveq	r3, #1
 80031dc:	2300      	movne	r3, #0
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	461a      	mov	r2, r3
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d0a0      	beq.n	800312a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b095      	sub	sp, #84	@ 0x54
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003202:	e853 3f00 	ldrex	r3, [r3]
 8003206:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800320a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800320e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	461a      	mov	r2, r3
 8003216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003218:	643b      	str	r3, [r7, #64]	@ 0x40
 800321a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800321e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003220:	e841 2300 	strex	r3, r2, [r1]
 8003224:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1e6      	bne.n	80031fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	3308      	adds	r3, #8
 8003232:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	e853 3f00 	ldrex	r3, [r3]
 800323a:	61fb      	str	r3, [r7, #28]
   return(result);
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f023 0301 	bic.w	r3, r3, #1
 8003242:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	3308      	adds	r3, #8
 800324a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800324c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800324e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003250:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003252:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003254:	e841 2300 	strex	r3, r2, [r1]
 8003258:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800325a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1e5      	bne.n	800322c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003264:	2b01      	cmp	r3, #1
 8003266:	d118      	bne.n	800329a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	e853 3f00 	ldrex	r3, [r3]
 8003274:	60bb      	str	r3, [r7, #8]
   return(result);
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	f023 0310 	bic.w	r3, r3, #16
 800327c:	647b      	str	r3, [r7, #68]	@ 0x44
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	461a      	mov	r2, r3
 8003284:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003286:	61bb      	str	r3, [r7, #24]
 8003288:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328a:	6979      	ldr	r1, [r7, #20]
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	e841 2300 	strex	r3, r2, [r1]
 8003292:	613b      	str	r3, [r7, #16]
   return(result);
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1e6      	bne.n	8003268 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2220      	movs	r2, #32
 800329e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80032ae:	bf00      	nop
 80032b0:	3754      	adds	r7, #84	@ 0x54
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <std>:
 80032bc:	2300      	movs	r3, #0
 80032be:	b510      	push	{r4, lr}
 80032c0:	4604      	mov	r4, r0
 80032c2:	e9c0 3300 	strd	r3, r3, [r0]
 80032c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032ca:	6083      	str	r3, [r0, #8]
 80032cc:	8181      	strh	r1, [r0, #12]
 80032ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80032d0:	81c2      	strh	r2, [r0, #14]
 80032d2:	6183      	str	r3, [r0, #24]
 80032d4:	4619      	mov	r1, r3
 80032d6:	2208      	movs	r2, #8
 80032d8:	305c      	adds	r0, #92	@ 0x5c
 80032da:	f000 f9e7 	bl	80036ac <memset>
 80032de:	4b0d      	ldr	r3, [pc, #52]	@ (8003314 <std+0x58>)
 80032e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80032e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003318 <std+0x5c>)
 80032e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80032e6:	4b0d      	ldr	r3, [pc, #52]	@ (800331c <std+0x60>)
 80032e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80032ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003320 <std+0x64>)
 80032ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80032ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003324 <std+0x68>)
 80032f0:	6224      	str	r4, [r4, #32]
 80032f2:	429c      	cmp	r4, r3
 80032f4:	d006      	beq.n	8003304 <std+0x48>
 80032f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80032fa:	4294      	cmp	r4, r2
 80032fc:	d002      	beq.n	8003304 <std+0x48>
 80032fe:	33d0      	adds	r3, #208	@ 0xd0
 8003300:	429c      	cmp	r4, r3
 8003302:	d105      	bne.n	8003310 <std+0x54>
 8003304:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800330c:	f000 ba46 	b.w	800379c <__retarget_lock_init_recursive>
 8003310:	bd10      	pop	{r4, pc}
 8003312:	bf00      	nop
 8003314:	080034fd 	.word	0x080034fd
 8003318:	0800351f 	.word	0x0800351f
 800331c:	08003557 	.word	0x08003557
 8003320:	0800357b 	.word	0x0800357b
 8003324:	20000114 	.word	0x20000114

08003328 <stdio_exit_handler>:
 8003328:	4a02      	ldr	r2, [pc, #8]	@ (8003334 <stdio_exit_handler+0xc>)
 800332a:	4903      	ldr	r1, [pc, #12]	@ (8003338 <stdio_exit_handler+0x10>)
 800332c:	4803      	ldr	r0, [pc, #12]	@ (800333c <stdio_exit_handler+0x14>)
 800332e:	f000 b869 	b.w	8003404 <_fwalk_sglue>
 8003332:	bf00      	nop
 8003334:	2000000c 	.word	0x2000000c
 8003338:	08003a9d 	.word	0x08003a9d
 800333c:	2000001c 	.word	0x2000001c

08003340 <cleanup_stdio>:
 8003340:	6841      	ldr	r1, [r0, #4]
 8003342:	4b0c      	ldr	r3, [pc, #48]	@ (8003374 <cleanup_stdio+0x34>)
 8003344:	4299      	cmp	r1, r3
 8003346:	b510      	push	{r4, lr}
 8003348:	4604      	mov	r4, r0
 800334a:	d001      	beq.n	8003350 <cleanup_stdio+0x10>
 800334c:	f000 fba6 	bl	8003a9c <_fflush_r>
 8003350:	68a1      	ldr	r1, [r4, #8]
 8003352:	4b09      	ldr	r3, [pc, #36]	@ (8003378 <cleanup_stdio+0x38>)
 8003354:	4299      	cmp	r1, r3
 8003356:	d002      	beq.n	800335e <cleanup_stdio+0x1e>
 8003358:	4620      	mov	r0, r4
 800335a:	f000 fb9f 	bl	8003a9c <_fflush_r>
 800335e:	68e1      	ldr	r1, [r4, #12]
 8003360:	4b06      	ldr	r3, [pc, #24]	@ (800337c <cleanup_stdio+0x3c>)
 8003362:	4299      	cmp	r1, r3
 8003364:	d004      	beq.n	8003370 <cleanup_stdio+0x30>
 8003366:	4620      	mov	r0, r4
 8003368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800336c:	f000 bb96 	b.w	8003a9c <_fflush_r>
 8003370:	bd10      	pop	{r4, pc}
 8003372:	bf00      	nop
 8003374:	20000114 	.word	0x20000114
 8003378:	2000017c 	.word	0x2000017c
 800337c:	200001e4 	.word	0x200001e4

08003380 <global_stdio_init.part.0>:
 8003380:	b510      	push	{r4, lr}
 8003382:	4b0b      	ldr	r3, [pc, #44]	@ (80033b0 <global_stdio_init.part.0+0x30>)
 8003384:	4c0b      	ldr	r4, [pc, #44]	@ (80033b4 <global_stdio_init.part.0+0x34>)
 8003386:	4a0c      	ldr	r2, [pc, #48]	@ (80033b8 <global_stdio_init.part.0+0x38>)
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	4620      	mov	r0, r4
 800338c:	2200      	movs	r2, #0
 800338e:	2104      	movs	r1, #4
 8003390:	f7ff ff94 	bl	80032bc <std>
 8003394:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003398:	2201      	movs	r2, #1
 800339a:	2109      	movs	r1, #9
 800339c:	f7ff ff8e 	bl	80032bc <std>
 80033a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80033a4:	2202      	movs	r2, #2
 80033a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033aa:	2112      	movs	r1, #18
 80033ac:	f7ff bf86 	b.w	80032bc <std>
 80033b0:	2000024c 	.word	0x2000024c
 80033b4:	20000114 	.word	0x20000114
 80033b8:	08003329 	.word	0x08003329

080033bc <__sfp_lock_acquire>:
 80033bc:	4801      	ldr	r0, [pc, #4]	@ (80033c4 <__sfp_lock_acquire+0x8>)
 80033be:	f000 b9ee 	b.w	800379e <__retarget_lock_acquire_recursive>
 80033c2:	bf00      	nop
 80033c4:	20000255 	.word	0x20000255

080033c8 <__sfp_lock_release>:
 80033c8:	4801      	ldr	r0, [pc, #4]	@ (80033d0 <__sfp_lock_release+0x8>)
 80033ca:	f000 b9e9 	b.w	80037a0 <__retarget_lock_release_recursive>
 80033ce:	bf00      	nop
 80033d0:	20000255 	.word	0x20000255

080033d4 <__sinit>:
 80033d4:	b510      	push	{r4, lr}
 80033d6:	4604      	mov	r4, r0
 80033d8:	f7ff fff0 	bl	80033bc <__sfp_lock_acquire>
 80033dc:	6a23      	ldr	r3, [r4, #32]
 80033de:	b11b      	cbz	r3, 80033e8 <__sinit+0x14>
 80033e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033e4:	f7ff bff0 	b.w	80033c8 <__sfp_lock_release>
 80033e8:	4b04      	ldr	r3, [pc, #16]	@ (80033fc <__sinit+0x28>)
 80033ea:	6223      	str	r3, [r4, #32]
 80033ec:	4b04      	ldr	r3, [pc, #16]	@ (8003400 <__sinit+0x2c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1f5      	bne.n	80033e0 <__sinit+0xc>
 80033f4:	f7ff ffc4 	bl	8003380 <global_stdio_init.part.0>
 80033f8:	e7f2      	b.n	80033e0 <__sinit+0xc>
 80033fa:	bf00      	nop
 80033fc:	08003341 	.word	0x08003341
 8003400:	2000024c 	.word	0x2000024c

08003404 <_fwalk_sglue>:
 8003404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003408:	4607      	mov	r7, r0
 800340a:	4688      	mov	r8, r1
 800340c:	4614      	mov	r4, r2
 800340e:	2600      	movs	r6, #0
 8003410:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003414:	f1b9 0901 	subs.w	r9, r9, #1
 8003418:	d505      	bpl.n	8003426 <_fwalk_sglue+0x22>
 800341a:	6824      	ldr	r4, [r4, #0]
 800341c:	2c00      	cmp	r4, #0
 800341e:	d1f7      	bne.n	8003410 <_fwalk_sglue+0xc>
 8003420:	4630      	mov	r0, r6
 8003422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003426:	89ab      	ldrh	r3, [r5, #12]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d907      	bls.n	800343c <_fwalk_sglue+0x38>
 800342c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003430:	3301      	adds	r3, #1
 8003432:	d003      	beq.n	800343c <_fwalk_sglue+0x38>
 8003434:	4629      	mov	r1, r5
 8003436:	4638      	mov	r0, r7
 8003438:	47c0      	blx	r8
 800343a:	4306      	orrs	r6, r0
 800343c:	3568      	adds	r5, #104	@ 0x68
 800343e:	e7e9      	b.n	8003414 <_fwalk_sglue+0x10>

08003440 <_puts_r>:
 8003440:	6a03      	ldr	r3, [r0, #32]
 8003442:	b570      	push	{r4, r5, r6, lr}
 8003444:	6884      	ldr	r4, [r0, #8]
 8003446:	4605      	mov	r5, r0
 8003448:	460e      	mov	r6, r1
 800344a:	b90b      	cbnz	r3, 8003450 <_puts_r+0x10>
 800344c:	f7ff ffc2 	bl	80033d4 <__sinit>
 8003450:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003452:	07db      	lsls	r3, r3, #31
 8003454:	d405      	bmi.n	8003462 <_puts_r+0x22>
 8003456:	89a3      	ldrh	r3, [r4, #12]
 8003458:	0598      	lsls	r0, r3, #22
 800345a:	d402      	bmi.n	8003462 <_puts_r+0x22>
 800345c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800345e:	f000 f99e 	bl	800379e <__retarget_lock_acquire_recursive>
 8003462:	89a3      	ldrh	r3, [r4, #12]
 8003464:	0719      	lsls	r1, r3, #28
 8003466:	d502      	bpl.n	800346e <_puts_r+0x2e>
 8003468:	6923      	ldr	r3, [r4, #16]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d135      	bne.n	80034da <_puts_r+0x9a>
 800346e:	4621      	mov	r1, r4
 8003470:	4628      	mov	r0, r5
 8003472:	f000 f8c5 	bl	8003600 <__swsetup_r>
 8003476:	b380      	cbz	r0, 80034da <_puts_r+0x9a>
 8003478:	f04f 35ff 	mov.w	r5, #4294967295
 800347c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800347e:	07da      	lsls	r2, r3, #31
 8003480:	d405      	bmi.n	800348e <_puts_r+0x4e>
 8003482:	89a3      	ldrh	r3, [r4, #12]
 8003484:	059b      	lsls	r3, r3, #22
 8003486:	d402      	bmi.n	800348e <_puts_r+0x4e>
 8003488:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800348a:	f000 f989 	bl	80037a0 <__retarget_lock_release_recursive>
 800348e:	4628      	mov	r0, r5
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	da04      	bge.n	80034a0 <_puts_r+0x60>
 8003496:	69a2      	ldr	r2, [r4, #24]
 8003498:	429a      	cmp	r2, r3
 800349a:	dc17      	bgt.n	80034cc <_puts_r+0x8c>
 800349c:	290a      	cmp	r1, #10
 800349e:	d015      	beq.n	80034cc <_puts_r+0x8c>
 80034a0:	6823      	ldr	r3, [r4, #0]
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	6022      	str	r2, [r4, #0]
 80034a6:	7019      	strb	r1, [r3, #0]
 80034a8:	68a3      	ldr	r3, [r4, #8]
 80034aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80034ae:	3b01      	subs	r3, #1
 80034b0:	60a3      	str	r3, [r4, #8]
 80034b2:	2900      	cmp	r1, #0
 80034b4:	d1ed      	bne.n	8003492 <_puts_r+0x52>
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	da11      	bge.n	80034de <_puts_r+0x9e>
 80034ba:	4622      	mov	r2, r4
 80034bc:	210a      	movs	r1, #10
 80034be:	4628      	mov	r0, r5
 80034c0:	f000 f85f 	bl	8003582 <__swbuf_r>
 80034c4:	3001      	adds	r0, #1
 80034c6:	d0d7      	beq.n	8003478 <_puts_r+0x38>
 80034c8:	250a      	movs	r5, #10
 80034ca:	e7d7      	b.n	800347c <_puts_r+0x3c>
 80034cc:	4622      	mov	r2, r4
 80034ce:	4628      	mov	r0, r5
 80034d0:	f000 f857 	bl	8003582 <__swbuf_r>
 80034d4:	3001      	adds	r0, #1
 80034d6:	d1e7      	bne.n	80034a8 <_puts_r+0x68>
 80034d8:	e7ce      	b.n	8003478 <_puts_r+0x38>
 80034da:	3e01      	subs	r6, #1
 80034dc:	e7e4      	b.n	80034a8 <_puts_r+0x68>
 80034de:	6823      	ldr	r3, [r4, #0]
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	6022      	str	r2, [r4, #0]
 80034e4:	220a      	movs	r2, #10
 80034e6:	701a      	strb	r2, [r3, #0]
 80034e8:	e7ee      	b.n	80034c8 <_puts_r+0x88>
	...

080034ec <puts>:
 80034ec:	4b02      	ldr	r3, [pc, #8]	@ (80034f8 <puts+0xc>)
 80034ee:	4601      	mov	r1, r0
 80034f0:	6818      	ldr	r0, [r3, #0]
 80034f2:	f7ff bfa5 	b.w	8003440 <_puts_r>
 80034f6:	bf00      	nop
 80034f8:	20000018 	.word	0x20000018

080034fc <__sread>:
 80034fc:	b510      	push	{r4, lr}
 80034fe:	460c      	mov	r4, r1
 8003500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003504:	f000 f8fc 	bl	8003700 <_read_r>
 8003508:	2800      	cmp	r0, #0
 800350a:	bfab      	itete	ge
 800350c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800350e:	89a3      	ldrhlt	r3, [r4, #12]
 8003510:	181b      	addge	r3, r3, r0
 8003512:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003516:	bfac      	ite	ge
 8003518:	6563      	strge	r3, [r4, #84]	@ 0x54
 800351a:	81a3      	strhlt	r3, [r4, #12]
 800351c:	bd10      	pop	{r4, pc}

0800351e <__swrite>:
 800351e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003522:	461f      	mov	r7, r3
 8003524:	898b      	ldrh	r3, [r1, #12]
 8003526:	05db      	lsls	r3, r3, #23
 8003528:	4605      	mov	r5, r0
 800352a:	460c      	mov	r4, r1
 800352c:	4616      	mov	r6, r2
 800352e:	d505      	bpl.n	800353c <__swrite+0x1e>
 8003530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003534:	2302      	movs	r3, #2
 8003536:	2200      	movs	r2, #0
 8003538:	f000 f8d0 	bl	80036dc <_lseek_r>
 800353c:	89a3      	ldrh	r3, [r4, #12]
 800353e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003542:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003546:	81a3      	strh	r3, [r4, #12]
 8003548:	4632      	mov	r2, r6
 800354a:	463b      	mov	r3, r7
 800354c:	4628      	mov	r0, r5
 800354e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003552:	f000 b8e7 	b.w	8003724 <_write_r>

08003556 <__sseek>:
 8003556:	b510      	push	{r4, lr}
 8003558:	460c      	mov	r4, r1
 800355a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800355e:	f000 f8bd 	bl	80036dc <_lseek_r>
 8003562:	1c43      	adds	r3, r0, #1
 8003564:	89a3      	ldrh	r3, [r4, #12]
 8003566:	bf15      	itete	ne
 8003568:	6560      	strne	r0, [r4, #84]	@ 0x54
 800356a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800356e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003572:	81a3      	strheq	r3, [r4, #12]
 8003574:	bf18      	it	ne
 8003576:	81a3      	strhne	r3, [r4, #12]
 8003578:	bd10      	pop	{r4, pc}

0800357a <__sclose>:
 800357a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800357e:	f000 b89d 	b.w	80036bc <_close_r>

08003582 <__swbuf_r>:
 8003582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003584:	460e      	mov	r6, r1
 8003586:	4614      	mov	r4, r2
 8003588:	4605      	mov	r5, r0
 800358a:	b118      	cbz	r0, 8003594 <__swbuf_r+0x12>
 800358c:	6a03      	ldr	r3, [r0, #32]
 800358e:	b90b      	cbnz	r3, 8003594 <__swbuf_r+0x12>
 8003590:	f7ff ff20 	bl	80033d4 <__sinit>
 8003594:	69a3      	ldr	r3, [r4, #24]
 8003596:	60a3      	str	r3, [r4, #8]
 8003598:	89a3      	ldrh	r3, [r4, #12]
 800359a:	071a      	lsls	r2, r3, #28
 800359c:	d501      	bpl.n	80035a2 <__swbuf_r+0x20>
 800359e:	6923      	ldr	r3, [r4, #16]
 80035a0:	b943      	cbnz	r3, 80035b4 <__swbuf_r+0x32>
 80035a2:	4621      	mov	r1, r4
 80035a4:	4628      	mov	r0, r5
 80035a6:	f000 f82b 	bl	8003600 <__swsetup_r>
 80035aa:	b118      	cbz	r0, 80035b4 <__swbuf_r+0x32>
 80035ac:	f04f 37ff 	mov.w	r7, #4294967295
 80035b0:	4638      	mov	r0, r7
 80035b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035b4:	6823      	ldr	r3, [r4, #0]
 80035b6:	6922      	ldr	r2, [r4, #16]
 80035b8:	1a98      	subs	r0, r3, r2
 80035ba:	6963      	ldr	r3, [r4, #20]
 80035bc:	b2f6      	uxtb	r6, r6
 80035be:	4283      	cmp	r3, r0
 80035c0:	4637      	mov	r7, r6
 80035c2:	dc05      	bgt.n	80035d0 <__swbuf_r+0x4e>
 80035c4:	4621      	mov	r1, r4
 80035c6:	4628      	mov	r0, r5
 80035c8:	f000 fa68 	bl	8003a9c <_fflush_r>
 80035cc:	2800      	cmp	r0, #0
 80035ce:	d1ed      	bne.n	80035ac <__swbuf_r+0x2a>
 80035d0:	68a3      	ldr	r3, [r4, #8]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	60a3      	str	r3, [r4, #8]
 80035d6:	6823      	ldr	r3, [r4, #0]
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	6022      	str	r2, [r4, #0]
 80035dc:	701e      	strb	r6, [r3, #0]
 80035de:	6962      	ldr	r2, [r4, #20]
 80035e0:	1c43      	adds	r3, r0, #1
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d004      	beq.n	80035f0 <__swbuf_r+0x6e>
 80035e6:	89a3      	ldrh	r3, [r4, #12]
 80035e8:	07db      	lsls	r3, r3, #31
 80035ea:	d5e1      	bpl.n	80035b0 <__swbuf_r+0x2e>
 80035ec:	2e0a      	cmp	r6, #10
 80035ee:	d1df      	bne.n	80035b0 <__swbuf_r+0x2e>
 80035f0:	4621      	mov	r1, r4
 80035f2:	4628      	mov	r0, r5
 80035f4:	f000 fa52 	bl	8003a9c <_fflush_r>
 80035f8:	2800      	cmp	r0, #0
 80035fa:	d0d9      	beq.n	80035b0 <__swbuf_r+0x2e>
 80035fc:	e7d6      	b.n	80035ac <__swbuf_r+0x2a>
	...

08003600 <__swsetup_r>:
 8003600:	b538      	push	{r3, r4, r5, lr}
 8003602:	4b29      	ldr	r3, [pc, #164]	@ (80036a8 <__swsetup_r+0xa8>)
 8003604:	4605      	mov	r5, r0
 8003606:	6818      	ldr	r0, [r3, #0]
 8003608:	460c      	mov	r4, r1
 800360a:	b118      	cbz	r0, 8003614 <__swsetup_r+0x14>
 800360c:	6a03      	ldr	r3, [r0, #32]
 800360e:	b90b      	cbnz	r3, 8003614 <__swsetup_r+0x14>
 8003610:	f7ff fee0 	bl	80033d4 <__sinit>
 8003614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003618:	0719      	lsls	r1, r3, #28
 800361a:	d422      	bmi.n	8003662 <__swsetup_r+0x62>
 800361c:	06da      	lsls	r2, r3, #27
 800361e:	d407      	bmi.n	8003630 <__swsetup_r+0x30>
 8003620:	2209      	movs	r2, #9
 8003622:	602a      	str	r2, [r5, #0]
 8003624:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003628:	81a3      	strh	r3, [r4, #12]
 800362a:	f04f 30ff 	mov.w	r0, #4294967295
 800362e:	e033      	b.n	8003698 <__swsetup_r+0x98>
 8003630:	0758      	lsls	r0, r3, #29
 8003632:	d512      	bpl.n	800365a <__swsetup_r+0x5a>
 8003634:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003636:	b141      	cbz	r1, 800364a <__swsetup_r+0x4a>
 8003638:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800363c:	4299      	cmp	r1, r3
 800363e:	d002      	beq.n	8003646 <__swsetup_r+0x46>
 8003640:	4628      	mov	r0, r5
 8003642:	f000 f8af 	bl	80037a4 <_free_r>
 8003646:	2300      	movs	r3, #0
 8003648:	6363      	str	r3, [r4, #52]	@ 0x34
 800364a:	89a3      	ldrh	r3, [r4, #12]
 800364c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003650:	81a3      	strh	r3, [r4, #12]
 8003652:	2300      	movs	r3, #0
 8003654:	6063      	str	r3, [r4, #4]
 8003656:	6923      	ldr	r3, [r4, #16]
 8003658:	6023      	str	r3, [r4, #0]
 800365a:	89a3      	ldrh	r3, [r4, #12]
 800365c:	f043 0308 	orr.w	r3, r3, #8
 8003660:	81a3      	strh	r3, [r4, #12]
 8003662:	6923      	ldr	r3, [r4, #16]
 8003664:	b94b      	cbnz	r3, 800367a <__swsetup_r+0x7a>
 8003666:	89a3      	ldrh	r3, [r4, #12]
 8003668:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800366c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003670:	d003      	beq.n	800367a <__swsetup_r+0x7a>
 8003672:	4621      	mov	r1, r4
 8003674:	4628      	mov	r0, r5
 8003676:	f000 fa5f 	bl	8003b38 <__smakebuf_r>
 800367a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800367e:	f013 0201 	ands.w	r2, r3, #1
 8003682:	d00a      	beq.n	800369a <__swsetup_r+0x9a>
 8003684:	2200      	movs	r2, #0
 8003686:	60a2      	str	r2, [r4, #8]
 8003688:	6962      	ldr	r2, [r4, #20]
 800368a:	4252      	negs	r2, r2
 800368c:	61a2      	str	r2, [r4, #24]
 800368e:	6922      	ldr	r2, [r4, #16]
 8003690:	b942      	cbnz	r2, 80036a4 <__swsetup_r+0xa4>
 8003692:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003696:	d1c5      	bne.n	8003624 <__swsetup_r+0x24>
 8003698:	bd38      	pop	{r3, r4, r5, pc}
 800369a:	0799      	lsls	r1, r3, #30
 800369c:	bf58      	it	pl
 800369e:	6962      	ldrpl	r2, [r4, #20]
 80036a0:	60a2      	str	r2, [r4, #8]
 80036a2:	e7f4      	b.n	800368e <__swsetup_r+0x8e>
 80036a4:	2000      	movs	r0, #0
 80036a6:	e7f7      	b.n	8003698 <__swsetup_r+0x98>
 80036a8:	20000018 	.word	0x20000018

080036ac <memset>:
 80036ac:	4402      	add	r2, r0
 80036ae:	4603      	mov	r3, r0
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d100      	bne.n	80036b6 <memset+0xa>
 80036b4:	4770      	bx	lr
 80036b6:	f803 1b01 	strb.w	r1, [r3], #1
 80036ba:	e7f9      	b.n	80036b0 <memset+0x4>

080036bc <_close_r>:
 80036bc:	b538      	push	{r3, r4, r5, lr}
 80036be:	4d06      	ldr	r5, [pc, #24]	@ (80036d8 <_close_r+0x1c>)
 80036c0:	2300      	movs	r3, #0
 80036c2:	4604      	mov	r4, r0
 80036c4:	4608      	mov	r0, r1
 80036c6:	602b      	str	r3, [r5, #0]
 80036c8:	f7fd f898 	bl	80007fc <_close>
 80036cc:	1c43      	adds	r3, r0, #1
 80036ce:	d102      	bne.n	80036d6 <_close_r+0x1a>
 80036d0:	682b      	ldr	r3, [r5, #0]
 80036d2:	b103      	cbz	r3, 80036d6 <_close_r+0x1a>
 80036d4:	6023      	str	r3, [r4, #0]
 80036d6:	bd38      	pop	{r3, r4, r5, pc}
 80036d8:	20000250 	.word	0x20000250

080036dc <_lseek_r>:
 80036dc:	b538      	push	{r3, r4, r5, lr}
 80036de:	4d07      	ldr	r5, [pc, #28]	@ (80036fc <_lseek_r+0x20>)
 80036e0:	4604      	mov	r4, r0
 80036e2:	4608      	mov	r0, r1
 80036e4:	4611      	mov	r1, r2
 80036e6:	2200      	movs	r2, #0
 80036e8:	602a      	str	r2, [r5, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	f7fd f8ad 	bl	800084a <_lseek>
 80036f0:	1c43      	adds	r3, r0, #1
 80036f2:	d102      	bne.n	80036fa <_lseek_r+0x1e>
 80036f4:	682b      	ldr	r3, [r5, #0]
 80036f6:	b103      	cbz	r3, 80036fa <_lseek_r+0x1e>
 80036f8:	6023      	str	r3, [r4, #0]
 80036fa:	bd38      	pop	{r3, r4, r5, pc}
 80036fc:	20000250 	.word	0x20000250

08003700 <_read_r>:
 8003700:	b538      	push	{r3, r4, r5, lr}
 8003702:	4d07      	ldr	r5, [pc, #28]	@ (8003720 <_read_r+0x20>)
 8003704:	4604      	mov	r4, r0
 8003706:	4608      	mov	r0, r1
 8003708:	4611      	mov	r1, r2
 800370a:	2200      	movs	r2, #0
 800370c:	602a      	str	r2, [r5, #0]
 800370e:	461a      	mov	r2, r3
 8003710:	f7fd f83b 	bl	800078a <_read>
 8003714:	1c43      	adds	r3, r0, #1
 8003716:	d102      	bne.n	800371e <_read_r+0x1e>
 8003718:	682b      	ldr	r3, [r5, #0]
 800371a:	b103      	cbz	r3, 800371e <_read_r+0x1e>
 800371c:	6023      	str	r3, [r4, #0]
 800371e:	bd38      	pop	{r3, r4, r5, pc}
 8003720:	20000250 	.word	0x20000250

08003724 <_write_r>:
 8003724:	b538      	push	{r3, r4, r5, lr}
 8003726:	4d07      	ldr	r5, [pc, #28]	@ (8003744 <_write_r+0x20>)
 8003728:	4604      	mov	r4, r0
 800372a:	4608      	mov	r0, r1
 800372c:	4611      	mov	r1, r2
 800372e:	2200      	movs	r2, #0
 8003730:	602a      	str	r2, [r5, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	f7fd f846 	bl	80007c4 <_write>
 8003738:	1c43      	adds	r3, r0, #1
 800373a:	d102      	bne.n	8003742 <_write_r+0x1e>
 800373c:	682b      	ldr	r3, [r5, #0]
 800373e:	b103      	cbz	r3, 8003742 <_write_r+0x1e>
 8003740:	6023      	str	r3, [r4, #0]
 8003742:	bd38      	pop	{r3, r4, r5, pc}
 8003744:	20000250 	.word	0x20000250

08003748 <__errno>:
 8003748:	4b01      	ldr	r3, [pc, #4]	@ (8003750 <__errno+0x8>)
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	20000018 	.word	0x20000018

08003754 <__libc_init_array>:
 8003754:	b570      	push	{r4, r5, r6, lr}
 8003756:	4d0d      	ldr	r5, [pc, #52]	@ (800378c <__libc_init_array+0x38>)
 8003758:	4c0d      	ldr	r4, [pc, #52]	@ (8003790 <__libc_init_array+0x3c>)
 800375a:	1b64      	subs	r4, r4, r5
 800375c:	10a4      	asrs	r4, r4, #2
 800375e:	2600      	movs	r6, #0
 8003760:	42a6      	cmp	r6, r4
 8003762:	d109      	bne.n	8003778 <__libc_init_array+0x24>
 8003764:	4d0b      	ldr	r5, [pc, #44]	@ (8003794 <__libc_init_array+0x40>)
 8003766:	4c0c      	ldr	r4, [pc, #48]	@ (8003798 <__libc_init_array+0x44>)
 8003768:	f000 fa54 	bl	8003c14 <_init>
 800376c:	1b64      	subs	r4, r4, r5
 800376e:	10a4      	asrs	r4, r4, #2
 8003770:	2600      	movs	r6, #0
 8003772:	42a6      	cmp	r6, r4
 8003774:	d105      	bne.n	8003782 <__libc_init_array+0x2e>
 8003776:	bd70      	pop	{r4, r5, r6, pc}
 8003778:	f855 3b04 	ldr.w	r3, [r5], #4
 800377c:	4798      	blx	r3
 800377e:	3601      	adds	r6, #1
 8003780:	e7ee      	b.n	8003760 <__libc_init_array+0xc>
 8003782:	f855 3b04 	ldr.w	r3, [r5], #4
 8003786:	4798      	blx	r3
 8003788:	3601      	adds	r6, #1
 800378a:	e7f2      	b.n	8003772 <__libc_init_array+0x1e>
 800378c:	08003c98 	.word	0x08003c98
 8003790:	08003c98 	.word	0x08003c98
 8003794:	08003c98 	.word	0x08003c98
 8003798:	08003c9c 	.word	0x08003c9c

0800379c <__retarget_lock_init_recursive>:
 800379c:	4770      	bx	lr

0800379e <__retarget_lock_acquire_recursive>:
 800379e:	4770      	bx	lr

080037a0 <__retarget_lock_release_recursive>:
 80037a0:	4770      	bx	lr
	...

080037a4 <_free_r>:
 80037a4:	b538      	push	{r3, r4, r5, lr}
 80037a6:	4605      	mov	r5, r0
 80037a8:	2900      	cmp	r1, #0
 80037aa:	d041      	beq.n	8003830 <_free_r+0x8c>
 80037ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037b0:	1f0c      	subs	r4, r1, #4
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	bfb8      	it	lt
 80037b6:	18e4      	addlt	r4, r4, r3
 80037b8:	f000 f8e0 	bl	800397c <__malloc_lock>
 80037bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003834 <_free_r+0x90>)
 80037be:	6813      	ldr	r3, [r2, #0]
 80037c0:	b933      	cbnz	r3, 80037d0 <_free_r+0x2c>
 80037c2:	6063      	str	r3, [r4, #4]
 80037c4:	6014      	str	r4, [r2, #0]
 80037c6:	4628      	mov	r0, r5
 80037c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037cc:	f000 b8dc 	b.w	8003988 <__malloc_unlock>
 80037d0:	42a3      	cmp	r3, r4
 80037d2:	d908      	bls.n	80037e6 <_free_r+0x42>
 80037d4:	6820      	ldr	r0, [r4, #0]
 80037d6:	1821      	adds	r1, r4, r0
 80037d8:	428b      	cmp	r3, r1
 80037da:	bf01      	itttt	eq
 80037dc:	6819      	ldreq	r1, [r3, #0]
 80037de:	685b      	ldreq	r3, [r3, #4]
 80037e0:	1809      	addeq	r1, r1, r0
 80037e2:	6021      	streq	r1, [r4, #0]
 80037e4:	e7ed      	b.n	80037c2 <_free_r+0x1e>
 80037e6:	461a      	mov	r2, r3
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	b10b      	cbz	r3, 80037f0 <_free_r+0x4c>
 80037ec:	42a3      	cmp	r3, r4
 80037ee:	d9fa      	bls.n	80037e6 <_free_r+0x42>
 80037f0:	6811      	ldr	r1, [r2, #0]
 80037f2:	1850      	adds	r0, r2, r1
 80037f4:	42a0      	cmp	r0, r4
 80037f6:	d10b      	bne.n	8003810 <_free_r+0x6c>
 80037f8:	6820      	ldr	r0, [r4, #0]
 80037fa:	4401      	add	r1, r0
 80037fc:	1850      	adds	r0, r2, r1
 80037fe:	4283      	cmp	r3, r0
 8003800:	6011      	str	r1, [r2, #0]
 8003802:	d1e0      	bne.n	80037c6 <_free_r+0x22>
 8003804:	6818      	ldr	r0, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	6053      	str	r3, [r2, #4]
 800380a:	4408      	add	r0, r1
 800380c:	6010      	str	r0, [r2, #0]
 800380e:	e7da      	b.n	80037c6 <_free_r+0x22>
 8003810:	d902      	bls.n	8003818 <_free_r+0x74>
 8003812:	230c      	movs	r3, #12
 8003814:	602b      	str	r3, [r5, #0]
 8003816:	e7d6      	b.n	80037c6 <_free_r+0x22>
 8003818:	6820      	ldr	r0, [r4, #0]
 800381a:	1821      	adds	r1, r4, r0
 800381c:	428b      	cmp	r3, r1
 800381e:	bf04      	itt	eq
 8003820:	6819      	ldreq	r1, [r3, #0]
 8003822:	685b      	ldreq	r3, [r3, #4]
 8003824:	6063      	str	r3, [r4, #4]
 8003826:	bf04      	itt	eq
 8003828:	1809      	addeq	r1, r1, r0
 800382a:	6021      	streq	r1, [r4, #0]
 800382c:	6054      	str	r4, [r2, #4]
 800382e:	e7ca      	b.n	80037c6 <_free_r+0x22>
 8003830:	bd38      	pop	{r3, r4, r5, pc}
 8003832:	bf00      	nop
 8003834:	2000025c 	.word	0x2000025c

08003838 <sbrk_aligned>:
 8003838:	b570      	push	{r4, r5, r6, lr}
 800383a:	4e0f      	ldr	r6, [pc, #60]	@ (8003878 <sbrk_aligned+0x40>)
 800383c:	460c      	mov	r4, r1
 800383e:	6831      	ldr	r1, [r6, #0]
 8003840:	4605      	mov	r5, r0
 8003842:	b911      	cbnz	r1, 800384a <sbrk_aligned+0x12>
 8003844:	f000 f9d6 	bl	8003bf4 <_sbrk_r>
 8003848:	6030      	str	r0, [r6, #0]
 800384a:	4621      	mov	r1, r4
 800384c:	4628      	mov	r0, r5
 800384e:	f000 f9d1 	bl	8003bf4 <_sbrk_r>
 8003852:	1c43      	adds	r3, r0, #1
 8003854:	d103      	bne.n	800385e <sbrk_aligned+0x26>
 8003856:	f04f 34ff 	mov.w	r4, #4294967295
 800385a:	4620      	mov	r0, r4
 800385c:	bd70      	pop	{r4, r5, r6, pc}
 800385e:	1cc4      	adds	r4, r0, #3
 8003860:	f024 0403 	bic.w	r4, r4, #3
 8003864:	42a0      	cmp	r0, r4
 8003866:	d0f8      	beq.n	800385a <sbrk_aligned+0x22>
 8003868:	1a21      	subs	r1, r4, r0
 800386a:	4628      	mov	r0, r5
 800386c:	f000 f9c2 	bl	8003bf4 <_sbrk_r>
 8003870:	3001      	adds	r0, #1
 8003872:	d1f2      	bne.n	800385a <sbrk_aligned+0x22>
 8003874:	e7ef      	b.n	8003856 <sbrk_aligned+0x1e>
 8003876:	bf00      	nop
 8003878:	20000258 	.word	0x20000258

0800387c <_malloc_r>:
 800387c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003880:	1ccd      	adds	r5, r1, #3
 8003882:	f025 0503 	bic.w	r5, r5, #3
 8003886:	3508      	adds	r5, #8
 8003888:	2d0c      	cmp	r5, #12
 800388a:	bf38      	it	cc
 800388c:	250c      	movcc	r5, #12
 800388e:	2d00      	cmp	r5, #0
 8003890:	4606      	mov	r6, r0
 8003892:	db01      	blt.n	8003898 <_malloc_r+0x1c>
 8003894:	42a9      	cmp	r1, r5
 8003896:	d904      	bls.n	80038a2 <_malloc_r+0x26>
 8003898:	230c      	movs	r3, #12
 800389a:	6033      	str	r3, [r6, #0]
 800389c:	2000      	movs	r0, #0
 800389e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003978 <_malloc_r+0xfc>
 80038a6:	f000 f869 	bl	800397c <__malloc_lock>
 80038aa:	f8d8 3000 	ldr.w	r3, [r8]
 80038ae:	461c      	mov	r4, r3
 80038b0:	bb44      	cbnz	r4, 8003904 <_malloc_r+0x88>
 80038b2:	4629      	mov	r1, r5
 80038b4:	4630      	mov	r0, r6
 80038b6:	f7ff ffbf 	bl	8003838 <sbrk_aligned>
 80038ba:	1c43      	adds	r3, r0, #1
 80038bc:	4604      	mov	r4, r0
 80038be:	d158      	bne.n	8003972 <_malloc_r+0xf6>
 80038c0:	f8d8 4000 	ldr.w	r4, [r8]
 80038c4:	4627      	mov	r7, r4
 80038c6:	2f00      	cmp	r7, #0
 80038c8:	d143      	bne.n	8003952 <_malloc_r+0xd6>
 80038ca:	2c00      	cmp	r4, #0
 80038cc:	d04b      	beq.n	8003966 <_malloc_r+0xea>
 80038ce:	6823      	ldr	r3, [r4, #0]
 80038d0:	4639      	mov	r1, r7
 80038d2:	4630      	mov	r0, r6
 80038d4:	eb04 0903 	add.w	r9, r4, r3
 80038d8:	f000 f98c 	bl	8003bf4 <_sbrk_r>
 80038dc:	4581      	cmp	r9, r0
 80038de:	d142      	bne.n	8003966 <_malloc_r+0xea>
 80038e0:	6821      	ldr	r1, [r4, #0]
 80038e2:	1a6d      	subs	r5, r5, r1
 80038e4:	4629      	mov	r1, r5
 80038e6:	4630      	mov	r0, r6
 80038e8:	f7ff ffa6 	bl	8003838 <sbrk_aligned>
 80038ec:	3001      	adds	r0, #1
 80038ee:	d03a      	beq.n	8003966 <_malloc_r+0xea>
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	442b      	add	r3, r5
 80038f4:	6023      	str	r3, [r4, #0]
 80038f6:	f8d8 3000 	ldr.w	r3, [r8]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	bb62      	cbnz	r2, 8003958 <_malloc_r+0xdc>
 80038fe:	f8c8 7000 	str.w	r7, [r8]
 8003902:	e00f      	b.n	8003924 <_malloc_r+0xa8>
 8003904:	6822      	ldr	r2, [r4, #0]
 8003906:	1b52      	subs	r2, r2, r5
 8003908:	d420      	bmi.n	800394c <_malloc_r+0xd0>
 800390a:	2a0b      	cmp	r2, #11
 800390c:	d917      	bls.n	800393e <_malloc_r+0xc2>
 800390e:	1961      	adds	r1, r4, r5
 8003910:	42a3      	cmp	r3, r4
 8003912:	6025      	str	r5, [r4, #0]
 8003914:	bf18      	it	ne
 8003916:	6059      	strne	r1, [r3, #4]
 8003918:	6863      	ldr	r3, [r4, #4]
 800391a:	bf08      	it	eq
 800391c:	f8c8 1000 	streq.w	r1, [r8]
 8003920:	5162      	str	r2, [r4, r5]
 8003922:	604b      	str	r3, [r1, #4]
 8003924:	4630      	mov	r0, r6
 8003926:	f000 f82f 	bl	8003988 <__malloc_unlock>
 800392a:	f104 000b 	add.w	r0, r4, #11
 800392e:	1d23      	adds	r3, r4, #4
 8003930:	f020 0007 	bic.w	r0, r0, #7
 8003934:	1ac2      	subs	r2, r0, r3
 8003936:	bf1c      	itt	ne
 8003938:	1a1b      	subne	r3, r3, r0
 800393a:	50a3      	strne	r3, [r4, r2]
 800393c:	e7af      	b.n	800389e <_malloc_r+0x22>
 800393e:	6862      	ldr	r2, [r4, #4]
 8003940:	42a3      	cmp	r3, r4
 8003942:	bf0c      	ite	eq
 8003944:	f8c8 2000 	streq.w	r2, [r8]
 8003948:	605a      	strne	r2, [r3, #4]
 800394a:	e7eb      	b.n	8003924 <_malloc_r+0xa8>
 800394c:	4623      	mov	r3, r4
 800394e:	6864      	ldr	r4, [r4, #4]
 8003950:	e7ae      	b.n	80038b0 <_malloc_r+0x34>
 8003952:	463c      	mov	r4, r7
 8003954:	687f      	ldr	r7, [r7, #4]
 8003956:	e7b6      	b.n	80038c6 <_malloc_r+0x4a>
 8003958:	461a      	mov	r2, r3
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	42a3      	cmp	r3, r4
 800395e:	d1fb      	bne.n	8003958 <_malloc_r+0xdc>
 8003960:	2300      	movs	r3, #0
 8003962:	6053      	str	r3, [r2, #4]
 8003964:	e7de      	b.n	8003924 <_malloc_r+0xa8>
 8003966:	230c      	movs	r3, #12
 8003968:	6033      	str	r3, [r6, #0]
 800396a:	4630      	mov	r0, r6
 800396c:	f000 f80c 	bl	8003988 <__malloc_unlock>
 8003970:	e794      	b.n	800389c <_malloc_r+0x20>
 8003972:	6005      	str	r5, [r0, #0]
 8003974:	e7d6      	b.n	8003924 <_malloc_r+0xa8>
 8003976:	bf00      	nop
 8003978:	2000025c 	.word	0x2000025c

0800397c <__malloc_lock>:
 800397c:	4801      	ldr	r0, [pc, #4]	@ (8003984 <__malloc_lock+0x8>)
 800397e:	f7ff bf0e 	b.w	800379e <__retarget_lock_acquire_recursive>
 8003982:	bf00      	nop
 8003984:	20000254 	.word	0x20000254

08003988 <__malloc_unlock>:
 8003988:	4801      	ldr	r0, [pc, #4]	@ (8003990 <__malloc_unlock+0x8>)
 800398a:	f7ff bf09 	b.w	80037a0 <__retarget_lock_release_recursive>
 800398e:	bf00      	nop
 8003990:	20000254 	.word	0x20000254

08003994 <__sflush_r>:
 8003994:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800399c:	0716      	lsls	r6, r2, #28
 800399e:	4605      	mov	r5, r0
 80039a0:	460c      	mov	r4, r1
 80039a2:	d454      	bmi.n	8003a4e <__sflush_r+0xba>
 80039a4:	684b      	ldr	r3, [r1, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	dc02      	bgt.n	80039b0 <__sflush_r+0x1c>
 80039aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	dd48      	ble.n	8003a42 <__sflush_r+0xae>
 80039b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80039b2:	2e00      	cmp	r6, #0
 80039b4:	d045      	beq.n	8003a42 <__sflush_r+0xae>
 80039b6:	2300      	movs	r3, #0
 80039b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80039bc:	682f      	ldr	r7, [r5, #0]
 80039be:	6a21      	ldr	r1, [r4, #32]
 80039c0:	602b      	str	r3, [r5, #0]
 80039c2:	d030      	beq.n	8003a26 <__sflush_r+0x92>
 80039c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80039c6:	89a3      	ldrh	r3, [r4, #12]
 80039c8:	0759      	lsls	r1, r3, #29
 80039ca:	d505      	bpl.n	80039d8 <__sflush_r+0x44>
 80039cc:	6863      	ldr	r3, [r4, #4]
 80039ce:	1ad2      	subs	r2, r2, r3
 80039d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80039d2:	b10b      	cbz	r3, 80039d8 <__sflush_r+0x44>
 80039d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80039d6:	1ad2      	subs	r2, r2, r3
 80039d8:	2300      	movs	r3, #0
 80039da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80039dc:	6a21      	ldr	r1, [r4, #32]
 80039de:	4628      	mov	r0, r5
 80039e0:	47b0      	blx	r6
 80039e2:	1c43      	adds	r3, r0, #1
 80039e4:	89a3      	ldrh	r3, [r4, #12]
 80039e6:	d106      	bne.n	80039f6 <__sflush_r+0x62>
 80039e8:	6829      	ldr	r1, [r5, #0]
 80039ea:	291d      	cmp	r1, #29
 80039ec:	d82b      	bhi.n	8003a46 <__sflush_r+0xb2>
 80039ee:	4a2a      	ldr	r2, [pc, #168]	@ (8003a98 <__sflush_r+0x104>)
 80039f0:	40ca      	lsrs	r2, r1
 80039f2:	07d6      	lsls	r6, r2, #31
 80039f4:	d527      	bpl.n	8003a46 <__sflush_r+0xb2>
 80039f6:	2200      	movs	r2, #0
 80039f8:	6062      	str	r2, [r4, #4]
 80039fa:	04d9      	lsls	r1, r3, #19
 80039fc:	6922      	ldr	r2, [r4, #16]
 80039fe:	6022      	str	r2, [r4, #0]
 8003a00:	d504      	bpl.n	8003a0c <__sflush_r+0x78>
 8003a02:	1c42      	adds	r2, r0, #1
 8003a04:	d101      	bne.n	8003a0a <__sflush_r+0x76>
 8003a06:	682b      	ldr	r3, [r5, #0]
 8003a08:	b903      	cbnz	r3, 8003a0c <__sflush_r+0x78>
 8003a0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8003a0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a0e:	602f      	str	r7, [r5, #0]
 8003a10:	b1b9      	cbz	r1, 8003a42 <__sflush_r+0xae>
 8003a12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a16:	4299      	cmp	r1, r3
 8003a18:	d002      	beq.n	8003a20 <__sflush_r+0x8c>
 8003a1a:	4628      	mov	r0, r5
 8003a1c:	f7ff fec2 	bl	80037a4 <_free_r>
 8003a20:	2300      	movs	r3, #0
 8003a22:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a24:	e00d      	b.n	8003a42 <__sflush_r+0xae>
 8003a26:	2301      	movs	r3, #1
 8003a28:	4628      	mov	r0, r5
 8003a2a:	47b0      	blx	r6
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	1c50      	adds	r0, r2, #1
 8003a30:	d1c9      	bne.n	80039c6 <__sflush_r+0x32>
 8003a32:	682b      	ldr	r3, [r5, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0c6      	beq.n	80039c6 <__sflush_r+0x32>
 8003a38:	2b1d      	cmp	r3, #29
 8003a3a:	d001      	beq.n	8003a40 <__sflush_r+0xac>
 8003a3c:	2b16      	cmp	r3, #22
 8003a3e:	d11e      	bne.n	8003a7e <__sflush_r+0xea>
 8003a40:	602f      	str	r7, [r5, #0]
 8003a42:	2000      	movs	r0, #0
 8003a44:	e022      	b.n	8003a8c <__sflush_r+0xf8>
 8003a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a4a:	b21b      	sxth	r3, r3
 8003a4c:	e01b      	b.n	8003a86 <__sflush_r+0xf2>
 8003a4e:	690f      	ldr	r7, [r1, #16]
 8003a50:	2f00      	cmp	r7, #0
 8003a52:	d0f6      	beq.n	8003a42 <__sflush_r+0xae>
 8003a54:	0793      	lsls	r3, r2, #30
 8003a56:	680e      	ldr	r6, [r1, #0]
 8003a58:	bf08      	it	eq
 8003a5a:	694b      	ldreq	r3, [r1, #20]
 8003a5c:	600f      	str	r7, [r1, #0]
 8003a5e:	bf18      	it	ne
 8003a60:	2300      	movne	r3, #0
 8003a62:	eba6 0807 	sub.w	r8, r6, r7
 8003a66:	608b      	str	r3, [r1, #8]
 8003a68:	f1b8 0f00 	cmp.w	r8, #0
 8003a6c:	dde9      	ble.n	8003a42 <__sflush_r+0xae>
 8003a6e:	6a21      	ldr	r1, [r4, #32]
 8003a70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003a72:	4643      	mov	r3, r8
 8003a74:	463a      	mov	r2, r7
 8003a76:	4628      	mov	r0, r5
 8003a78:	47b0      	blx	r6
 8003a7a:	2800      	cmp	r0, #0
 8003a7c:	dc08      	bgt.n	8003a90 <__sflush_r+0xfc>
 8003a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a86:	81a3      	strh	r3, [r4, #12]
 8003a88:	f04f 30ff 	mov.w	r0, #4294967295
 8003a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a90:	4407      	add	r7, r0
 8003a92:	eba8 0800 	sub.w	r8, r8, r0
 8003a96:	e7e7      	b.n	8003a68 <__sflush_r+0xd4>
 8003a98:	20400001 	.word	0x20400001

08003a9c <_fflush_r>:
 8003a9c:	b538      	push	{r3, r4, r5, lr}
 8003a9e:	690b      	ldr	r3, [r1, #16]
 8003aa0:	4605      	mov	r5, r0
 8003aa2:	460c      	mov	r4, r1
 8003aa4:	b913      	cbnz	r3, 8003aac <_fflush_r+0x10>
 8003aa6:	2500      	movs	r5, #0
 8003aa8:	4628      	mov	r0, r5
 8003aaa:	bd38      	pop	{r3, r4, r5, pc}
 8003aac:	b118      	cbz	r0, 8003ab6 <_fflush_r+0x1a>
 8003aae:	6a03      	ldr	r3, [r0, #32]
 8003ab0:	b90b      	cbnz	r3, 8003ab6 <_fflush_r+0x1a>
 8003ab2:	f7ff fc8f 	bl	80033d4 <__sinit>
 8003ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0f3      	beq.n	8003aa6 <_fflush_r+0xa>
 8003abe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003ac0:	07d0      	lsls	r0, r2, #31
 8003ac2:	d404      	bmi.n	8003ace <_fflush_r+0x32>
 8003ac4:	0599      	lsls	r1, r3, #22
 8003ac6:	d402      	bmi.n	8003ace <_fflush_r+0x32>
 8003ac8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003aca:	f7ff fe68 	bl	800379e <__retarget_lock_acquire_recursive>
 8003ace:	4628      	mov	r0, r5
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	f7ff ff5f 	bl	8003994 <__sflush_r>
 8003ad6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ad8:	07da      	lsls	r2, r3, #31
 8003ada:	4605      	mov	r5, r0
 8003adc:	d4e4      	bmi.n	8003aa8 <_fflush_r+0xc>
 8003ade:	89a3      	ldrh	r3, [r4, #12]
 8003ae0:	059b      	lsls	r3, r3, #22
 8003ae2:	d4e1      	bmi.n	8003aa8 <_fflush_r+0xc>
 8003ae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ae6:	f7ff fe5b 	bl	80037a0 <__retarget_lock_release_recursive>
 8003aea:	e7dd      	b.n	8003aa8 <_fflush_r+0xc>

08003aec <__swhatbuf_r>:
 8003aec:	b570      	push	{r4, r5, r6, lr}
 8003aee:	460c      	mov	r4, r1
 8003af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003af4:	2900      	cmp	r1, #0
 8003af6:	b096      	sub	sp, #88	@ 0x58
 8003af8:	4615      	mov	r5, r2
 8003afa:	461e      	mov	r6, r3
 8003afc:	da0d      	bge.n	8003b1a <__swhatbuf_r+0x2e>
 8003afe:	89a3      	ldrh	r3, [r4, #12]
 8003b00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003b04:	f04f 0100 	mov.w	r1, #0
 8003b08:	bf14      	ite	ne
 8003b0a:	2340      	movne	r3, #64	@ 0x40
 8003b0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003b10:	2000      	movs	r0, #0
 8003b12:	6031      	str	r1, [r6, #0]
 8003b14:	602b      	str	r3, [r5, #0]
 8003b16:	b016      	add	sp, #88	@ 0x58
 8003b18:	bd70      	pop	{r4, r5, r6, pc}
 8003b1a:	466a      	mov	r2, sp
 8003b1c:	f000 f848 	bl	8003bb0 <_fstat_r>
 8003b20:	2800      	cmp	r0, #0
 8003b22:	dbec      	blt.n	8003afe <__swhatbuf_r+0x12>
 8003b24:	9901      	ldr	r1, [sp, #4]
 8003b26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003b2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003b2e:	4259      	negs	r1, r3
 8003b30:	4159      	adcs	r1, r3
 8003b32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b36:	e7eb      	b.n	8003b10 <__swhatbuf_r+0x24>

08003b38 <__smakebuf_r>:
 8003b38:	898b      	ldrh	r3, [r1, #12]
 8003b3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b3c:	079d      	lsls	r5, r3, #30
 8003b3e:	4606      	mov	r6, r0
 8003b40:	460c      	mov	r4, r1
 8003b42:	d507      	bpl.n	8003b54 <__smakebuf_r+0x1c>
 8003b44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003b48:	6023      	str	r3, [r4, #0]
 8003b4a:	6123      	str	r3, [r4, #16]
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	6163      	str	r3, [r4, #20]
 8003b50:	b003      	add	sp, #12
 8003b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b54:	ab01      	add	r3, sp, #4
 8003b56:	466a      	mov	r2, sp
 8003b58:	f7ff ffc8 	bl	8003aec <__swhatbuf_r>
 8003b5c:	9f00      	ldr	r7, [sp, #0]
 8003b5e:	4605      	mov	r5, r0
 8003b60:	4639      	mov	r1, r7
 8003b62:	4630      	mov	r0, r6
 8003b64:	f7ff fe8a 	bl	800387c <_malloc_r>
 8003b68:	b948      	cbnz	r0, 8003b7e <__smakebuf_r+0x46>
 8003b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b6e:	059a      	lsls	r2, r3, #22
 8003b70:	d4ee      	bmi.n	8003b50 <__smakebuf_r+0x18>
 8003b72:	f023 0303 	bic.w	r3, r3, #3
 8003b76:	f043 0302 	orr.w	r3, r3, #2
 8003b7a:	81a3      	strh	r3, [r4, #12]
 8003b7c:	e7e2      	b.n	8003b44 <__smakebuf_r+0xc>
 8003b7e:	89a3      	ldrh	r3, [r4, #12]
 8003b80:	6020      	str	r0, [r4, #0]
 8003b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b86:	81a3      	strh	r3, [r4, #12]
 8003b88:	9b01      	ldr	r3, [sp, #4]
 8003b8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003b8e:	b15b      	cbz	r3, 8003ba8 <__smakebuf_r+0x70>
 8003b90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b94:	4630      	mov	r0, r6
 8003b96:	f000 f81d 	bl	8003bd4 <_isatty_r>
 8003b9a:	b128      	cbz	r0, 8003ba8 <__smakebuf_r+0x70>
 8003b9c:	89a3      	ldrh	r3, [r4, #12]
 8003b9e:	f023 0303 	bic.w	r3, r3, #3
 8003ba2:	f043 0301 	orr.w	r3, r3, #1
 8003ba6:	81a3      	strh	r3, [r4, #12]
 8003ba8:	89a3      	ldrh	r3, [r4, #12]
 8003baa:	431d      	orrs	r5, r3
 8003bac:	81a5      	strh	r5, [r4, #12]
 8003bae:	e7cf      	b.n	8003b50 <__smakebuf_r+0x18>

08003bb0 <_fstat_r>:
 8003bb0:	b538      	push	{r3, r4, r5, lr}
 8003bb2:	4d07      	ldr	r5, [pc, #28]	@ (8003bd0 <_fstat_r+0x20>)
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	4604      	mov	r4, r0
 8003bb8:	4608      	mov	r0, r1
 8003bba:	4611      	mov	r1, r2
 8003bbc:	602b      	str	r3, [r5, #0]
 8003bbe:	f7fc fe29 	bl	8000814 <_fstat>
 8003bc2:	1c43      	adds	r3, r0, #1
 8003bc4:	d102      	bne.n	8003bcc <_fstat_r+0x1c>
 8003bc6:	682b      	ldr	r3, [r5, #0]
 8003bc8:	b103      	cbz	r3, 8003bcc <_fstat_r+0x1c>
 8003bca:	6023      	str	r3, [r4, #0]
 8003bcc:	bd38      	pop	{r3, r4, r5, pc}
 8003bce:	bf00      	nop
 8003bd0:	20000250 	.word	0x20000250

08003bd4 <_isatty_r>:
 8003bd4:	b538      	push	{r3, r4, r5, lr}
 8003bd6:	4d06      	ldr	r5, [pc, #24]	@ (8003bf0 <_isatty_r+0x1c>)
 8003bd8:	2300      	movs	r3, #0
 8003bda:	4604      	mov	r4, r0
 8003bdc:	4608      	mov	r0, r1
 8003bde:	602b      	str	r3, [r5, #0]
 8003be0:	f7fc fe28 	bl	8000834 <_isatty>
 8003be4:	1c43      	adds	r3, r0, #1
 8003be6:	d102      	bne.n	8003bee <_isatty_r+0x1a>
 8003be8:	682b      	ldr	r3, [r5, #0]
 8003bea:	b103      	cbz	r3, 8003bee <_isatty_r+0x1a>
 8003bec:	6023      	str	r3, [r4, #0]
 8003bee:	bd38      	pop	{r3, r4, r5, pc}
 8003bf0:	20000250 	.word	0x20000250

08003bf4 <_sbrk_r>:
 8003bf4:	b538      	push	{r3, r4, r5, lr}
 8003bf6:	4d06      	ldr	r5, [pc, #24]	@ (8003c10 <_sbrk_r+0x1c>)
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	4604      	mov	r4, r0
 8003bfc:	4608      	mov	r0, r1
 8003bfe:	602b      	str	r3, [r5, #0]
 8003c00:	f7fc fe30 	bl	8000864 <_sbrk>
 8003c04:	1c43      	adds	r3, r0, #1
 8003c06:	d102      	bne.n	8003c0e <_sbrk_r+0x1a>
 8003c08:	682b      	ldr	r3, [r5, #0]
 8003c0a:	b103      	cbz	r3, 8003c0e <_sbrk_r+0x1a>
 8003c0c:	6023      	str	r3, [r4, #0]
 8003c0e:	bd38      	pop	{r3, r4, r5, pc}
 8003c10:	20000250 	.word	0x20000250

08003c14 <_init>:
 8003c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c16:	bf00      	nop
 8003c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c1a:	bc08      	pop	{r3}
 8003c1c:	469e      	mov	lr, r3
 8003c1e:	4770      	bx	lr

08003c20 <_fini>:
 8003c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c22:	bf00      	nop
 8003c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c26:	bc08      	pop	{r3}
 8003c28:	469e      	mov	lr, r3
 8003c2a:	4770      	bx	lr
