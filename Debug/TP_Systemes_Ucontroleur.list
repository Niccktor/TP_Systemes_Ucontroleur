
TP_Systemes_Ucontroleur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a1c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08007bac  08007bac  00008bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c5c  08007c5c  0000906c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007c5c  08007c5c  00008c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c64  08007c64  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c64  08007c64  00008c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c68  08007c68  00008c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007c6c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e0  2000006c  08007cd8  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000064c  08007cd8  0000964c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e91  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003323  00000000  00000000  0001df2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  00021250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dbc  00000000  00000000  00022420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028eb5  00000000  00000000  000231dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001835a  00000000  00000000  0004c091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1b16  00000000  00000000  000643eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00155f01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f9c  00000000  00000000  00155f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0015aee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b94 	.word	0x08007b94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08007b94 	.word	0x08007b94

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MCP23S17_WriteReg>:


static	SPI_HandleTypeDef *spiHandle;

static void MCP23S17_WriteReg(uint8_t reg, uint8_t data)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	460a      	mov	r2, r1
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	4613      	mov	r3, r2
 80005aa:	71bb      	strb	r3, [r7, #6]
	uint8_t send[3] = { MCP23S17_ADDR, reg, data };
 80005ac:	2340      	movs	r3, #64	@ 0x40
 80005ae:	733b      	strb	r3, [r7, #12]
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	737b      	strb	r3, [r7, #13]
 80005b4:	79bb      	ldrb	r3, [r7, #6]
 80005b6:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(nCS_MCP23S17_GPIO_Port, nCS_MCP23S17_Pin, 0);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2180      	movs	r1, #128	@ 0x80
 80005bc:	480a      	ldr	r0, [pc, #40]	@ (80005e8 <MCP23S17_WriteReg+0x4c>)
 80005be:	f001 fd8f 	bl	80020e0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spiHandle, send, 3, 0x400);
 80005c2:	4b0a      	ldr	r3, [pc, #40]	@ (80005ec <MCP23S17_WriteReg+0x50>)
 80005c4:	6818      	ldr	r0, [r3, #0]
 80005c6:	f107 010c 	add.w	r1, r7, #12
 80005ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ce:	2203      	movs	r2, #3
 80005d0:	f005 fb2c 	bl	8005c2c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(nCS_MCP23S17_GPIO_Port, nCS_MCP23S17_Pin, 1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2180      	movs	r1, #128	@ 0x80
 80005d8:	4803      	ldr	r0, [pc, #12]	@ (80005e8 <MCP23S17_WriteReg+0x4c>)
 80005da:	f001 fd81 	bl	80020e0 <HAL_GPIO_WritePin>
}
 80005de:	bf00      	nop
 80005e0:	3710      	adds	r7, #16
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	48000400 	.word	0x48000400
 80005ec:	20000088 	.word	0x20000088

080005f0 <MCP23S17_Init>:

	return (RX_data);
}

void MCP23S17_Init(SPI_HandleTypeDef *hspi)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	spiHandle = hspi;
 80005f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000630 <MCP23S17_Init+0x40>)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(nCS_MCP23S17_GPIO_Port, nCS_MCP23S17_Pin, 1);
 80005fe:	2201      	movs	r2, #1
 8000600:	2180      	movs	r1, #128	@ 0x80
 8000602:	480c      	ldr	r0, [pc, #48]	@ (8000634 <MCP23S17_Init+0x44>)
 8000604:	f001 fd6c 	bl	80020e0 <HAL_GPIO_WritePin>

	MCP23S17_WriteReg(IODIRA, 0x00);
 8000608:	2100      	movs	r1, #0
 800060a:	2000      	movs	r0, #0
 800060c:	f7ff ffc6 	bl	800059c <MCP23S17_WriteReg>
	MCP23S17_WriteReg(IODIRB, 0x00);
 8000610:	2100      	movs	r1, #0
 8000612:	2001      	movs	r0, #1
 8000614:	f7ff ffc2 	bl	800059c <MCP23S17_WriteReg>

	MCP23S17_WriteReg(OLATA, 0xff);
 8000618:	21ff      	movs	r1, #255	@ 0xff
 800061a:	2014      	movs	r0, #20
 800061c:	f7ff ffbe 	bl	800059c <MCP23S17_WriteReg>
	MCP23S17_WriteReg(OLATB, 0xff);
 8000620:	21ff      	movs	r1, #255	@ 0xff
 8000622:	2015      	movs	r0, #21
 8000624:	f7ff ffba 	bl	800059c <MCP23S17_WriteReg>
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000088 	.word	0x20000088
 8000634:	48000400 	.word	0x48000400

08000638 <MCP23S17_SetPin>:


static 	uint8_t a_state = 0xff;
static 	uint8_t b_state = 0xff;
void MCP23S17_SetPin(uint8_t port, uint8_t pin, uint8_t state)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	71fb      	strb	r3, [r7, #7]
 8000642:	460b      	mov	r3, r1
 8000644:	71bb      	strb	r3, [r7, #6]
 8000646:	4613      	mov	r3, r2
 8000648:	717b      	strb	r3, [r7, #5]
	if (pin > 7)
 800064a:	79bb      	ldrb	r3, [r7, #6]
 800064c:	2b07      	cmp	r3, #7
 800064e:	d853      	bhi.n	80006f8 <MCP23S17_SetPin+0xc0>
		return ;
	if (port == 'A')
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	2b41      	cmp	r3, #65	@ 0x41
 8000654:	d126      	bne.n	80006a4 <MCP23S17_SetPin+0x6c>
	{
		if (!state)
 8000656:	797b      	ldrb	r3, [r7, #5]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d10d      	bne.n	8000678 <MCP23S17_SetPin+0x40>
			a_state |= (1 << pin);
 800065c:	79bb      	ldrb	r3, [r7, #6]
 800065e:	2201      	movs	r2, #1
 8000660:	fa02 f303 	lsl.w	r3, r2, r3
 8000664:	b25a      	sxtb	r2, r3
 8000666:	4b26      	ldr	r3, [pc, #152]	@ (8000700 <MCP23S17_SetPin+0xc8>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b25b      	sxtb	r3, r3
 800066c:	4313      	orrs	r3, r2
 800066e:	b25b      	sxtb	r3, r3
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b23      	ldr	r3, [pc, #140]	@ (8000700 <MCP23S17_SetPin+0xc8>)
 8000674:	701a      	strb	r2, [r3, #0]
 8000676:	e00e      	b.n	8000696 <MCP23S17_SetPin+0x5e>
		else
			a_state &= ~(1 << pin);
 8000678:	79bb      	ldrb	r3, [r7, #6]
 800067a:	2201      	movs	r2, #1
 800067c:	fa02 f303 	lsl.w	r3, r2, r3
 8000680:	b25b      	sxtb	r3, r3
 8000682:	43db      	mvns	r3, r3
 8000684:	b25a      	sxtb	r2, r3
 8000686:	4b1e      	ldr	r3, [pc, #120]	@ (8000700 <MCP23S17_SetPin+0xc8>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	b25b      	sxtb	r3, r3
 800068c:	4013      	ands	r3, r2
 800068e:	b25b      	sxtb	r3, r3
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b1b      	ldr	r3, [pc, #108]	@ (8000700 <MCP23S17_SetPin+0xc8>)
 8000694:	701a      	strb	r2, [r3, #0]
		MCP23S17_WriteReg(OLATA, a_state);
 8000696:	4b1a      	ldr	r3, [pc, #104]	@ (8000700 <MCP23S17_SetPin+0xc8>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	4619      	mov	r1, r3
 800069c:	2014      	movs	r0, #20
 800069e:	f7ff ff7d 	bl	800059c <MCP23S17_WriteReg>
 80006a2:	e02a      	b.n	80006fa <MCP23S17_SetPin+0xc2>
	}
	else if (port == 'B')
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	2b42      	cmp	r3, #66	@ 0x42
 80006a8:	d127      	bne.n	80006fa <MCP23S17_SetPin+0xc2>
	{
		if (!state)
 80006aa:	797b      	ldrb	r3, [r7, #5]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d10d      	bne.n	80006cc <MCP23S17_SetPin+0x94>
			b_state |= (1 << pin);
 80006b0:	79bb      	ldrb	r3, [r7, #6]
 80006b2:	2201      	movs	r2, #1
 80006b4:	fa02 f303 	lsl.w	r3, r2, r3
 80006b8:	b25a      	sxtb	r2, r3
 80006ba:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <MCP23S17_SetPin+0xcc>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	b25b      	sxtb	r3, r3
 80006c0:	4313      	orrs	r3, r2
 80006c2:	b25b      	sxtb	r3, r3
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <MCP23S17_SetPin+0xcc>)
 80006c8:	701a      	strb	r2, [r3, #0]
 80006ca:	e00e      	b.n	80006ea <MCP23S17_SetPin+0xb2>
		else
			b_state &= ~(1 << pin);
 80006cc:	79bb      	ldrb	r3, [r7, #6]
 80006ce:	2201      	movs	r2, #1
 80006d0:	fa02 f303 	lsl.w	r3, r2, r3
 80006d4:	b25b      	sxtb	r3, r3
 80006d6:	43db      	mvns	r3, r3
 80006d8:	b25a      	sxtb	r2, r3
 80006da:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <MCP23S17_SetPin+0xcc>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b25b      	sxtb	r3, r3
 80006e0:	4013      	ands	r3, r2
 80006e2:	b25b      	sxtb	r3, r3
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <MCP23S17_SetPin+0xcc>)
 80006e8:	701a      	strb	r2, [r3, #0]
		MCP23S17_WriteReg(OLATB, b_state);
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MCP23S17_SetPin+0xcc>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	4619      	mov	r1, r3
 80006f0:	2015      	movs	r0, #21
 80006f2:	f7ff ff53 	bl	800059c <MCP23S17_WriteReg>
 80006f6:	e000      	b.n	80006fa <MCP23S17_SetPin+0xc2>
		return ;
 80006f8:	bf00      	nop
	}
}
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000000 	.word	0x20000000
 8000704:	20000001 	.word	0x20000001

08000708 <sgtl5000_i2c_read_register>:
		SGTL5000_DAP_COEF_WR_A2_LSB

};

HAL_StatusTypeDef sgtl5000_i2c_read_register(I2C_HandleTypeDef *hi2c, sgtl5000_registers_t reg_address, uint16_t * p_data)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	@ 0x28
 800070c:	af04      	add	r7, sp, #16
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	460b      	mov	r3, r1
 8000712:	607a      	str	r2, [r7, #4]
 8000714:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef ret;

	uint8_t buffer[2];

	ret = HAL_I2C_Mem_Read (
 8000716:	897a      	ldrh	r2, [r7, #10]
 8000718:	f04f 33ff 	mov.w	r3, #4294967295
 800071c:	9302      	str	r3, [sp, #8]
 800071e:	2302      	movs	r3, #2
 8000720:	9301      	str	r3, [sp, #4]
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	2302      	movs	r3, #2
 800072a:	2114      	movs	r1, #20
 800072c:	68f8      	ldr	r0, [r7, #12]
 800072e:	f001 fe9f 	bl	8002470 <HAL_I2C_Mem_Read>
 8000732:	4603      	mov	r3, r0
 8000734:	75fb      	strb	r3, [r7, #23]
			buffer,
			2,
			HAL_MAX_DELAY		// Problems if I put other than HAL_MAX_DELAY WTF
	);

	*p_data = (buffer[0] << 8) | buffer[1];
 8000736:	7d3b      	ldrb	r3, [r7, #20]
 8000738:	b21b      	sxth	r3, r3
 800073a:	021b      	lsls	r3, r3, #8
 800073c:	b21a      	sxth	r2, r3
 800073e:	7d7b      	ldrb	r3, [r7, #21]
 8000740:	b21b      	sxth	r3, r3
 8000742:	4313      	orrs	r3, r2
 8000744:	b21b      	sxth	r3, r3
 8000746:	b29a      	uxth	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	801a      	strh	r2, [r3, #0]

	return ret;
 800074c:	7dfb      	ldrb	r3, [r7, #23]
}
 800074e:	4618      	mov	r0, r3
 8000750:	3718      	adds	r7, #24
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <sgtl5000_i2c_write_register>:

HAL_StatusTypeDef sgtl5000_i2c_write_register(I2C_HandleTypeDef *hi2c, sgtl5000_registers_t reg_address, uint16_t data)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b088      	sub	sp, #32
 800075a:	af04      	add	r7, sp, #16
 800075c:	6078      	str	r0, [r7, #4]
 800075e:	460b      	mov	r3, r1
 8000760:	807b      	strh	r3, [r7, #2]
 8000762:	4613      	mov	r3, r2
 8000764:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef ret;
	uint8_t buffer[2];

	buffer[0] = (data >> 8) & 0xFF;
 8000766:	883b      	ldrh	r3, [r7, #0]
 8000768:	0a1b      	lsrs	r3, r3, #8
 800076a:	b29b      	uxth	r3, r3
 800076c:	b2db      	uxtb	r3, r3
 800076e:	733b      	strb	r3, [r7, #12]
	buffer[1] = data & 0xFF;
 8000770:	883b      	ldrh	r3, [r7, #0]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	737b      	strb	r3, [r7, #13]

	ret = HAL_I2C_Mem_Write(
 8000776:	887a      	ldrh	r2, [r7, #2]
 8000778:	f04f 33ff 	mov.w	r3, #4294967295
 800077c:	9302      	str	r3, [sp, #8]
 800077e:	2302      	movs	r3, #2
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	2302      	movs	r3, #2
 800078a:	2114      	movs	r1, #20
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f001 fd5b 	bl	8002248 <HAL_I2C_Mem_Write>
 8000792:	4603      	mov	r3, r0
 8000794:	73fb      	strb	r3, [r7, #15]
			buffer,
			2,
			HAL_MAX_DELAY		// WTF
	);

	return ret;
 8000796:	7bfb      	ldrb	r3, [r7, #15]
}
 8000798:	4618      	mov	r0, r3
 800079a:	3710      	adds	r7, #16
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <sgtl5000_i2c_set_bit>:

HAL_StatusTypeDef sgtl5000_i2c_set_bit(I2C_HandleTypeDef *hi2c, sgtl5000_registers_t reg_address, uint16_t mask)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	807b      	strh	r3, [r7, #2]
 80007ac:	4613      	mov	r3, r2
 80007ae:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef ret;
	uint16_t data;
	ret = sgtl5000_i2c_read_register(hi2c, reg_address, &data);
 80007b0:	f107 020c 	add.w	r2, r7, #12
 80007b4:	887b      	ldrh	r3, [r7, #2]
 80007b6:	4619      	mov	r1, r3
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f7ff ffa5 	bl	8000708 <sgtl5000_i2c_read_register>
 80007be:	4603      	mov	r3, r0
 80007c0:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK)
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <sgtl5000_i2c_set_bit+0x2c>
	{
		return ret;
 80007c8:	7bfb      	ldrb	r3, [r7, #15]
 80007ca:	e00d      	b.n	80007e8 <sgtl5000_i2c_set_bit+0x48>
	}

	data |= mask;
 80007cc:	89ba      	ldrh	r2, [r7, #12]
 80007ce:	883b      	ldrh	r3, [r7, #0]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	81bb      	strh	r3, [r7, #12]

	ret = sgtl5000_i2c_write_register(hi2c, reg_address, data);
 80007d6:	89ba      	ldrh	r2, [r7, #12]
 80007d8:	887b      	ldrh	r3, [r7, #2]
 80007da:	4619      	mov	r1, r3
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ffba 	bl	8000756 <sgtl5000_i2c_write_register>
 80007e2:	4603      	mov	r3, r0
 80007e4:	73fb      	strb	r3, [r7, #15]
	return ret;
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <sgtl5000_i2c_clear_bit>:

HAL_StatusTypeDef sgtl5000_i2c_clear_bit(I2C_HandleTypeDef *hi2c, sgtl5000_registers_t reg_address, uint16_t mask)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	807b      	strh	r3, [r7, #2]
 80007fc:	4613      	mov	r3, r2
 80007fe:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef ret;
	uint16_t data;
	ret = sgtl5000_i2c_read_register(hi2c, reg_address, &data);
 8000800:	f107 020c 	add.w	r2, r7, #12
 8000804:	887b      	ldrh	r3, [r7, #2]
 8000806:	4619      	mov	r1, r3
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff ff7d 	bl	8000708 <sgtl5000_i2c_read_register>
 800080e:	4603      	mov	r3, r0
 8000810:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK)
 8000812:	7bfb      	ldrb	r3, [r7, #15]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <sgtl5000_i2c_clear_bit+0x2c>
	{
		return ret;
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	e012      	b.n	8000842 <sgtl5000_i2c_clear_bit+0x52>
	}

	data &= (~mask);
 800081c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000820:	43db      	mvns	r3, r3
 8000822:	b21a      	sxth	r2, r3
 8000824:	89bb      	ldrh	r3, [r7, #12]
 8000826:	b21b      	sxth	r3, r3
 8000828:	4013      	ands	r3, r2
 800082a:	b21b      	sxth	r3, r3
 800082c:	b29b      	uxth	r3, r3
 800082e:	81bb      	strh	r3, [r7, #12]

	ret = sgtl5000_i2c_write_register(hi2c, reg_address, data);
 8000830:	89ba      	ldrh	r2, [r7, #12]
 8000832:	887b      	ldrh	r3, [r7, #2]
 8000834:	4619      	mov	r1, r3
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f7ff ff8d 	bl	8000756 <sgtl5000_i2c_write_register>
 800083c:	4603      	mov	r3, r0
 800083e:	73fb      	strb	r3, [r7, #15]
	return ret;
 8000840:	7bfb      	ldrb	r3, [r7, #15]
}
 8000842:	4618      	mov	r0, r3
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <sgtl5000_init>:

HAL_StatusTypeDef sgtl5000_init(I2C_HandleTypeDef *hi2c)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	b084      	sub	sp, #16
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 8000852:	2300      	movs	r3, #0
 8000854:	73fb      	strb	r3, [r7, #15]

	// NOTE: This next Write call is needed ONLY if VDDD is
	// externally driven
	// Turn off startup power supplies to save power (Clear bit 12 and 13)
	// Write CHIP_ANA_POWER 0x4260
	mask = (1 << 12) | (1 << 13);
 8000856:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800085a:	81bb      	strh	r3, [r7, #12]
	sgtl5000_i2c_clear_bit(hi2c, SGTL5000_CHIP_ANA_POWER, mask);
 800085c:	89bb      	ldrh	r3, [r7, #12]
 800085e:	461a      	mov	r2, r3
 8000860:	2130      	movs	r1, #48	@ 0x30
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff ffc4 	bl	80007f0 <sgtl5000_i2c_clear_bit>
	// NOTE: The next modify call is only needed if both VDDA and
	// VDDIO are greater than 3.1 V
	// Configure the charge pump to use the VDDIO rail (set bit 5 and bit 6)
	// Write CHIP_LINREG_CTRL 0x006C
	// VDDA and VDDIO = 3.3V so it IS necessary
	mask = (1 << 5) | (1 << 6);
 8000868:	2360      	movs	r3, #96	@ 0x60
 800086a:	81bb      	strh	r3, [r7, #12]
	sgtl5000_i2c_set_bit(hi2c, SGTL5000_CHIP_LINREG_CTRL, mask);
 800086c:	89bb      	ldrh	r3, [r7, #12]
 800086e:	461a      	mov	r2, r3
 8000870:	2126      	movs	r1, #38	@ 0x26
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff ff94 	bl	80007a0 <sgtl5000_i2c_set_bit>
	// on the VDDA voltage value.
	// Set ground, ADC, DAC reference voltage (bits 8:4). The value should
	// be set to VDDA/2. This example assumes VDDA = 1.8 V. VDDA/2 = 0.9 V.
	// The bias current should be set to 50% of the nominal value (bits 3:1)
	// Write CHIP_REF_CTRL 0x004E
	mask = 0x01FF;	// VAG_VAL = 1.575V, BIAS_CTRL = -50%, SMALL_POP = 1
 8000878:	f240 13ff 	movw	r3, #511	@ 0x1ff
 800087c:	81bb      	strh	r3, [r7, #12]
	sgtl5000_i2c_write_register(hi2c, SGTL5000_CHIP_REF_CTRL, mask);
 800087e:	89bb      	ldrh	r3, [r7, #12]
 8000880:	461a      	mov	r2, r3
 8000882:	2128      	movs	r1, #40	@ 0x28
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff ff66 	bl	8000756 <sgtl5000_i2c_write_register>
	// Set LINEOUT reference voltage to VDDIO/2 (1.65 V) (bits 5:0)
	// and bias current (bits 11:8) to the recommended value of 0.36 mA
	// for 10 kOhm load with 1.0 nF capacitance
	// Write CHIP_LINE_OUT_CTRL 0x0322
//	mask = 0x0322;	// LO_VAGCNTRL = 1.65V, OUT_CURRENT = 0.36mA (?)
	mask = 0x031E;
 800088a:	f240 331e 	movw	r3, #798	@ 0x31e
 800088e:	81bb      	strh	r3, [r7, #12]
	sgtl5000_i2c_write_register(hi2c, SGTL5000_CHIP_LINE_OUT_CTRL, mask);
 8000890:	89bb      	ldrh	r3, [r7, #12]
 8000892:	461a      	mov	r2, r3
 8000894:	212c      	movs	r1, #44	@ 0x2c
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f7ff ff5d 	bl	8000756 <sgtl5000_i2c_write_register>

	// Enable short detect mode for headphone left/right
	// and center channel and set short detect current trip level
	// to 75 mA
	// Write CHIP_SHORT_CTRL 0x1106
	mask = 0x1106;	// MODE_CM = 2, MODE_LR = 1, LVLADJC = 200mA, LVLADJL = 75mA, LVLADJR = 50mA
 800089c:	f241 1306 	movw	r3, #4358	@ 0x1106
 80008a0:	81bb      	strh	r3, [r7, #12]
	sgtl5000_i2c_write_register(hi2c, SGTL5000_CHIP_SHORT_CTRL, mask);
 80008a2:	89bb      	ldrh	r3, [r7, #12]
 80008a4:	461a      	mov	r2, r3
 80008a6:	213c      	movs	r1, #60	@ 0x3c
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff ff54 	bl	8000756 <sgtl5000_i2c_write_register>

	// Enable Zero-cross detect if needed for HP_OUT (bit 5) and ADC (bit 1)
	// Write CHIP_ANA_CTRL 0x0133
	mask = 0x0004;	// Unmute all + SELECT_ADC = LINEIN
 80008ae:	2304      	movs	r3, #4
 80008b0:	81bb      	strh	r3, [r7, #12]
//	mask = 0x0000;	// Unmute all + SELECT_ADC = MIC
	sgtl5000_i2c_write_register(hi2c, SGTL5000_CHIP_ANA_CTRL, mask);
 80008b2:	89bb      	ldrh	r3, [r7, #12]
 80008b4:	461a      	mov	r2, r3
 80008b6:	2124      	movs	r1, #36	@ 0x24
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f7ff ff4c 	bl	8000756 <sgtl5000_i2c_write_register>

	//------------Power up Inputs/Outputs/Digital Blocks---------
	// Power up LINEOUT, HP, ADC, DAC
	// Write CHIP_ANA_POWER 0x6AFF
	mask = 0x6AFF;	// LINEOUT_POWERUP, ADC_POWERUP, CAPLESS_HEADPHONE_POWERUP, DAC_POWERUP, HEADPHONE_POWERUP, REFTOP_POWERUP, ADC_MONO = stereo
 80008be:	f646 23ff 	movw	r3, #27391	@ 0x6aff
 80008c2:	81bb      	strh	r3, [r7, #12]
	// VAG_POWERUP, VCOAMP_POWERUP = 0, LINREG_D_POWERUP, PLL_POWERUP = 0, VDDC_CHRGPMP_POWERUP, STARTUP_POWERUP = 0, LINREG_SIMPLE_POWERUP,
	// DAC_MONO = stereo
	sgtl5000_i2c_write_register(hi2c, SGTL5000_CHIP_ANA_POWER, mask);
 80008c4:	89bb      	ldrh	r3, [r7, #12]
 80008c6:	461a      	mov	r2, r3
 80008c8:	2130      	movs	r1, #48	@ 0x30
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff ff43 	bl	8000756 <sgtl5000_i2c_write_register>
	// Power up desired digital blocks
	// I2S_IN (bit 0), I2S_OUT (bit 1), DAP (bit 4), DAC (bit 5),
	// ADC (bit 6) are powered on
	// Write CHIP_DIG_POWER 0x0073
	mask = 0x0073;	// I2S_IN_POWERUP, I2S_OUT_POWERUP, DAP_POWERUP, DAC_POWERUP, ADC_POWERUP
 80008d0:	2373      	movs	r3, #115	@ 0x73
 80008d2:	81bb      	strh	r3, [r7, #12]
	sgtl5000_i2c_write_register(hi2c, SGTL5000_CHIP_DIG_POWER, mask);
 80008d4:	89bb      	ldrh	r3, [r7, #12]
 80008d6:	461a      	mov	r2, r3
 80008d8:	2102      	movs	r1, #2
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f7ff ff3b 	bl	8000756 <sgtl5000_i2c_write_register>
	// Value = (int)(40*log(VAG_VAL/LO_VAGCNTRL) + 15)
	// Assuming VAG_VAL and LO_VAGCNTRL is set to 0.9 V and
	// 1.65 V respectively, the // left LO vol (bits 12:8) and right LO
	// volume (bits 4:0) value should be set // to 5
	// Write CHIP_LINE_OUT_VOL 0x0505
	mask = 0x1111;	// TODO recalculer
 80008e0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80008e4:	81bb      	strh	r3, [r7, #12]
	sgtl5000_i2c_write_register(hi2c, SGTL5000_CHIP_LINE_OUT_VOL, mask);
 80008e6:	89bb      	ldrh	r3, [r7, #12]
 80008e8:	461a      	mov	r2, r3
 80008ea:	212e      	movs	r1, #46	@ 0x2e
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f7ff ff32 	bl	8000756 <sgtl5000_i2c_write_register>

	// Configure SYS_FS clock to 48 kHz
	// Configure MCLK_FREQ to 256*Fs
	// Modify CHIP_CLK_CTRL->SYS_FS 0x0002 // bits 3:2
	// Modify CHIP_CLK_CTRL->MCLK_FREQ 0x0000 // bits 1:0
	mask = 0x0004;	// SYS_FS = 48kHz
 80008f2:	2304      	movs	r3, #4
 80008f4:	81bb      	strh	r3, [r7, #12]
	sgtl5000_i2c_write_register(hi2c, SGTL5000_CHIP_CLK_CTRL, mask);
 80008f6:	89bb      	ldrh	r3, [r7, #12]
 80008f8:	461a      	mov	r2, r3
 80008fa:	2104      	movs	r1, #4
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff ff2a 	bl	8000756 <sgtl5000_i2c_write_register>
	// Configure the I2S clocks in master mode
	// NOTE: I2S LRCLK is same as the system sample clock
	// Modify CHIP_I2S_CTRL->MS 0x0001 // bit 7
	// Non, on reste en slave!
	mask = 0x0130;	// DLEN = 16 bits
 8000902:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8000906:	81bb      	strh	r3, [r7, #12]
	sgtl5000_i2c_write_register(hi2c, SGTL5000_CHIP_I2S_CTRL, mask);
 8000908:	89bb      	ldrh	r3, [r7, #12]
 800090a:	461a      	mov	r2, r3
 800090c:	2106      	movs	r1, #6
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f7ff ff21 	bl	8000756 <sgtl5000_i2c_write_register>
	// Laissons tout par défaut pour l'instant
//	mask = 0x0000;	// ADC -> DAC
//	sgtl5000_i2c_write_register(hi2c, SGTL5000_CHIP_SSS_CTRL, mask);

	/* Le reste */
	mask = 0x0000;	// Unmute
 8000914:	2300      	movs	r3, #0
 8000916:	81bb      	strh	r3, [r7, #12]
	sgtl5000_i2c_write_register(hi2c, SGTL5000_CHIP_ADCDAC_CTRL, mask);
 8000918:	89bb      	ldrh	r3, [r7, #12]
 800091a:	461a      	mov	r2, r3
 800091c:	210e      	movs	r1, #14
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff ff19 	bl	8000756 <sgtl5000_i2c_write_register>

	mask = 0x3C3C;
 8000924:	f643 433c 	movw	r3, #15420	@ 0x3c3c
 8000928:	81bb      	strh	r3, [r7, #12]
//	mask = 0x4747;
	sgtl5000_i2c_write_register(hi2c, SGTL5000_CHIP_DAC_VOL, mask);
 800092a:	89bb      	ldrh	r3, [r7, #12]
 800092c:	461a      	mov	r2, r3
 800092e:	2110      	movs	r1, #16
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff ff10 	bl	8000756 <sgtl5000_i2c_write_register>

	mask = 0x0251;	// BIAS_RESISTOR = 2, BIAS_VOLT = 5, GAIN = 1
 8000936:	f240 2351 	movw	r3, #593	@ 0x251
 800093a:	81bb      	strh	r3, [r7, #12]
	sgtl5000_i2c_write_register(hi2c, SGTL5000_CHIP_MIC_CTRL, mask);
 800093c:	89bb      	ldrh	r3, [r7, #12]
 800093e:	461a      	mov	r2, r3
 8000940:	212a      	movs	r1, #42	@ 0x2a
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff ff07 	bl	8000756 <sgtl5000_i2c_write_register>
//		uint16_t reg = 0;
//		sgtl5000_i2c_read_register(hi2c, register_map[i], &reg);
//		printf("%02d: [0x%04x] = 0x%04x\r\n", i, register_map[i], reg);
//	}

	return ret;
 8000948:	7bfb      	ldrb	r3, [r7, #15]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800095a:	4b10      	ldr	r3, [pc, #64]	@ (800099c <MX_DMA_Init+0x48>)
 800095c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800095e:	4a0f      	ldr	r2, [pc, #60]	@ (800099c <MX_DMA_Init+0x48>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6493      	str	r3, [r2, #72]	@ 0x48
 8000966:	4b0d      	ldr	r3, [pc, #52]	@ (800099c <MX_DMA_Init+0x48>)
 8000968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	2100      	movs	r1, #0
 8000976:	2010      	movs	r0, #16
 8000978:	f000 ffd9 	bl	800192e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800097c:	2010      	movs	r0, #16
 800097e:	f000 fff2 	bl	8001966 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2100      	movs	r1, #0
 8000986:	2011      	movs	r0, #17
 8000988:	f000 ffd1 	bl	800192e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800098c:	2011      	movs	r0, #17
 800098e:	f000 ffea 	bl	8001966 <HAL_NVIC_EnableIRQ>

}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40021000 	.word	0x40021000

080009a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	@ 0x28
 80009a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	4b35      	ldr	r3, [pc, #212]	@ (8000a8c <MX_GPIO_Init+0xec>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ba:	4a34      	ldr	r2, [pc, #208]	@ (8000a8c <MX_GPIO_Init+0xec>)
 80009bc:	f043 0304 	orr.w	r3, r3, #4
 80009c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009c2:	4b32      	ldr	r3, [pc, #200]	@ (8000a8c <MX_GPIO_Init+0xec>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c6:	f003 0304 	and.w	r3, r3, #4
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ce:	4b2f      	ldr	r3, [pc, #188]	@ (8000a8c <MX_GPIO_Init+0xec>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d2:	4a2e      	ldr	r2, [pc, #184]	@ (8000a8c <MX_GPIO_Init+0xec>)
 80009d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009da:	4b2c      	ldr	r3, [pc, #176]	@ (8000a8c <MX_GPIO_Init+0xec>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	4b29      	ldr	r3, [pc, #164]	@ (8000a8c <MX_GPIO_Init+0xec>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ea:	4a28      	ldr	r2, [pc, #160]	@ (8000a8c <MX_GPIO_Init+0xec>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009f2:	4b26      	ldr	r3, [pc, #152]	@ (8000a8c <MX_GPIO_Init+0xec>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	4b23      	ldr	r3, [pc, #140]	@ (8000a8c <MX_GPIO_Init+0xec>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a02:	4a22      	ldr	r2, [pc, #136]	@ (8000a8c <MX_GPIO_Init+0xec>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a0a:	4b20      	ldr	r3, [pc, #128]	@ (8000a8c <MX_GPIO_Init+0xec>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nRST_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2121      	movs	r1, #33	@ 0x21
 8000a1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a1e:	f001 fb5f 	bl	80020e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nCS_MCP23S17_GPIO_Port, nCS_MCP23S17_Pin, GPIO_PIN_SET);
 8000a22:	2201      	movs	r2, #1
 8000a24:	2180      	movs	r1, #128	@ 0x80
 8000a26:	481a      	ldr	r0, [pc, #104]	@ (8000a90 <MX_GPIO_Init+0xf0>)
 8000a28:	f001 fb5a 	bl	80020e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a32:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	4814      	ldr	r0, [pc, #80]	@ (8000a94 <MX_GPIO_Init+0xf4>)
 8000a44:	f001 f9a2 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : nRST_Pin LD2_Pin */
  GPIO_InitStruct.Pin = nRST_Pin|LD2_Pin;
 8000a48:	2321      	movs	r3, #33	@ 0x21
 8000a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a62:	f001 f993 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : nCS_MCP23S17_Pin */
  GPIO_InitStruct.Pin = nCS_MCP23S17_Pin;
 8000a66:	2380      	movs	r3, #128	@ 0x80
 8000a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(nCS_MCP23S17_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4804      	ldr	r0, [pc, #16]	@ (8000a90 <MX_GPIO_Init+0xf0>)
 8000a7e:	f001 f985 	bl	8001d8c <HAL_GPIO_Init>

}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	@ 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	48000400 	.word	0x48000400
 8000a94:	48000800 	.word	0x48000800

08000a98 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b0c <MX_I2C2_Init+0x74>)
 8000a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000b10 <MX_I2C2_Init+0x78>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b0c <MX_I2C2_Init+0x74>)
 8000aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b14 <MX_I2C2_Init+0x7c>)
 8000aa6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000aa8:	4b18      	ldr	r3, [pc, #96]	@ (8000b0c <MX_I2C2_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aae:	4b17      	ldr	r3, [pc, #92]	@ (8000b0c <MX_I2C2_Init+0x74>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab4:	4b15      	ldr	r3, [pc, #84]	@ (8000b0c <MX_I2C2_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000aba:	4b14      	ldr	r3, [pc, #80]	@ (8000b0c <MX_I2C2_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ac0:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <MX_I2C2_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <MX_I2C2_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <MX_I2C2_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ad2:	480e      	ldr	r0, [pc, #56]	@ (8000b0c <MX_I2C2_Init+0x74>)
 8000ad4:	f001 fb1c 	bl	8002110 <HAL_I2C_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ade:	f000 fa20 	bl	8000f22 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4809      	ldr	r0, [pc, #36]	@ (8000b0c <MX_I2C2_Init+0x74>)
 8000ae6:	f002 f89f 	bl	8002c28 <HAL_I2CEx_ConfigAnalogFilter>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000af0:	f000 fa17 	bl	8000f22 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000af4:	2100      	movs	r1, #0
 8000af6:	4805      	ldr	r0, [pc, #20]	@ (8000b0c <MX_I2C2_Init+0x74>)
 8000af8:	f002 f8e1 	bl	8002cbe <HAL_I2CEx_ConfigDigitalFilter>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b02:	f000 fa0e 	bl	8000f22 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	2000008c 	.word	0x2000008c
 8000b10:	40005800 	.word	0x40005800
 8000b14:	10d19ce4 	.word	0x10d19ce4

08000b18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b0ac      	sub	sp, #176	@ 0xb0
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2288      	movs	r2, #136	@ 0x88
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f006 faa9 	bl	8007090 <memset>
  if(i2cHandle->Instance==I2C2)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a21      	ldr	r2, [pc, #132]	@ (8000bc8 <HAL_I2C_MspInit+0xb0>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d13b      	bne.n	8000bc0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000b48:	2380      	movs	r3, #128	@ 0x80
 8000b4a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4618      	mov	r0, r3
 8000b56:	f002 ff63 	bl	8003a20 <HAL_RCCEx_PeriphCLKConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000b60:	f000 f9df 	bl	8000f22 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b64:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <HAL_I2C_MspInit+0xb4>)
 8000b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b68:	4a18      	ldr	r2, [pc, #96]	@ (8000bcc <HAL_I2C_MspInit+0xb4>)
 8000b6a:	f043 0302 	orr.w	r3, r3, #2
 8000b6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b70:	4b16      	ldr	r3, [pc, #88]	@ (8000bcc <HAL_I2C_MspInit+0xb4>)
 8000b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b74:	f003 0302 	and.w	r3, r3, #2
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000b7c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000b80:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b84:	2312      	movs	r3, #18
 8000b86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b90:	2303      	movs	r3, #3
 8000b92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000b96:	2304      	movs	r3, #4
 8000b98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480b      	ldr	r0, [pc, #44]	@ (8000bd0 <HAL_I2C_MspInit+0xb8>)
 8000ba4:	f001 f8f2 	bl	8001d8c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <HAL_I2C_MspInit+0xb4>)
 8000baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <HAL_I2C_MspInit+0xb4>)
 8000bae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bb4:	4b05      	ldr	r3, [pc, #20]	@ (8000bcc <HAL_I2C_MspInit+0xb4>)
 8000bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000bc0:	bf00      	nop
 8000bc2:	37b0      	adds	r7, #176	@ 0xb0
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40005800 	.word	0x40005800
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	48000400 	.word	0x48000400

08000bd4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int	__io_putchar(int t)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&t, 1, 100);
 8000bdc:	1d39      	adds	r1, r7, #4
 8000bde:	2364      	movs	r3, #100	@ 0x64
 8000be0:	2201      	movs	r2, #1
 8000be2:	4804      	ldr	r0, [pc, #16]	@ (8000bf4 <__io_putchar+0x20>)
 8000be4:	f005 fb4a 	bl	800627c <HAL_UART_Transmit>
	return (t);
 8000be8:	687b      	ldr	r3, [r7, #4]
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000474 	.word	0x20000474

08000bf8 <HAL_SAI_RxCpltCallback>:

static int rx_cplt_flag = 0;
static int rx_cplt_counter = 0;

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	if (SAI2_Block_B == hsai->Instance)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a10      	ldr	r2, [pc, #64]	@ (8000c48 <HAL_SAI_RxCpltCallback+0x50>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d113      	bne.n	8000c32 <HAL_SAI_RxCpltCallback+0x3a>
	{
		rx_cplt_flag = 1;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <HAL_SAI_RxCpltCallback+0x54>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	601a      	str	r2, [r3, #0]

		for (int i = SAI_RX_BUFFER_LENGTH / 2 ; i < SAI_RX_BUFFER_LENGTH ; i++)
 8000c10:	2330      	movs	r3, #48	@ 0x30
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	e00a      	b.n	8000c2c <HAL_SAI_RxCpltCallback+0x34>
		{
			sai_tx_buffer[i] = sai_rx_buffer[i];
 8000c16:	4a0e      	ldr	r2, [pc, #56]	@ (8000c50 <HAL_SAI_RxCpltCallback+0x58>)
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8000c1e:	4a0d      	ldr	r2, [pc, #52]	@ (8000c54 <HAL_SAI_RxCpltCallback+0x5c>)
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = SAI_RX_BUFFER_LENGTH / 2 ; i < SAI_RX_BUFFER_LENGTH ; i++)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	2b5f      	cmp	r3, #95	@ 0x5f
 8000c30:	ddf1      	ble.n	8000c16 <HAL_SAI_RxCpltCallback+0x1e>
		}
	}
	rx_cplt_counter++;
 8000c32:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <HAL_SAI_RxCpltCallback+0x60>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	3301      	adds	r3, #1
 8000c38:	4a07      	ldr	r2, [pc, #28]	@ (8000c58 <HAL_SAI_RxCpltCallback+0x60>)
 8000c3a:	6013      	str	r3, [r2, #0]
}
 8000c3c:	bf00      	nop
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	40015824 	.word	0x40015824
 8000c4c:	20000260 	.word	0x20000260
 8000c50:	200001a0 	.word	0x200001a0
 8000c54:	200000e0 	.word	0x200000e0
 8000c58:	20000264 	.word	0x20000264

08000c5c <HAL_SAI_RxHalfCpltCallback>:
static int rx_half_cplt_flag = 0;
static int rx_half_counter = 0;
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	if (SAI2_Block_B == hsai->Instance)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a10      	ldr	r2, [pc, #64]	@ (8000cac <HAL_SAI_RxHalfCpltCallback+0x50>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d118      	bne.n	8000ca0 <HAL_SAI_RxHalfCpltCallback+0x44>
	{
		rx_half_cplt_flag = 1;
 8000c6e:	4b10      	ldr	r3, [pc, #64]	@ (8000cb0 <HAL_SAI_RxHalfCpltCallback+0x54>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	601a      	str	r2, [r3, #0]

		for (int i = 0 ; i < SAI_RX_BUFFER_LENGTH / 2 ; i++)
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	e00a      	b.n	8000c90 <HAL_SAI_RxHalfCpltCallback+0x34>
		{
			sai_tx_buffer[i] = sai_rx_buffer[i];
 8000c7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000cb4 <HAL_SAI_RxHalfCpltCallback+0x58>)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8000c82:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb8 <HAL_SAI_RxHalfCpltCallback+0x5c>)
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i = 0 ; i < SAI_RX_BUFFER_LENGTH / 2 ; i++)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2b2f      	cmp	r3, #47	@ 0x2f
 8000c94:	ddf1      	ble.n	8000c7a <HAL_SAI_RxHalfCpltCallback+0x1e>
		}
		rx_half_counter++;
 8000c96:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <HAL_SAI_RxHalfCpltCallback+0x60>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	4a07      	ldr	r2, [pc, #28]	@ (8000cbc <HAL_SAI_RxHalfCpltCallback+0x60>)
 8000c9e:	6013      	str	r3, [r2, #0]
	}
}
 8000ca0:	bf00      	nop
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	40015824 	.word	0x40015824
 8000cb0:	20000268 	.word	0x20000268
 8000cb4:	200001a0 	.word	0x200001a0
 8000cb8:	200000e0 	.word	0x200000e0
 8000cbc:	2000026c 	.word	0x2000026c

08000cc0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	@ 0x28
 8000cc4:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000cc6:	f000 fcdb 	bl	8001680 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000cca:	f000 f8af 	bl	8000e2c <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000cce:	f000 f8fe 	bl	8000ece <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000cd2:	f7ff fe65 	bl	80009a0 <MX_GPIO_Init>
	MX_DMA_Init();
 8000cd6:	f7ff fe3d 	bl	8000954 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000cda:	f000 fc1b 	bl	8001514 <MX_USART2_UART_Init>
	MX_SPI3_Init();
 8000cde:	f000 fa5b 	bl	8001198 <MX_SPI3_Init>
	MX_I2C2_Init();
 8000ce2:	f7ff fed9 	bl	8000a98 <MX_I2C2_Init>
	MX_SAI2_Init();
 8000ce6:	f000 f923 	bl	8000f30 <MX_SAI2_Init>
	/* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(nRST_GPIO_Port, nRST_Pin, 1);
 8000cea:	2201      	movs	r2, #1
 8000cec:	2101      	movs	r1, #1
 8000cee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf2:	f001 f9f5 	bl	80020e0 <HAL_GPIO_WritePin>
	MCP23S17_Init(&hspi3);
 8000cf6:	4843      	ldr	r0, [pc, #268]	@ (8000e04 <main+0x144>)
 8000cf8:	f7ff fc7a 	bl	80005f0 <MCP23S17_Init>
	sgtl5000_init(&hi2c2);
 8000cfc:	4842      	ldr	r0, [pc, #264]	@ (8000e08 <main+0x148>)
 8000cfe:	f7ff fda4 	bl	800084a <sgtl5000_init>
	HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*) sai_rx_buffer, SAI_RX_BUFFER_LENGTH / 2);
 8000d02:	2230      	movs	r2, #48	@ 0x30
 8000d04:	4941      	ldr	r1, [pc, #260]	@ (8000e0c <main+0x14c>)
 8000d06:	4842      	ldr	r0, [pc, #264]	@ (8000e10 <main+0x150>)
 8000d08:	f004 fbf8 	bl	80054fc <HAL_SAI_Receive_DMA>
	HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*) sai_tx_buffer, SAI_TX_BUFFER_LENGTH / 2);
 8000d0c:	2230      	movs	r2, #48	@ 0x30
 8000d0e:	4941      	ldr	r1, [pc, #260]	@ (8000e14 <main+0x154>)
 8000d10:	4841      	ldr	r0, [pc, #260]	@ (8000e18 <main+0x158>)
 8000d12:	f004 fb43 	bl	800539c <HAL_SAI_Transmit_DMA>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint8_t led_max;
	int ave_counter = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
	int ave = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
	int ave_max = 100;
 8000d1e:	2364      	movs	r3, #100	@ 0x64
 8000d20:	607b      	str	r3, [r7, #4]
	while (1)
	{
		uint8_t data[2];
		HAL_I2C_Mem_Read(&hi2c2, 0x14, 0x0000, 2, data, 2, 0x400);
 8000d22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d26:	9302      	str	r3, [sp, #8]
 8000d28:	2302      	movs	r3, #2
 8000d2a:	9301      	str	r3, [sp, #4]
 8000d2c:	463b      	mov	r3, r7
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	2302      	movs	r3, #2
 8000d32:	2200      	movs	r2, #0
 8000d34:	2114      	movs	r1, #20
 8000d36:	4834      	ldr	r0, [pc, #208]	@ (8000e08 <main+0x148>)
 8000d38:	f001 fb9a 	bl	8002470 <HAL_I2C_Mem_Read>
		printf("I2C read = 0x%X, 0x%X\n\r", data[0], data[1]);
 8000d3c:	783b      	ldrb	r3, [r7, #0]
 8000d3e:	4619      	mov	r1, r3
 8000d40:	787b      	ldrb	r3, [r7, #1]
 8000d42:	461a      	mov	r2, r3
 8000d44:	4835      	ldr	r0, [pc, #212]	@ (8000e1c <main+0x15c>)
 8000d46:	f006 f8b9 	bl	8006ebc <iprintf>
		if (rx_cplt_flag)
 8000d4a:	4b35      	ldr	r3, [pc, #212]	@ (8000e20 <main+0x160>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d0e7      	beq.n	8000d22 <main+0x62>
		{
			rx_cplt_flag = 0;
 8000d52:	4b33      	ldr	r3, [pc, #204]	@ (8000e20 <main+0x160>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]

			ave += sai_rx_buffer[0];
 8000d58:	4b2c      	ldr	r3, [pc, #176]	@ (8000e0c <main+0x14c>)
 8000d5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	4413      	add	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
			ave_counter++;
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	613b      	str	r3, [r7, #16]

			if (ave_counter == ave_max)
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d1d6      	bne.n	8000d22 <main+0x62>
			{

				ave /= ave_max;
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d7c:	60fb      	str	r3, [r7, #12]
				if (ave < 0) ave = -ave;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	da02      	bge.n	8000d8a <main+0xca>
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	425b      	negs	r3, r3
 8000d88:	60fb      	str	r3, [r7, #12]

				led_max = (ave/5 * 8) / 100;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	4a25      	ldr	r2, [pc, #148]	@ (8000e24 <main+0x164>)
 8000d8e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d92:	1052      	asrs	r2, r2, #1
 8000d94:	17db      	asrs	r3, r3, #31
 8000d96:	1ad3      	subs	r3, r2, r3
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	4a23      	ldr	r2, [pc, #140]	@ (8000e28 <main+0x168>)
 8000d9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000da0:	1152      	asrs	r2, r2, #5
 8000da2:	17db      	asrs	r3, r3, #31
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	75fb      	strb	r3, [r7, #23]
				if (led_max > 8) led_max = 8;
 8000da8:	7dfb      	ldrb	r3, [r7, #23]
 8000daa:	2b08      	cmp	r3, #8
 8000dac:	d901      	bls.n	8000db2 <main+0xf2>
 8000dae:	2308      	movs	r3, #8
 8000db0:	75fb      	strb	r3, [r7, #23]
				for (uint8_t i = 0; i < 8; i++)
 8000db2:	2300      	movs	r3, #0
 8000db4:	72fb      	strb	r3, [r7, #11]
 8000db6:	e01c      	b.n	8000df2 <main+0x132>
				{
					MCP23S17_SetPin('A', i, i < led_max);
 8000db8:	7afa      	ldrb	r2, [r7, #11]
 8000dba:	7dfb      	ldrb	r3, [r7, #23]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	bf34      	ite	cc
 8000dc0:	2301      	movcc	r3, #1
 8000dc2:	2300      	movcs	r3, #0
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	7afb      	ldrb	r3, [r7, #11]
 8000dca:	4619      	mov	r1, r3
 8000dcc:	2041      	movs	r0, #65	@ 0x41
 8000dce:	f7ff fc33 	bl	8000638 <MCP23S17_SetPin>
					MCP23S17_SetPin('B', i, i < led_max);
 8000dd2:	7afa      	ldrb	r2, [r7, #11]
 8000dd4:	7dfb      	ldrb	r3, [r7, #23]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	bf34      	ite	cc
 8000dda:	2301      	movcc	r3, #1
 8000ddc:	2300      	movcs	r3, #0
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	461a      	mov	r2, r3
 8000de2:	7afb      	ldrb	r3, [r7, #11]
 8000de4:	4619      	mov	r1, r3
 8000de6:	2042      	movs	r0, #66	@ 0x42
 8000de8:	f7ff fc26 	bl	8000638 <MCP23S17_SetPin>
				for (uint8_t i = 0; i < 8; i++)
 8000dec:	7afb      	ldrb	r3, [r7, #11]
 8000dee:	3301      	adds	r3, #1
 8000df0:	72fb      	strb	r3, [r7, #11]
 8000df2:	7afb      	ldrb	r3, [r7, #11]
 8000df4:	2b07      	cmp	r3, #7
 8000df6:	d9df      	bls.n	8000db8 <main+0xf8>
				}

				ave = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	60fb      	str	r3, [r7, #12]
				ave_counter = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	613b      	str	r3, [r7, #16]
	{
 8000e00:	e78f      	b.n	8000d22 <main+0x62>
 8000e02:	bf00      	nop
 8000e04:	2000040c 	.word	0x2000040c
 8000e08:	2000008c 	.word	0x2000008c
 8000e0c:	200001a0 	.word	0x200001a0
 8000e10:	200002f4 	.word	0x200002f4
 8000e14:	200000e0 	.word	0x200000e0
 8000e18:	20000270 	.word	0x20000270
 8000e1c:	08007bc8 	.word	0x08007bc8
 8000e20:	20000260 	.word	0x20000260
 8000e24:	66666667 	.word	0x66666667
 8000e28:	51eb851f 	.word	0x51eb851f

08000e2c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b096      	sub	sp, #88	@ 0x58
 8000e30:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	2244      	movs	r2, #68	@ 0x44
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f006 f928 	bl	8007090 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e40:	463b      	mov	r3, r7
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e4e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e52:	f001 ff8f 	bl	8002d74 <HAL_PWREx_ControlVoltageScaling>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000e5c:	f000 f861 	bl	8000f22 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e60:	2302      	movs	r3, #2
 8000e62:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e68:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e6a:	2310      	movs	r3, #16
 8000e6c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e72:	2302      	movs	r3, #2
 8000e74:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000e7a:	230a      	movs	r3, #10
 8000e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e7e:	2307      	movs	r3, #7
 8000e80:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e82:	2302      	movs	r3, #2
 8000e84:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e86:	2302      	movs	r3, #2
 8000e88:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 ffc6 	bl	8002e20 <HAL_RCC_OscConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <SystemClock_Config+0x72>
	{
		Error_Handler();
 8000e9a:	f000 f842 	bl	8000f22 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9e:	230f      	movs	r3, #15
 8000ea0:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f002 fb8e 	bl	80035d8 <HAL_RCC_ClockConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000ec2:	f000 f82e 	bl	8000f22 <Error_Handler>
	}
}
 8000ec6:	bf00      	nop
 8000ec8:	3758      	adds	r7, #88	@ 0x58
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b0a2      	sub	sp, #136	@ 0x88
 8000ed2:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	2288      	movs	r2, #136	@ 0x88
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f006 f8d8 	bl	8007090 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000ee0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ee4:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	66bb      	str	r3, [r7, #104]	@ 0x68
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000eea:	2302      	movs	r3, #2
 8000eec:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 8000ef2:	230d      	movs	r3, #13
 8000ef4:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8000ef6:	2311      	movs	r3, #17
 8000ef8:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000efa:	2302      	movs	r3, #2
 8000efc:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000efe:	2302      	movs	r3, #2
 8000f00:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000f02:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f06:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f08:	463b      	mov	r3, r7
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f002 fd88 	bl	8003a20 <HAL_RCCEx_PeriphCLKConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <PeriphCommonClock_Config+0x4c>
	{
		Error_Handler();
 8000f16:	f000 f804 	bl	8000f22 <Error_Handler>
	}
}
 8000f1a:	bf00      	nop
 8000f1c:	3788      	adds	r7, #136	@ 0x88
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f26:	b672      	cpsid	i
}
 8000f28:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f2a:	bf00      	nop
 8000f2c:	e7fd      	b.n	8000f2a <Error_Handler+0x8>
	...

08000f30 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8000f34:	4b2a      	ldr	r3, [pc, #168]	@ (8000fe0 <MX_SAI2_Init+0xb0>)
 8000f36:	4a2b      	ldr	r2, [pc, #172]	@ (8000fe4 <MX_SAI2_Init+0xb4>)
 8000f38:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000f3a:	4b29      	ldr	r3, [pc, #164]	@ (8000fe0 <MX_SAI2_Init+0xb0>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000f40:	4b27      	ldr	r3, [pc, #156]	@ (8000fe0 <MX_SAI2_Init+0xb0>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f46:	4b26      	ldr	r3, [pc, #152]	@ (8000fe0 <MX_SAI2_Init+0xb0>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000f4c:	4b24      	ldr	r3, [pc, #144]	@ (8000fe0 <MX_SAI2_Init+0xb0>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f52:	4b23      	ldr	r3, [pc, #140]	@ (8000fe0 <MX_SAI2_Init+0xb0>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000f58:	4b21      	ldr	r3, [pc, #132]	@ (8000fe0 <MX_SAI2_Init+0xb0>)
 8000f5a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000f5e:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f60:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe0 <MX_SAI2_Init+0xb0>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000f66:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe0 <MX_SAI2_Init+0xb0>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe0 <MX_SAI2_Init+0xb0>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f72:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe0 <MX_SAI2_Init+0xb0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000f78:	2302      	movs	r3, #2
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4818      	ldr	r0, [pc, #96]	@ (8000fe0 <MX_SAI2_Init+0xb0>)
 8000f80:	f004 f868 	bl	8005054 <HAL_SAI_InitProtocol>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 8000f8a:	f7ff ffca 	bl	8000f22 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000f8e:	4b16      	ldr	r3, [pc, #88]	@ (8000fe8 <MX_SAI2_Init+0xb8>)
 8000f90:	4a16      	ldr	r2, [pc, #88]	@ (8000fec <MX_SAI2_Init+0xbc>)
 8000f92:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000f94:	4b14      	ldr	r3, [pc, #80]	@ (8000fe8 <MX_SAI2_Init+0xb8>)
 8000f96:	2203      	movs	r2, #3
 8000f98:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000f9a:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <MX_SAI2_Init+0xb8>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <MX_SAI2_Init+0xb8>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000fa6:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <MX_SAI2_Init+0xb8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000fac:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe8 <MX_SAI2_Init+0xb8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe8 <MX_SAI2_Init+0xb8>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe8 <MX_SAI2_Init+0xb8>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe8 <MX_SAI2_Init+0xb8>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4807      	ldr	r0, [pc, #28]	@ (8000fe8 <MX_SAI2_Init+0xb8>)
 8000fcc:	f004 f842 	bl	8005054 <HAL_SAI_InitProtocol>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8000fd6:	f7ff ffa4 	bl	8000f22 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000270 	.word	0x20000270
 8000fe4:	40015804 	.word	0x40015804
 8000fe8:	200002f4 	.word	0x200002f4
 8000fec:	40015824 	.word	0x40015824

08000ff0 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	@ 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a5c      	ldr	r2, [pc, #368]	@ (8001170 <HAL_SAI_MspInit+0x180>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d156      	bne.n	80010b0 <HAL_SAI_MspInit+0xc0>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8001002:	4b5c      	ldr	r3, [pc, #368]	@ (8001174 <HAL_SAI_MspInit+0x184>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d10b      	bne.n	8001022 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800100a:	4b5b      	ldr	r3, [pc, #364]	@ (8001178 <HAL_SAI_MspInit+0x188>)
 800100c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800100e:	4a5a      	ldr	r2, [pc, #360]	@ (8001178 <HAL_SAI_MspInit+0x188>)
 8001010:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001014:	6613      	str	r3, [r2, #96]	@ 0x60
 8001016:	4b58      	ldr	r3, [pc, #352]	@ (8001178 <HAL_SAI_MspInit+0x188>)
 8001018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800101a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8001022:	4b54      	ldr	r3, [pc, #336]	@ (8001174 <HAL_SAI_MspInit+0x184>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	3301      	adds	r3, #1
 8001028:	4a52      	ldr	r2, [pc, #328]	@ (8001174 <HAL_SAI_MspInit+0x184>)
 800102a:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800102c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800103e:	230d      	movs	r3, #13
 8001040:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	4619      	mov	r1, r3
 8001048:	484c      	ldr	r0, [pc, #304]	@ (800117c <HAL_SAI_MspInit+0x18c>)
 800104a:	f000 fe9f 	bl	8001d8c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 800104e:	4b4c      	ldr	r3, [pc, #304]	@ (8001180 <HAL_SAI_MspInit+0x190>)
 8001050:	4a4c      	ldr	r2, [pc, #304]	@ (8001184 <HAL_SAI_MspInit+0x194>)
 8001052:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8001054:	4b4a      	ldr	r3, [pc, #296]	@ (8001180 <HAL_SAI_MspInit+0x190>)
 8001056:	2201      	movs	r2, #1
 8001058:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800105a:	4b49      	ldr	r3, [pc, #292]	@ (8001180 <HAL_SAI_MspInit+0x190>)
 800105c:	2210      	movs	r2, #16
 800105e:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8001060:	4b47      	ldr	r3, [pc, #284]	@ (8001180 <HAL_SAI_MspInit+0x190>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8001066:	4b46      	ldr	r3, [pc, #280]	@ (8001180 <HAL_SAI_MspInit+0x190>)
 8001068:	2280      	movs	r2, #128	@ 0x80
 800106a:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800106c:	4b44      	ldr	r3, [pc, #272]	@ (8001180 <HAL_SAI_MspInit+0x190>)
 800106e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001072:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001074:	4b42      	ldr	r3, [pc, #264]	@ (8001180 <HAL_SAI_MspInit+0x190>)
 8001076:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800107a:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 800107c:	4b40      	ldr	r3, [pc, #256]	@ (8001180 <HAL_SAI_MspInit+0x190>)
 800107e:	2220      	movs	r2, #32
 8001080:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8001082:	4b3f      	ldr	r3, [pc, #252]	@ (8001180 <HAL_SAI_MspInit+0x190>)
 8001084:	2200      	movs	r2, #0
 8001086:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8001088:	483d      	ldr	r0, [pc, #244]	@ (8001180 <HAL_SAI_MspInit+0x190>)
 800108a:	f000 fc87 	bl	800199c <HAL_DMA_Init>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <HAL_SAI_MspInit+0xa8>
    {
      Error_Handler();
 8001094:	f7ff ff45 	bl	8000f22 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a39      	ldr	r2, [pc, #228]	@ (8001180 <HAL_SAI_MspInit+0x190>)
 800109c:	671a      	str	r2, [r3, #112]	@ 0x70
 800109e:	4a38      	ldr	r2, [pc, #224]	@ (8001180 <HAL_SAI_MspInit+0x190>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a36      	ldr	r2, [pc, #216]	@ (8001180 <HAL_SAI_MspInit+0x190>)
 80010a8:	66da      	str	r2, [r3, #108]	@ 0x6c
 80010aa:	4a35      	ldr	r2, [pc, #212]	@ (8001180 <HAL_SAI_MspInit+0x190>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if(saiHandle->Instance==SAI2_Block_B)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a34      	ldr	r2, [pc, #208]	@ (8001188 <HAL_SAI_MspInit+0x198>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d156      	bne.n	8001168 <HAL_SAI_MspInit+0x178>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 80010ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001174 <HAL_SAI_MspInit+0x184>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10b      	bne.n	80010da <HAL_SAI_MspInit+0xea>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80010c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001178 <HAL_SAI_MspInit+0x188>)
 80010c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c6:	4a2c      	ldr	r2, [pc, #176]	@ (8001178 <HAL_SAI_MspInit+0x188>)
 80010c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80010ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001178 <HAL_SAI_MspInit+0x188>)
 80010d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80010da:	4b26      	ldr	r3, [pc, #152]	@ (8001174 <HAL_SAI_MspInit+0x184>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	3301      	adds	r3, #1
 80010e0:	4a24      	ldr	r2, [pc, #144]	@ (8001174 <HAL_SAI_MspInit+0x184>)
 80010e2:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80010f6:	230d      	movs	r3, #13
 80010f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4619      	mov	r1, r3
 8001100:	4822      	ldr	r0, [pc, #136]	@ (800118c <HAL_SAI_MspInit+0x19c>)
 8001102:	f000 fe43 	bl	8001d8c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8001106:	4b22      	ldr	r3, [pc, #136]	@ (8001190 <HAL_SAI_MspInit+0x1a0>)
 8001108:	4a22      	ldr	r2, [pc, #136]	@ (8001194 <HAL_SAI_MspInit+0x1a4>)
 800110a:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 800110c:	4b20      	ldr	r3, [pc, #128]	@ (8001190 <HAL_SAI_MspInit+0x1a0>)
 800110e:	2201      	movs	r2, #1
 8001110:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001112:	4b1f      	ldr	r3, [pc, #124]	@ (8001190 <HAL_SAI_MspInit+0x1a0>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001118:	4b1d      	ldr	r3, [pc, #116]	@ (8001190 <HAL_SAI_MspInit+0x1a0>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 800111e:	4b1c      	ldr	r3, [pc, #112]	@ (8001190 <HAL_SAI_MspInit+0x1a0>)
 8001120:	2280      	movs	r2, #128	@ 0x80
 8001122:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001124:	4b1a      	ldr	r3, [pc, #104]	@ (8001190 <HAL_SAI_MspInit+0x1a0>)
 8001126:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800112a:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800112c:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <HAL_SAI_MspInit+0x1a0>)
 800112e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001132:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8001134:	4b16      	ldr	r3, [pc, #88]	@ (8001190 <HAL_SAI_MspInit+0x1a0>)
 8001136:	2220      	movs	r2, #32
 8001138:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 800113a:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <HAL_SAI_MspInit+0x1a0>)
 800113c:	2200      	movs	r2, #0
 800113e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8001140:	4813      	ldr	r0, [pc, #76]	@ (8001190 <HAL_SAI_MspInit+0x1a0>)
 8001142:	f000 fc2b 	bl	800199c <HAL_DMA_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <HAL_SAI_MspInit+0x160>
    {
      Error_Handler();
 800114c:	f7ff fee9 	bl	8000f22 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a0f      	ldr	r2, [pc, #60]	@ (8001190 <HAL_SAI_MspInit+0x1a0>)
 8001154:	671a      	str	r2, [r3, #112]	@ 0x70
 8001156:	4a0e      	ldr	r2, [pc, #56]	@ (8001190 <HAL_SAI_MspInit+0x1a0>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a0c      	ldr	r2, [pc, #48]	@ (8001190 <HAL_SAI_MspInit+0x1a0>)
 8001160:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001162:	4a0b      	ldr	r2, [pc, #44]	@ (8001190 <HAL_SAI_MspInit+0x1a0>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 8001168:	bf00      	nop
 800116a:	3728      	adds	r7, #40	@ 0x28
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40015804 	.word	0x40015804
 8001174:	20000408 	.word	0x20000408
 8001178:	40021000 	.word	0x40021000
 800117c:	48000400 	.word	0x48000400
 8001180:	20000378 	.word	0x20000378
 8001184:	4002006c 	.word	0x4002006c
 8001188:	40015824 	.word	0x40015824
 800118c:	48000800 	.word	0x48000800
 8001190:	200003c0 	.word	0x200003c0
 8001194:	40020080 	.word	0x40020080

08001198 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800119c:	4b1b      	ldr	r3, [pc, #108]	@ (800120c <MX_SPI3_Init+0x74>)
 800119e:	4a1c      	ldr	r2, [pc, #112]	@ (8001210 <MX_SPI3_Init+0x78>)
 80011a0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80011a2:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <MX_SPI3_Init+0x74>)
 80011a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011a8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80011aa:	4b18      	ldr	r3, [pc, #96]	@ (800120c <MX_SPI3_Init+0x74>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80011b0:	4b16      	ldr	r3, [pc, #88]	@ (800120c <MX_SPI3_Init+0x74>)
 80011b2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80011b6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011b8:	4b14      	ldr	r3, [pc, #80]	@ (800120c <MX_SPI3_Init+0x74>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011be:	4b13      	ldr	r3, [pc, #76]	@ (800120c <MX_SPI3_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80011c4:	4b11      	ldr	r3, [pc, #68]	@ (800120c <MX_SPI3_Init+0x74>)
 80011c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011ca:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <MX_SPI3_Init+0x74>)
 80011ce:	2218      	movs	r2, #24
 80011d0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <MX_SPI3_Init+0x74>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <MX_SPI3_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011de:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <MX_SPI3_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80011e4:	4b09      	ldr	r3, [pc, #36]	@ (800120c <MX_SPI3_Init+0x74>)
 80011e6:	2207      	movs	r2, #7
 80011e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <MX_SPI3_Init+0x74>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <MX_SPI3_Init+0x74>)
 80011f2:	2208      	movs	r2, #8
 80011f4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80011f6:	4805      	ldr	r0, [pc, #20]	@ (800120c <MX_SPI3_Init+0x74>)
 80011f8:	f004 fc75 	bl	8005ae6 <HAL_SPI_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001202:	f7ff fe8e 	bl	8000f22 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	2000040c 	.word	0x2000040c
 8001210:	40003c00 	.word	0x40003c00

08001214 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	@ 0x28
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a25      	ldr	r2, [pc, #148]	@ (80012c8 <HAL_SPI_MspInit+0xb4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d144      	bne.n	80012c0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001236:	4b25      	ldr	r3, [pc, #148]	@ (80012cc <HAL_SPI_MspInit+0xb8>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800123a:	4a24      	ldr	r2, [pc, #144]	@ (80012cc <HAL_SPI_MspInit+0xb8>)
 800123c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001240:	6593      	str	r3, [r2, #88]	@ 0x58
 8001242:	4b22      	ldr	r3, [pc, #136]	@ (80012cc <HAL_SPI_MspInit+0xb8>)
 8001244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001246:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	4b1f      	ldr	r3, [pc, #124]	@ (80012cc <HAL_SPI_MspInit+0xb8>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001252:	4a1e      	ldr	r2, [pc, #120]	@ (80012cc <HAL_SPI_MspInit+0xb8>)
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125a:	4b1c      	ldr	r3, [pc, #112]	@ (80012cc <HAL_SPI_MspInit+0xb8>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	4b19      	ldr	r3, [pc, #100]	@ (80012cc <HAL_SPI_MspInit+0xb8>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126a:	4a18      	ldr	r2, [pc, #96]	@ (80012cc <HAL_SPI_MspInit+0xb8>)
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001272:	4b16      	ldr	r3, [pc, #88]	@ (80012cc <HAL_SPI_MspInit+0xb8>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800127e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128c:	2303      	movs	r3, #3
 800128e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001290:	2306      	movs	r3, #6
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	480d      	ldr	r0, [pc, #52]	@ (80012d0 <HAL_SPI_MspInit+0xbc>)
 800129c:	f000 fd76 	bl	8001d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012a0:	2320      	movs	r3, #32
 80012a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ac:	2303      	movs	r3, #3
 80012ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012b0:	2306      	movs	r3, #6
 80012b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4619      	mov	r1, r3
 80012ba:	4806      	ldr	r0, [pc, #24]	@ (80012d4 <HAL_SPI_MspInit+0xc0>)
 80012bc:	f000 fd66 	bl	8001d8c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80012c0:	bf00      	nop
 80012c2:	3728      	adds	r7, #40	@ 0x28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40003c00 	.word	0x40003c00
 80012cc:	40021000 	.word	0x40021000
 80012d0:	48000800 	.word	0x48000800
 80012d4:	48000400 	.word	0x48000400

080012d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <HAL_MspInit+0x44>)
 80012e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012e2:	4a0e      	ldr	r2, [pc, #56]	@ (800131c <HAL_MspInit+0x44>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80012ea:	4b0c      	ldr	r3, [pc, #48]	@ (800131c <HAL_MspInit+0x44>)
 80012ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	4b09      	ldr	r3, [pc, #36]	@ (800131c <HAL_MspInit+0x44>)
 80012f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012fa:	4a08      	ldr	r2, [pc, #32]	@ (800131c <HAL_MspInit+0x44>)
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001300:	6593      	str	r3, [r2, #88]	@ 0x58
 8001302:	4b06      	ldr	r3, [pc, #24]	@ (800131c <HAL_MspInit+0x44>)
 8001304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000

08001320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <NMI_Handler+0x4>

08001328 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <HardFault_Handler+0x4>

08001330 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <MemManage_Handler+0x4>

08001338 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <BusFault_Handler+0x4>

08001340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <UsageFault_Handler+0x4>

08001348 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001376:	f000 f9df 	bl	8001738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8001384:	4802      	ldr	r0, [pc, #8]	@ (8001390 <DMA1_Channel6_IRQHandler+0x10>)
 8001386:	f000 fc21 	bl	8001bcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000378 	.word	0x20000378

08001394 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8001398:	4802      	ldr	r0, [pc, #8]	@ (80013a4 <DMA1_Channel7_IRQHandler+0x10>)
 800139a:	f000 fc17 	bl	8001bcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200003c0 	.word	0x200003c0

080013a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	e00a      	b.n	80013d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013ba:	f3af 8000 	nop.w
 80013be:	4601      	mov	r1, r0
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	1c5a      	adds	r2, r3, #1
 80013c4:	60ba      	str	r2, [r7, #8]
 80013c6:	b2ca      	uxtb	r2, r1
 80013c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	3301      	adds	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	dbf0      	blt.n	80013ba <_read+0x12>
  }

  return len;
 80013d8:	687b      	ldr	r3, [r7, #4]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b086      	sub	sp, #24
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	60f8      	str	r0, [r7, #12]
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	e009      	b.n	8001408 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	1c5a      	adds	r2, r3, #1
 80013f8:	60ba      	str	r2, [r7, #8]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fbe9 	bl	8000bd4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	3301      	adds	r3, #1
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	429a      	cmp	r2, r3
 800140e:	dbf1      	blt.n	80013f4 <_write+0x12>
  }
  return len;
 8001410:	687b      	ldr	r3, [r7, #4]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <_close>:

int _close(int file)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001442:	605a      	str	r2, [r3, #4]
  return 0;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <_isatty>:

int _isatty(int file)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800148c:	4a14      	ldr	r2, [pc, #80]	@ (80014e0 <_sbrk+0x5c>)
 800148e:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <_sbrk+0x60>)
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001498:	4b13      	ldr	r3, [pc, #76]	@ (80014e8 <_sbrk+0x64>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d102      	bne.n	80014a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a0:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <_sbrk+0x64>)
 80014a2:	4a12      	ldr	r2, [pc, #72]	@ (80014ec <_sbrk+0x68>)
 80014a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014a6:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <_sbrk+0x64>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d207      	bcs.n	80014c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b4:	f005 fe3a 	bl	800712c <__errno>
 80014b8:	4603      	mov	r3, r0
 80014ba:	220c      	movs	r2, #12
 80014bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
 80014c2:	e009      	b.n	80014d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c4:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <_sbrk+0x64>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ca:	4b07      	ldr	r3, [pc, #28]	@ (80014e8 <_sbrk+0x64>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	4a05      	ldr	r2, [pc, #20]	@ (80014e8 <_sbrk+0x64>)
 80014d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014d6:	68fb      	ldr	r3, [r7, #12]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20018000 	.word	0x20018000
 80014e4:	00000400 	.word	0x00000400
 80014e8:	20000470 	.word	0x20000470
 80014ec:	20000650 	.word	0x20000650

080014f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014f4:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <SystemInit+0x20>)
 80014f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014fa:	4a05      	ldr	r2, [pc, #20]	@ (8001510 <SystemInit+0x20>)
 80014fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001500:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001518:	4b14      	ldr	r3, [pc, #80]	@ (800156c <MX_USART2_UART_Init+0x58>)
 800151a:	4a15      	ldr	r2, [pc, #84]	@ (8001570 <MX_USART2_UART_Init+0x5c>)
 800151c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800151e:	4b13      	ldr	r3, [pc, #76]	@ (800156c <MX_USART2_UART_Init+0x58>)
 8001520:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001524:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001526:	4b11      	ldr	r3, [pc, #68]	@ (800156c <MX_USART2_UART_Init+0x58>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800152c:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <MX_USART2_UART_Init+0x58>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001532:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <MX_USART2_UART_Init+0x58>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001538:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <MX_USART2_UART_Init+0x58>)
 800153a:	220c      	movs	r2, #12
 800153c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153e:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <MX_USART2_UART_Init+0x58>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001544:	4b09      	ldr	r3, [pc, #36]	@ (800156c <MX_USART2_UART_Init+0x58>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800154a:	4b08      	ldr	r3, [pc, #32]	@ (800156c <MX_USART2_UART_Init+0x58>)
 800154c:	2200      	movs	r2, #0
 800154e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001550:	4b06      	ldr	r3, [pc, #24]	@ (800156c <MX_USART2_UART_Init+0x58>)
 8001552:	2200      	movs	r2, #0
 8001554:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001556:	4805      	ldr	r0, [pc, #20]	@ (800156c <MX_USART2_UART_Init+0x58>)
 8001558:	f004 fe42 	bl	80061e0 <HAL_UART_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001562:	f7ff fcde 	bl	8000f22 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000474 	.word	0x20000474
 8001570:	40004400 	.word	0x40004400

08001574 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b0ac      	sub	sp, #176	@ 0xb0
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	2288      	movs	r2, #136	@ 0x88
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f005 fd7b 	bl	8007090 <memset>
  if(uartHandle->Instance==USART2)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a21      	ldr	r2, [pc, #132]	@ (8001624 <HAL_UART_MspInit+0xb0>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d13b      	bne.n	800161c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015a4:	2302      	movs	r3, #2
 80015a6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4618      	mov	r0, r3
 80015b2:	f002 fa35 	bl	8003a20 <HAL_RCCEx_PeriphCLKConfig>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015bc:	f7ff fcb1 	bl	8000f22 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015c0:	4b19      	ldr	r3, [pc, #100]	@ (8001628 <HAL_UART_MspInit+0xb4>)
 80015c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c4:	4a18      	ldr	r2, [pc, #96]	@ (8001628 <HAL_UART_MspInit+0xb4>)
 80015c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80015cc:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <HAL_UART_MspInit+0xb4>)
 80015ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d8:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <HAL_UART_MspInit+0xb4>)
 80015da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015dc:	4a12      	ldr	r2, [pc, #72]	@ (8001628 <HAL_UART_MspInit+0xb4>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e4:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <HAL_UART_MspInit+0xb4>)
 80015e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015f0:	230c      	movs	r3, #12
 80015f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001608:	2307      	movs	r3, #7
 800160a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001612:	4619      	mov	r1, r3
 8001614:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001618:	f000 fbb8 	bl	8001d8c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800161c:	bf00      	nop
 800161e:	37b0      	adds	r7, #176	@ 0xb0
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40004400 	.word	0x40004400
 8001628:	40021000 	.word	0x40021000

0800162c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800162c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001664 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001630:	f7ff ff5e 	bl	80014f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001634:	480c      	ldr	r0, [pc, #48]	@ (8001668 <LoopForever+0x6>)
  ldr r1, =_edata
 8001636:	490d      	ldr	r1, [pc, #52]	@ (800166c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001638:	4a0d      	ldr	r2, [pc, #52]	@ (8001670 <LoopForever+0xe>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800163c:	e002      	b.n	8001644 <LoopCopyDataInit>

0800163e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001642:	3304      	adds	r3, #4

08001644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001648:	d3f9      	bcc.n	800163e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164a:	4a0a      	ldr	r2, [pc, #40]	@ (8001674 <LoopForever+0x12>)
  ldr r4, =_ebss
 800164c:	4c0a      	ldr	r4, [pc, #40]	@ (8001678 <LoopForever+0x16>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001650:	e001      	b.n	8001656 <LoopFillZerobss>

08001652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001654:	3204      	adds	r2, #4

08001656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001658:	d3fb      	bcc.n	8001652 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800165a:	f005 fd6d 	bl	8007138 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800165e:	f7ff fb2f 	bl	8000cc0 <main>

08001662 <LoopForever>:

LoopForever:
    b LoopForever
 8001662:	e7fe      	b.n	8001662 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001664:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800166c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001670:	08007c6c 	.word	0x08007c6c
  ldr r2, =_sbss
 8001674:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001678:	2000064c 	.word	0x2000064c

0800167c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800167c:	e7fe      	b.n	800167c <ADC1_2_IRQHandler>
	...

08001680 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800168a:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <HAL_Init+0x3c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a0b      	ldr	r2, [pc, #44]	@ (80016bc <HAL_Init+0x3c>)
 8001690:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001694:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001696:	2003      	movs	r0, #3
 8001698:	f000 f93e 	bl	8001918 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800169c:	2000      	movs	r0, #0
 800169e:	f000 f80f 	bl	80016c0 <HAL_InitTick>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d002      	beq.n	80016ae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	71fb      	strb	r3, [r7, #7]
 80016ac:	e001      	b.n	80016b2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016ae:	f7ff fe13 	bl	80012d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016b2:	79fb      	ldrb	r3, [r7, #7]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40022000 	.word	0x40022000

080016c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016c8:	2300      	movs	r3, #0
 80016ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016cc:	4b17      	ldr	r3, [pc, #92]	@ (800172c <HAL_InitTick+0x6c>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d023      	beq.n	800171c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016d4:	4b16      	ldr	r3, [pc, #88]	@ (8001730 <HAL_InitTick+0x70>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b14      	ldr	r3, [pc, #80]	@ (800172c <HAL_InitTick+0x6c>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	4619      	mov	r1, r3
 80016de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 f949 	bl	8001982 <HAL_SYSTICK_Config>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10f      	bne.n	8001716 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b0f      	cmp	r3, #15
 80016fa:	d809      	bhi.n	8001710 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016fc:	2200      	movs	r2, #0
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f000 f913 	bl	800192e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001708:	4a0a      	ldr	r2, [pc, #40]	@ (8001734 <HAL_InitTick+0x74>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	e007      	b.n	8001720 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	73fb      	strb	r3, [r7, #15]
 8001714:	e004      	b.n	8001720 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	73fb      	strb	r3, [r7, #15]
 800171a:	e001      	b.n	8001720 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001720:	7bfb      	ldrb	r3, [r7, #15]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	2000000c 	.word	0x2000000c
 8001730:	20000004 	.word	0x20000004
 8001734:	20000008 	.word	0x20000008

08001738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800173c:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <HAL_IncTick+0x20>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_IncTick+0x24>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4413      	add	r3, r2
 8001748:	4a04      	ldr	r2, [pc, #16]	@ (800175c <HAL_IncTick+0x24>)
 800174a:	6013      	str	r3, [r2, #0]
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	2000000c 	.word	0x2000000c
 800175c:	200004fc 	.word	0x200004fc

08001760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return uwTick;
 8001764:	4b03      	ldr	r3, [pc, #12]	@ (8001774 <HAL_GetTick+0x14>)
 8001766:	681b      	ldr	r3, [r3, #0]
}
 8001768:	4618      	mov	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	200004fc 	.word	0x200004fc

08001778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001788:	4b0c      	ldr	r3, [pc, #48]	@ (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001794:	4013      	ands	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017aa:	4a04      	ldr	r2, [pc, #16]	@ (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	60d3      	str	r3, [r2, #12]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c4:	4b04      	ldr	r3, [pc, #16]	@ (80017d8 <__NVIC_GetPriorityGrouping+0x18>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	f003 0307 	and.w	r3, r3, #7
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db0b      	blt.n	8001806 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	f003 021f 	and.w	r2, r3, #31
 80017f4:	4907      	ldr	r1, [pc, #28]	@ (8001814 <__NVIC_EnableIRQ+0x38>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	2001      	movs	r0, #1
 80017fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000e100 	.word	0xe000e100

08001818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	6039      	str	r1, [r7, #0]
 8001822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	2b00      	cmp	r3, #0
 800182a:	db0a      	blt.n	8001842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	b2da      	uxtb	r2, r3
 8001830:	490c      	ldr	r1, [pc, #48]	@ (8001864 <__NVIC_SetPriority+0x4c>)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	0112      	lsls	r2, r2, #4
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	440b      	add	r3, r1
 800183c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001840:	e00a      	b.n	8001858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4908      	ldr	r1, [pc, #32]	@ (8001868 <__NVIC_SetPriority+0x50>)
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	3b04      	subs	r3, #4
 8001850:	0112      	lsls	r2, r2, #4
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	440b      	add	r3, r1
 8001856:	761a      	strb	r2, [r3, #24]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000e100 	.word	0xe000e100
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	@ 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f1c3 0307 	rsb	r3, r3, #7
 8001886:	2b04      	cmp	r3, #4
 8001888:	bf28      	it	cs
 800188a:	2304      	movcs	r3, #4
 800188c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3304      	adds	r3, #4
 8001892:	2b06      	cmp	r3, #6
 8001894:	d902      	bls.n	800189c <NVIC_EncodePriority+0x30>
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3b03      	subs	r3, #3
 800189a:	e000      	b.n	800189e <NVIC_EncodePriority+0x32>
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43da      	mvns	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	401a      	ands	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b4:	f04f 31ff 	mov.w	r1, #4294967295
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	43d9      	mvns	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	4313      	orrs	r3, r2
         );
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3724      	adds	r7, #36	@ 0x24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3b01      	subs	r3, #1
 80018e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018e4:	d301      	bcc.n	80018ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018e6:	2301      	movs	r3, #1
 80018e8:	e00f      	b.n	800190a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001914 <SysTick_Config+0x40>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018f2:	210f      	movs	r1, #15
 80018f4:	f04f 30ff 	mov.w	r0, #4294967295
 80018f8:	f7ff ff8e 	bl	8001818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018fc:	4b05      	ldr	r3, [pc, #20]	@ (8001914 <SysTick_Config+0x40>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001902:	4b04      	ldr	r3, [pc, #16]	@ (8001914 <SysTick_Config+0x40>)
 8001904:	2207      	movs	r2, #7
 8001906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	e000e010 	.word	0xe000e010

08001918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff ff29 	bl	8001778 <__NVIC_SetPriorityGrouping>
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001940:	f7ff ff3e 	bl	80017c0 <__NVIC_GetPriorityGrouping>
 8001944:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	6978      	ldr	r0, [r7, #20]
 800194c:	f7ff ff8e 	bl	800186c <NVIC_EncodePriority>
 8001950:	4602      	mov	r2, r0
 8001952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff5d 	bl	8001818 <__NVIC_SetPriority>
}
 800195e:	bf00      	nop
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff31 	bl	80017dc <__NVIC_EnableIRQ>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ffa2 	bl	80018d4 <SysTick_Config>
 8001990:	4603      	mov	r3, r0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e098      	b.n	8001ae0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	461a      	mov	r2, r3
 80019b4:	4b4d      	ldr	r3, [pc, #308]	@ (8001aec <HAL_DMA_Init+0x150>)
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d80f      	bhi.n	80019da <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	461a      	mov	r2, r3
 80019c0:	4b4b      	ldr	r3, [pc, #300]	@ (8001af0 <HAL_DMA_Init+0x154>)
 80019c2:	4413      	add	r3, r2
 80019c4:	4a4b      	ldr	r2, [pc, #300]	@ (8001af4 <HAL_DMA_Init+0x158>)
 80019c6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ca:	091b      	lsrs	r3, r3, #4
 80019cc:	009a      	lsls	r2, r3, #2
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a48      	ldr	r2, [pc, #288]	@ (8001af8 <HAL_DMA_Init+0x15c>)
 80019d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80019d8:	e00e      	b.n	80019f8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	4b46      	ldr	r3, [pc, #280]	@ (8001afc <HAL_DMA_Init+0x160>)
 80019e2:	4413      	add	r3, r2
 80019e4:	4a43      	ldr	r2, [pc, #268]	@ (8001af4 <HAL_DMA_Init+0x158>)
 80019e6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ea:	091b      	lsrs	r3, r3, #4
 80019ec:	009a      	lsls	r2, r3, #2
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a42      	ldr	r2, [pc, #264]	@ (8001b00 <HAL_DMA_Init+0x164>)
 80019f6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2202      	movs	r2, #2
 80019fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001a1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001a52:	d039      	beq.n	8001ac8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a58:	4a27      	ldr	r2, [pc, #156]	@ (8001af8 <HAL_DMA_Init+0x15c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d11a      	bne.n	8001a94 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a5e:	4b29      	ldr	r3, [pc, #164]	@ (8001b04 <HAL_DMA_Init+0x168>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a66:	f003 031c 	and.w	r3, r3, #28
 8001a6a:	210f      	movs	r1, #15
 8001a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	4924      	ldr	r1, [pc, #144]	@ (8001b04 <HAL_DMA_Init+0x168>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001a78:	4b22      	ldr	r3, [pc, #136]	@ (8001b04 <HAL_DMA_Init+0x168>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6859      	ldr	r1, [r3, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a84:	f003 031c 	and.w	r3, r3, #28
 8001a88:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8c:	491d      	ldr	r1, [pc, #116]	@ (8001b04 <HAL_DMA_Init+0x168>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	600b      	str	r3, [r1, #0]
 8001a92:	e019      	b.n	8001ac8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001a94:	4b1c      	ldr	r3, [pc, #112]	@ (8001b08 <HAL_DMA_Init+0x16c>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9c:	f003 031c 	and.w	r3, r3, #28
 8001aa0:	210f      	movs	r1, #15
 8001aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	4917      	ldr	r1, [pc, #92]	@ (8001b08 <HAL_DMA_Init+0x16c>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001aae:	4b16      	ldr	r3, [pc, #88]	@ (8001b08 <HAL_DMA_Init+0x16c>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6859      	ldr	r1, [r3, #4]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aba:	f003 031c 	and.w	r3, r3, #28
 8001abe:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac2:	4911      	ldr	r1, [pc, #68]	@ (8001b08 <HAL_DMA_Init+0x16c>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	40020407 	.word	0x40020407
 8001af0:	bffdfff8 	.word	0xbffdfff8
 8001af4:	cccccccd 	.word	0xcccccccd
 8001af8:	40020000 	.word	0x40020000
 8001afc:	bffdfbf8 	.word	0xbffdfbf8
 8001b00:	40020400 	.word	0x40020400
 8001b04:	400200a8 	.word	0x400200a8
 8001b08:	400204a8 	.word	0x400204a8

08001b0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d101      	bne.n	8001b2c <HAL_DMA_Start_IT+0x20>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e04b      	b.n	8001bc4 <HAL_DMA_Start_IT+0xb8>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d13a      	bne.n	8001bb6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2202      	movs	r2, #2
 8001b44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0201 	bic.w	r2, r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	68b9      	ldr	r1, [r7, #8]
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f000 f8e0 	bl	8001d2a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d008      	beq.n	8001b84 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 020e 	orr.w	r2, r2, #14
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	e00f      	b.n	8001ba4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0204 	bic.w	r2, r2, #4
 8001b92:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 020a 	orr.w	r2, r2, #10
 8001ba2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0201 	orr.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	e005      	b.n	8001bc2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be8:	f003 031c 	and.w	r3, r3, #28
 8001bec:	2204      	movs	r2, #4
 8001bee:	409a      	lsls	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d026      	beq.n	8001c46 <HAL_DMA_IRQHandler+0x7a>
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d021      	beq.n	8001c46 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0320 	and.w	r3, r3, #32
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d107      	bne.n	8001c20 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0204 	bic.w	r2, r2, #4
 8001c1e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c24:	f003 021c 	and.w	r2, r3, #28
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2c:	2104      	movs	r1, #4
 8001c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c32:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d071      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001c44:	e06c      	b.n	8001d20 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4a:	f003 031c 	and.w	r3, r3, #28
 8001c4e:	2202      	movs	r2, #2
 8001c50:	409a      	lsls	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4013      	ands	r3, r2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d02e      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0xec>
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d029      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0320 	and.w	r3, r3, #32
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10b      	bne.n	8001c8a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 020a 	bic.w	r2, r2, #10
 8001c80:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	f003 021c 	and.w	r2, r3, #28
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	2102      	movs	r1, #2
 8001c98:	fa01 f202 	lsl.w	r2, r1, r2
 8001c9c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d038      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001cb6:	e033      	b.n	8001d20 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbc:	f003 031c 	and.w	r3, r3, #28
 8001cc0:	2208      	movs	r2, #8
 8001cc2:	409a      	lsls	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d02a      	beq.n	8001d22 <HAL_DMA_IRQHandler+0x156>
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d025      	beq.n	8001d22 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 020e 	bic.w	r2, r2, #14
 8001ce4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cea:	f003 021c 	and.w	r2, r3, #28
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d004      	beq.n	8001d22 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d20:	bf00      	nop
 8001d22:	bf00      	nop
}
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b085      	sub	sp, #20
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	60f8      	str	r0, [r7, #12]
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
 8001d36:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3c:	f003 021c 	and.w	r2, r3, #28
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d44:	2101      	movs	r1, #1
 8001d46:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b10      	cmp	r3, #16
 8001d5a:	d108      	bne.n	8001d6e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68ba      	ldr	r2, [r7, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d6c:	e007      	b.n	8001d7e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	60da      	str	r2, [r3, #12]
}
 8001d7e:	bf00      	nop
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d9a:	e17f      	b.n	800209c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	2101      	movs	r1, #1
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	fa01 f303 	lsl.w	r3, r1, r3
 8001da8:	4013      	ands	r3, r2
 8001daa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 8171 	beq.w	8002096 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d005      	beq.n	8001dcc <HAL_GPIO_Init+0x40>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d130      	bne.n	8001e2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	2203      	movs	r2, #3
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	4013      	ands	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e02:	2201      	movs	r2, #1
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	091b      	lsrs	r3, r3, #4
 8001e18:	f003 0201 	and.w	r2, r3, #1
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d118      	bne.n	8001e6c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e40:	2201      	movs	r2, #1
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	08db      	lsrs	r3, r3, #3
 8001e56:	f003 0201 	and.w	r2, r3, #1
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	d017      	beq.n	8001ea8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	2203      	movs	r2, #3
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d123      	bne.n	8001efc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	08da      	lsrs	r2, r3, #3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3208      	adds	r2, #8
 8001ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	220f      	movs	r2, #15
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	691a      	ldr	r2, [r3, #16]
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	08da      	lsrs	r2, r3, #3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3208      	adds	r2, #8
 8001ef6:	6939      	ldr	r1, [r7, #16]
 8001ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	2203      	movs	r2, #3
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0203 	and.w	r2, r3, #3
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 80ac 	beq.w	8002096 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3e:	4b5f      	ldr	r3, [pc, #380]	@ (80020bc <HAL_GPIO_Init+0x330>)
 8001f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f42:	4a5e      	ldr	r2, [pc, #376]	@ (80020bc <HAL_GPIO_Init+0x330>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f4a:	4b5c      	ldr	r3, [pc, #368]	@ (80020bc <HAL_GPIO_Init+0x330>)
 8001f4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f56:	4a5a      	ldr	r2, [pc, #360]	@ (80020c0 <HAL_GPIO_Init+0x334>)
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	089b      	lsrs	r3, r3, #2
 8001f5c:	3302      	adds	r3, #2
 8001f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f62:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	220f      	movs	r2, #15
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4013      	ands	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f80:	d025      	beq.n	8001fce <HAL_GPIO_Init+0x242>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a4f      	ldr	r2, [pc, #316]	@ (80020c4 <HAL_GPIO_Init+0x338>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d01f      	beq.n	8001fca <HAL_GPIO_Init+0x23e>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a4e      	ldr	r2, [pc, #312]	@ (80020c8 <HAL_GPIO_Init+0x33c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d019      	beq.n	8001fc6 <HAL_GPIO_Init+0x23a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a4d      	ldr	r2, [pc, #308]	@ (80020cc <HAL_GPIO_Init+0x340>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d013      	beq.n	8001fc2 <HAL_GPIO_Init+0x236>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a4c      	ldr	r2, [pc, #304]	@ (80020d0 <HAL_GPIO_Init+0x344>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d00d      	beq.n	8001fbe <HAL_GPIO_Init+0x232>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a4b      	ldr	r2, [pc, #300]	@ (80020d4 <HAL_GPIO_Init+0x348>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d007      	beq.n	8001fba <HAL_GPIO_Init+0x22e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a4a      	ldr	r2, [pc, #296]	@ (80020d8 <HAL_GPIO_Init+0x34c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d101      	bne.n	8001fb6 <HAL_GPIO_Init+0x22a>
 8001fb2:	2306      	movs	r3, #6
 8001fb4:	e00c      	b.n	8001fd0 <HAL_GPIO_Init+0x244>
 8001fb6:	2307      	movs	r3, #7
 8001fb8:	e00a      	b.n	8001fd0 <HAL_GPIO_Init+0x244>
 8001fba:	2305      	movs	r3, #5
 8001fbc:	e008      	b.n	8001fd0 <HAL_GPIO_Init+0x244>
 8001fbe:	2304      	movs	r3, #4
 8001fc0:	e006      	b.n	8001fd0 <HAL_GPIO_Init+0x244>
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e004      	b.n	8001fd0 <HAL_GPIO_Init+0x244>
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e002      	b.n	8001fd0 <HAL_GPIO_Init+0x244>
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <HAL_GPIO_Init+0x244>
 8001fce:	2300      	movs	r3, #0
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	f002 0203 	and.w	r2, r2, #3
 8001fd6:	0092      	lsls	r2, r2, #2
 8001fd8:	4093      	lsls	r3, r2
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fe0:	4937      	ldr	r1, [pc, #220]	@ (80020c0 <HAL_GPIO_Init+0x334>)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	089b      	lsrs	r3, r3, #2
 8001fe6:	3302      	adds	r3, #2
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fee:	4b3b      	ldr	r3, [pc, #236]	@ (80020dc <HAL_GPIO_Init+0x350>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4313      	orrs	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002012:	4a32      	ldr	r2, [pc, #200]	@ (80020dc <HAL_GPIO_Init+0x350>)
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002018:	4b30      	ldr	r3, [pc, #192]	@ (80020dc <HAL_GPIO_Init+0x350>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	43db      	mvns	r3, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4313      	orrs	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800203c:	4a27      	ldr	r2, [pc, #156]	@ (80020dc <HAL_GPIO_Init+0x350>)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002042:	4b26      	ldr	r3, [pc, #152]	@ (80020dc <HAL_GPIO_Init+0x350>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	43db      	mvns	r3, r3
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4013      	ands	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002066:	4a1d      	ldr	r2, [pc, #116]	@ (80020dc <HAL_GPIO_Init+0x350>)
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800206c:	4b1b      	ldr	r3, [pc, #108]	@ (80020dc <HAL_GPIO_Init+0x350>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	43db      	mvns	r3, r3
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4013      	ands	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4313      	orrs	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002090:	4a12      	ldr	r2, [pc, #72]	@ (80020dc <HAL_GPIO_Init+0x350>)
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	3301      	adds	r3, #1
 800209a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	fa22 f303 	lsr.w	r3, r2, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f47f ae78 	bne.w	8001d9c <HAL_GPIO_Init+0x10>
  }
}
 80020ac:	bf00      	nop
 80020ae:	bf00      	nop
 80020b0:	371c      	adds	r7, #28
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40010000 	.word	0x40010000
 80020c4:	48000400 	.word	0x48000400
 80020c8:	48000800 	.word	0x48000800
 80020cc:	48000c00 	.word	0x48000c00
 80020d0:	48001000 	.word	0x48001000
 80020d4:	48001400 	.word	0x48001400
 80020d8:	48001800 	.word	0x48001800
 80020dc:	40010400 	.word	0x40010400

080020e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	807b      	strh	r3, [r7, #2]
 80020ec:	4613      	mov	r3, r2
 80020ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020f0:	787b      	ldrb	r3, [r7, #1]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020f6:	887a      	ldrh	r2, [r7, #2]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020fc:	e002      	b.n	8002104 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020fe:	887a      	ldrh	r2, [r7, #2]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e08d      	b.n	800223e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d106      	bne.n	800213c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f7fe fcee 	bl	8000b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2224      	movs	r2, #36	@ 0x24
 8002140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f022 0201 	bic.w	r2, r2, #1
 8002152:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002160:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002170:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d107      	bne.n	800218a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	e006      	b.n	8002198 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002196:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d108      	bne.n	80021b2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	e007      	b.n	80021c2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691a      	ldr	r2, [r3, #16]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69d9      	ldr	r1, [r3, #28]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1a      	ldr	r2, [r3, #32]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	430a      	orrs	r2, r1
 800220e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0201 	orr.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2220      	movs	r2, #32
 800222a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af02      	add	r7, sp, #8
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	4608      	mov	r0, r1
 8002252:	4611      	mov	r1, r2
 8002254:	461a      	mov	r2, r3
 8002256:	4603      	mov	r3, r0
 8002258:	817b      	strh	r3, [r7, #10]
 800225a:	460b      	mov	r3, r1
 800225c:	813b      	strh	r3, [r7, #8]
 800225e:	4613      	mov	r3, r2
 8002260:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b20      	cmp	r3, #32
 800226c:	f040 80f9 	bne.w	8002462 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002270:	6a3b      	ldr	r3, [r7, #32]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d002      	beq.n	800227c <HAL_I2C_Mem_Write+0x34>
 8002276:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002278:	2b00      	cmp	r3, #0
 800227a:	d105      	bne.n	8002288 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002282:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0ed      	b.n	8002464 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_I2C_Mem_Write+0x4e>
 8002292:	2302      	movs	r3, #2
 8002294:	e0e6      	b.n	8002464 <HAL_I2C_Mem_Write+0x21c>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800229e:	f7ff fa5f 	bl	8001760 <HAL_GetTick>
 80022a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	2319      	movs	r3, #25
 80022aa:	2201      	movs	r2, #1
 80022ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 fac3 	bl	800283c <I2C_WaitOnFlagUntilTimeout>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0d1      	b.n	8002464 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2221      	movs	r2, #33	@ 0x21
 80022c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2240      	movs	r2, #64	@ 0x40
 80022cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6a3a      	ldr	r2, [r7, #32]
 80022da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80022e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022e8:	88f8      	ldrh	r0, [r7, #6]
 80022ea:	893a      	ldrh	r2, [r7, #8]
 80022ec:	8979      	ldrh	r1, [r7, #10]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	9301      	str	r3, [sp, #4]
 80022f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	4603      	mov	r3, r0
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f000 f9d3 	bl	80026a4 <I2C_RequestMemoryWrite>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d005      	beq.n	8002310 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0a9      	b.n	8002464 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002314:	b29b      	uxth	r3, r3
 8002316:	2bff      	cmp	r3, #255	@ 0xff
 8002318:	d90e      	bls.n	8002338 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	22ff      	movs	r2, #255	@ 0xff
 800231e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002324:	b2da      	uxtb	r2, r3
 8002326:	8979      	ldrh	r1, [r7, #10]
 8002328:	2300      	movs	r3, #0
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 fc47 	bl	8002bc4 <I2C_TransferConfig>
 8002336:	e00f      	b.n	8002358 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800233c:	b29a      	uxth	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002346:	b2da      	uxtb	r2, r3
 8002348:	8979      	ldrh	r1, [r7, #10]
 800234a:	2300      	movs	r3, #0
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 fc36 	bl	8002bc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f000 fac6 	bl	80028ee <I2C_WaitOnTXISFlagUntilTimeout>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e07b      	b.n	8002464 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002370:	781a      	ldrb	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002386:	b29b      	uxth	r3, r3
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002394:	3b01      	subs	r3, #1
 8002396:	b29a      	uxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d034      	beq.n	8002410 <HAL_I2C_Mem_Write+0x1c8>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d130      	bne.n	8002410 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b4:	2200      	movs	r2, #0
 80023b6:	2180      	movs	r1, #128	@ 0x80
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 fa3f 	bl	800283c <I2C_WaitOnFlagUntilTimeout>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e04d      	b.n	8002464 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	2bff      	cmp	r3, #255	@ 0xff
 80023d0:	d90e      	bls.n	80023f0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	22ff      	movs	r2, #255	@ 0xff
 80023d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	8979      	ldrh	r1, [r7, #10]
 80023e0:	2300      	movs	r3, #0
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 fbeb 	bl	8002bc4 <I2C_TransferConfig>
 80023ee:	e00f      	b.n	8002410 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023fe:	b2da      	uxtb	r2, r3
 8002400:	8979      	ldrh	r1, [r7, #10]
 8002402:	2300      	movs	r3, #0
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 fbda 	bl	8002bc4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002414:	b29b      	uxth	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d19e      	bne.n	8002358 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 faac 	bl	800297c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e01a      	b.n	8002464 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2220      	movs	r2, #32
 8002434:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6859      	ldr	r1, [r3, #4]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b0a      	ldr	r3, [pc, #40]	@ (800246c <HAL_I2C_Mem_Write+0x224>)
 8002442:	400b      	ands	r3, r1
 8002444:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	e000      	b.n	8002464 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002462:	2302      	movs	r3, #2
  }
}
 8002464:	4618      	mov	r0, r3
 8002466:	3718      	adds	r7, #24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	fe00e800 	.word	0xfe00e800

08002470 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af02      	add	r7, sp, #8
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	4608      	mov	r0, r1
 800247a:	4611      	mov	r1, r2
 800247c:	461a      	mov	r2, r3
 800247e:	4603      	mov	r3, r0
 8002480:	817b      	strh	r3, [r7, #10]
 8002482:	460b      	mov	r3, r1
 8002484:	813b      	strh	r3, [r7, #8]
 8002486:	4613      	mov	r3, r2
 8002488:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b20      	cmp	r3, #32
 8002494:	f040 80fd 	bne.w	8002692 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <HAL_I2C_Mem_Read+0x34>
 800249e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d105      	bne.n	80024b0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024aa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0f1      	b.n	8002694 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_I2C_Mem_Read+0x4e>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e0ea      	b.n	8002694 <HAL_I2C_Mem_Read+0x224>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024c6:	f7ff f94b 	bl	8001760 <HAL_GetTick>
 80024ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	2319      	movs	r3, #25
 80024d2:	2201      	movs	r2, #1
 80024d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 f9af 	bl	800283c <I2C_WaitOnFlagUntilTimeout>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0d5      	b.n	8002694 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2222      	movs	r2, #34	@ 0x22
 80024ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2240      	movs	r2, #64	@ 0x40
 80024f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a3a      	ldr	r2, [r7, #32]
 8002502:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002508:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002510:	88f8      	ldrh	r0, [r7, #6]
 8002512:	893a      	ldrh	r2, [r7, #8]
 8002514:	8979      	ldrh	r1, [r7, #10]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	9301      	str	r3, [sp, #4]
 800251a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	4603      	mov	r3, r0
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 f913 	bl	800274c <I2C_RequestMemoryRead>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d005      	beq.n	8002538 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e0ad      	b.n	8002694 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800253c:	b29b      	uxth	r3, r3
 800253e:	2bff      	cmp	r3, #255	@ 0xff
 8002540:	d90e      	bls.n	8002560 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2201      	movs	r2, #1
 8002546:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800254c:	b2da      	uxtb	r2, r3
 800254e:	8979      	ldrh	r1, [r7, #10]
 8002550:	4b52      	ldr	r3, [pc, #328]	@ (800269c <HAL_I2C_Mem_Read+0x22c>)
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 fb33 	bl	8002bc4 <I2C_TransferConfig>
 800255e:	e00f      	b.n	8002580 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002564:	b29a      	uxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800256e:	b2da      	uxtb	r2, r3
 8002570:	8979      	ldrh	r1, [r7, #10]
 8002572:	4b4a      	ldr	r3, [pc, #296]	@ (800269c <HAL_I2C_Mem_Read+0x22c>)
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800257a:	68f8      	ldr	r0, [r7, #12]
 800257c:	f000 fb22 	bl	8002bc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002586:	2200      	movs	r2, #0
 8002588:	2104      	movs	r1, #4
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 f956 	bl	800283c <I2C_WaitOnFlagUntilTimeout>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e07c      	b.n	8002694 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ac:	1c5a      	adds	r2, r3, #1
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	3b01      	subs	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d034      	beq.n	8002640 <HAL_I2C_Mem_Read+0x1d0>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d130      	bne.n	8002640 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e4:	2200      	movs	r2, #0
 80025e6:	2180      	movs	r1, #128	@ 0x80
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 f927 	bl	800283c <I2C_WaitOnFlagUntilTimeout>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e04d      	b.n	8002694 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2bff      	cmp	r3, #255	@ 0xff
 8002600:	d90e      	bls.n	8002620 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2201      	movs	r2, #1
 8002606:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800260c:	b2da      	uxtb	r2, r3
 800260e:	8979      	ldrh	r1, [r7, #10]
 8002610:	2300      	movs	r3, #0
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 fad3 	bl	8002bc4 <I2C_TransferConfig>
 800261e:	e00f      	b.n	8002640 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800262e:	b2da      	uxtb	r2, r3
 8002630:	8979      	ldrh	r1, [r7, #10]
 8002632:	2300      	movs	r3, #0
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 fac2 	bl	8002bc4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002644:	b29b      	uxth	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d19a      	bne.n	8002580 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 f994 	bl	800297c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e01a      	b.n	8002694 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2220      	movs	r2, #32
 8002664:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6859      	ldr	r1, [r3, #4]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4b0b      	ldr	r3, [pc, #44]	@ (80026a0 <HAL_I2C_Mem_Read+0x230>)
 8002672:	400b      	ands	r3, r1
 8002674:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2220      	movs	r2, #32
 800267a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	e000      	b.n	8002694 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002692:	2302      	movs	r3, #2
  }
}
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	80002400 	.word	0x80002400
 80026a0:	fe00e800 	.word	0xfe00e800

080026a4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	4608      	mov	r0, r1
 80026ae:	4611      	mov	r1, r2
 80026b0:	461a      	mov	r2, r3
 80026b2:	4603      	mov	r3, r0
 80026b4:	817b      	strh	r3, [r7, #10]
 80026b6:	460b      	mov	r3, r1
 80026b8:	813b      	strh	r3, [r7, #8]
 80026ba:	4613      	mov	r3, r2
 80026bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80026be:	88fb      	ldrh	r3, [r7, #6]
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	8979      	ldrh	r1, [r7, #10]
 80026c4:	4b20      	ldr	r3, [pc, #128]	@ (8002748 <I2C_RequestMemoryWrite+0xa4>)
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 fa79 	bl	8002bc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026d2:	69fa      	ldr	r2, [r7, #28]
 80026d4:	69b9      	ldr	r1, [r7, #24]
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 f909 	bl	80028ee <I2C_WaitOnTXISFlagUntilTimeout>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e02c      	b.n	8002740 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d105      	bne.n	80026f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026ec:	893b      	ldrh	r3, [r7, #8]
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80026f6:	e015      	b.n	8002724 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80026f8:	893b      	ldrh	r3, [r7, #8]
 80026fa:	0a1b      	lsrs	r3, r3, #8
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	69b9      	ldr	r1, [r7, #24]
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f000 f8ef 	bl	80028ee <I2C_WaitOnTXISFlagUntilTimeout>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e012      	b.n	8002740 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800271a:	893b      	ldrh	r3, [r7, #8]
 800271c:	b2da      	uxtb	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	2200      	movs	r2, #0
 800272c:	2180      	movs	r1, #128	@ 0x80
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 f884 	bl	800283c <I2C_WaitOnFlagUntilTimeout>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	80002000 	.word	0x80002000

0800274c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af02      	add	r7, sp, #8
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	4608      	mov	r0, r1
 8002756:	4611      	mov	r1, r2
 8002758:	461a      	mov	r2, r3
 800275a:	4603      	mov	r3, r0
 800275c:	817b      	strh	r3, [r7, #10]
 800275e:	460b      	mov	r3, r1
 8002760:	813b      	strh	r3, [r7, #8]
 8002762:	4613      	mov	r3, r2
 8002764:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002766:	88fb      	ldrh	r3, [r7, #6]
 8002768:	b2da      	uxtb	r2, r3
 800276a:	8979      	ldrh	r1, [r7, #10]
 800276c:	4b20      	ldr	r3, [pc, #128]	@ (80027f0 <I2C_RequestMemoryRead+0xa4>)
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	2300      	movs	r3, #0
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 fa26 	bl	8002bc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002778:	69fa      	ldr	r2, [r7, #28]
 800277a:	69b9      	ldr	r1, [r7, #24]
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 f8b6 	bl	80028ee <I2C_WaitOnTXISFlagUntilTimeout>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e02c      	b.n	80027e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800278c:	88fb      	ldrh	r3, [r7, #6]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d105      	bne.n	800279e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002792:	893b      	ldrh	r3, [r7, #8]
 8002794:	b2da      	uxtb	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	629a      	str	r2, [r3, #40]	@ 0x28
 800279c:	e015      	b.n	80027ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800279e:	893b      	ldrh	r3, [r7, #8]
 80027a0:	0a1b      	lsrs	r3, r3, #8
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ac:	69fa      	ldr	r2, [r7, #28]
 80027ae:	69b9      	ldr	r1, [r7, #24]
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f000 f89c 	bl	80028ee <I2C_WaitOnTXISFlagUntilTimeout>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e012      	b.n	80027e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027c0:	893b      	ldrh	r3, [r7, #8]
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	2200      	movs	r2, #0
 80027d2:	2140      	movs	r1, #64	@ 0x40
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 f831 	bl	800283c <I2C_WaitOnFlagUntilTimeout>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	80002000 	.word	0x80002000

080027f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b02      	cmp	r3, #2
 8002808:	d103      	bne.n	8002812 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2200      	movs	r2, #0
 8002810:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b01      	cmp	r3, #1
 800281e:	d007      	beq.n	8002830 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	699a      	ldr	r2, [r3, #24]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	619a      	str	r2, [r3, #24]
  }
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	4613      	mov	r3, r2
 800284a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800284c:	e03b      	b.n	80028c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	6839      	ldr	r1, [r7, #0]
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 f8d6 	bl	8002a04 <I2C_IsErrorOccurred>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e041      	b.n	80028e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002868:	d02d      	beq.n	80028c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800286a:	f7fe ff79 	bl	8001760 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d302      	bcc.n	8002880 <I2C_WaitOnFlagUntilTimeout+0x44>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d122      	bne.n	80028c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699a      	ldr	r2, [r3, #24]
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	4013      	ands	r3, r2
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	429a      	cmp	r2, r3
 800288e:	bf0c      	ite	eq
 8002890:	2301      	moveq	r3, #1
 8002892:	2300      	movne	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	461a      	mov	r2, r3
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	429a      	cmp	r2, r3
 800289c:	d113      	bne.n	80028c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a2:	f043 0220 	orr.w	r2, r3, #32
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2220      	movs	r2, #32
 80028ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e00f      	b.n	80028e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699a      	ldr	r2, [r3, #24]
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	4013      	ands	r3, r2
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	bf0c      	ite	eq
 80028d6:	2301      	moveq	r3, #1
 80028d8:	2300      	movne	r3, #0
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	461a      	mov	r2, r3
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d0b4      	beq.n	800284e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b084      	sub	sp, #16
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028fa:	e033      	b.n	8002964 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	68b9      	ldr	r1, [r7, #8]
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 f87f 	bl	8002a04 <I2C_IsErrorOccurred>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e031      	b.n	8002974 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002916:	d025      	beq.n	8002964 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002918:	f7fe ff22 	bl	8001760 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	429a      	cmp	r2, r3
 8002926:	d302      	bcc.n	800292e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d11a      	bne.n	8002964 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b02      	cmp	r3, #2
 800293a:	d013      	beq.n	8002964 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2220      	movs	r2, #32
 800294c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e007      	b.n	8002974 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b02      	cmp	r3, #2
 8002970:	d1c4      	bne.n	80028fc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002988:	e02f      	b.n	80029ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	68b9      	ldr	r1, [r7, #8]
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 f838 	bl	8002a04 <I2C_IsErrorOccurred>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e02d      	b.n	80029fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800299e:	f7fe fedf 	bl	8001760 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d302      	bcc.n	80029b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d11a      	bne.n	80029ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	2b20      	cmp	r3, #32
 80029c0:	d013      	beq.n	80029ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c6:	f043 0220 	orr.w	r2, r3, #32
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2220      	movs	r2, #32
 80029d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e007      	b.n	80029fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	f003 0320 	and.w	r3, r3, #32
 80029f4:	2b20      	cmp	r3, #32
 80029f6:	d1c8      	bne.n	800298a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08a      	sub	sp, #40	@ 0x28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	f003 0310 	and.w	r3, r3, #16
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d068      	beq.n	8002b02 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2210      	movs	r2, #16
 8002a36:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a38:	e049      	b.n	8002ace <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a40:	d045      	beq.n	8002ace <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a42:	f7fe fe8d 	bl	8001760 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d302      	bcc.n	8002a58 <I2C_IsErrorOccurred+0x54>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d13a      	bne.n	8002ace <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a62:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a6a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a7a:	d121      	bne.n	8002ac0 <I2C_IsErrorOccurred+0xbc>
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a82:	d01d      	beq.n	8002ac0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002a84:	7cfb      	ldrb	r3, [r7, #19]
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	d01a      	beq.n	8002ac0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a98:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002a9a:	f7fe fe61 	bl	8001760 <HAL_GetTick>
 8002a9e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aa0:	e00e      	b.n	8002ac0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002aa2:	f7fe fe5d 	bl	8001760 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b19      	cmp	r3, #25
 8002aae:	d907      	bls.n	8002ac0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	f043 0320 	orr.w	r3, r3, #32
 8002ab6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002abe:	e006      	b.n	8002ace <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	2b20      	cmp	r3, #32
 8002acc:	d1e9      	bne.n	8002aa2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b20      	cmp	r3, #32
 8002ada:	d003      	beq.n	8002ae4 <I2C_IsErrorOccurred+0xe0>
 8002adc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0aa      	beq.n	8002a3a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d103      	bne.n	8002af4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2220      	movs	r2, #32
 8002af2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002af4:	6a3b      	ldr	r3, [r7, #32]
 8002af6:	f043 0304 	orr.w	r3, r3, #4
 8002afa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00b      	beq.n	8002b2c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00b      	beq.n	8002b4e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	f043 0308 	orr.w	r3, r3, #8
 8002b3c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00b      	beq.n	8002b70 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	f043 0302 	orr.w	r3, r3, #2
 8002b5e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002b70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d01c      	beq.n	8002bb2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f7ff fe3b 	bl	80027f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6859      	ldr	r1, [r3, #4]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc0 <I2C_IsErrorOccurred+0x1bc>)
 8002b8a:	400b      	ands	r3, r1
 8002b8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	431a      	orrs	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002bb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3728      	adds	r7, #40	@ 0x28
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	fe00e800 	.word	0xfe00e800

08002bc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b087      	sub	sp, #28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	607b      	str	r3, [r7, #4]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	817b      	strh	r3, [r7, #10]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bd6:	897b      	ldrh	r3, [r7, #10]
 8002bd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002bdc:	7a7b      	ldrb	r3, [r7, #9]
 8002bde:	041b      	lsls	r3, r3, #16
 8002be0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002be4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bf2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	0d5b      	lsrs	r3, r3, #21
 8002bfe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002c02:	4b08      	ldr	r3, [pc, #32]	@ (8002c24 <I2C_TransferConfig+0x60>)
 8002c04:	430b      	orrs	r3, r1
 8002c06:	43db      	mvns	r3, r3
 8002c08:	ea02 0103 	and.w	r1, r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c16:	bf00      	nop
 8002c18:	371c      	adds	r7, #28
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	03ff63ff 	.word	0x03ff63ff

08002c28 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d138      	bne.n	8002cb0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e032      	b.n	8002cb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2224      	movs	r2, #36	@ 0x24
 8002c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0201 	bic.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c7a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6819      	ldr	r1, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	e000      	b.n	8002cb2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002cb0:	2302      	movs	r3, #2
  }
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b085      	sub	sp, #20
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
 8002cc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b20      	cmp	r3, #32
 8002cd2:	d139      	bne.n	8002d48 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e033      	b.n	8002d4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2224      	movs	r2, #36	@ 0x24
 8002cee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0201 	bic.w	r2, r2, #1
 8002d00:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002d10:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	021b      	lsls	r3, r3, #8
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f042 0201 	orr.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2220      	movs	r2, #32
 8002d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	e000      	b.n	8002d4a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d48:	2302      	movs	r3, #2
  }
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
	...

08002d58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d5c:	4b04      	ldr	r3, [pc, #16]	@ (8002d70 <HAL_PWREx_GetVoltageRange+0x18>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	40007000 	.word	0x40007000

08002d74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d82:	d130      	bne.n	8002de6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d84:	4b23      	ldr	r3, [pc, #140]	@ (8002e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d90:	d038      	beq.n	8002e04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d92:	4b20      	ldr	r3, [pc, #128]	@ (8002e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d9a:	4a1e      	ldr	r2, [pc, #120]	@ (8002e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d9c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002da0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002da2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e18 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2232      	movs	r2, #50	@ 0x32
 8002da8:	fb02 f303 	mul.w	r3, r2, r3
 8002dac:	4a1b      	ldr	r2, [pc, #108]	@ (8002e1c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002dae:	fba2 2303 	umull	r2, r3, r2, r3
 8002db2:	0c9b      	lsrs	r3, r3, #18
 8002db4:	3301      	adds	r3, #1
 8002db6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002db8:	e002      	b.n	8002dc0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dc0:	4b14      	ldr	r3, [pc, #80]	@ (8002e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dcc:	d102      	bne.n	8002dd4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1f2      	bne.n	8002dba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ddc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002de0:	d110      	bne.n	8002e04 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e00f      	b.n	8002e06 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002de6:	4b0b      	ldr	r3, [pc, #44]	@ (8002e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002dee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002df2:	d007      	beq.n	8002e04 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002df4:	4b07      	ldr	r3, [pc, #28]	@ (8002e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002dfc:	4a05      	ldr	r2, [pc, #20]	@ (8002e14 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e02:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40007000 	.word	0x40007000
 8002e18:	20000004 	.word	0x20000004
 8002e1c:	431bde83 	.word	0x431bde83

08002e20 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e3ca      	b.n	80035c8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e32:	4b97      	ldr	r3, [pc, #604]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f003 030c 	and.w	r3, r3, #12
 8002e3a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e3c:	4b94      	ldr	r3, [pc, #592]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	f003 0303 	and.w	r3, r3, #3
 8002e44:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0310 	and.w	r3, r3, #16
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 80e4 	beq.w	800301c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d007      	beq.n	8002e6a <HAL_RCC_OscConfig+0x4a>
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	2b0c      	cmp	r3, #12
 8002e5e:	f040 808b 	bne.w	8002f78 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	f040 8087 	bne.w	8002f78 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e6a:	4b89      	ldr	r3, [pc, #548]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d005      	beq.n	8002e82 <HAL_RCC_OscConfig+0x62>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e3a2      	b.n	80035c8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1a      	ldr	r2, [r3, #32]
 8002e86:	4b82      	ldr	r3, [pc, #520]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d004      	beq.n	8002e9c <HAL_RCC_OscConfig+0x7c>
 8002e92:	4b7f      	ldr	r3, [pc, #508]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e9a:	e005      	b.n	8002ea8 <HAL_RCC_OscConfig+0x88>
 8002e9c:	4b7c      	ldr	r3, [pc, #496]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ea2:	091b      	lsrs	r3, r3, #4
 8002ea4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d223      	bcs.n	8002ef4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 fd55 	bl	8003960 <RCC_SetFlashLatencyFromMSIRange>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e383      	b.n	80035c8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ec0:	4b73      	ldr	r3, [pc, #460]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a72      	ldr	r2, [pc, #456]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002ec6:	f043 0308 	orr.w	r3, r3, #8
 8002eca:	6013      	str	r3, [r2, #0]
 8002ecc:	4b70      	ldr	r3, [pc, #448]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	496d      	ldr	r1, [pc, #436]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ede:	4b6c      	ldr	r3, [pc, #432]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	021b      	lsls	r3, r3, #8
 8002eec:	4968      	ldr	r1, [pc, #416]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	604b      	str	r3, [r1, #4]
 8002ef2:	e025      	b.n	8002f40 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ef4:	4b66      	ldr	r3, [pc, #408]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a65      	ldr	r2, [pc, #404]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002efa:	f043 0308 	orr.w	r3, r3, #8
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	4b63      	ldr	r3, [pc, #396]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	4960      	ldr	r1, [pc, #384]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f12:	4b5f      	ldr	r3, [pc, #380]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	021b      	lsls	r3, r3, #8
 8002f20:	495b      	ldr	r1, [pc, #364]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d109      	bne.n	8002f40 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 fd15 	bl	8003960 <RCC_SetFlashLatencyFromMSIRange>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e343      	b.n	80035c8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f40:	f000 fc4a 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 8002f44:	4602      	mov	r2, r0
 8002f46:	4b52      	ldr	r3, [pc, #328]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	091b      	lsrs	r3, r3, #4
 8002f4c:	f003 030f 	and.w	r3, r3, #15
 8002f50:	4950      	ldr	r1, [pc, #320]	@ (8003094 <HAL_RCC_OscConfig+0x274>)
 8002f52:	5ccb      	ldrb	r3, [r1, r3]
 8002f54:	f003 031f 	and.w	r3, r3, #31
 8002f58:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5c:	4a4e      	ldr	r2, [pc, #312]	@ (8003098 <HAL_RCC_OscConfig+0x278>)
 8002f5e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f60:	4b4e      	ldr	r3, [pc, #312]	@ (800309c <HAL_RCC_OscConfig+0x27c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7fe fbab 	bl	80016c0 <HAL_InitTick>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d052      	beq.n	800301a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	e327      	b.n	80035c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d032      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f80:	4b43      	ldr	r3, [pc, #268]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a42      	ldr	r2, [pc, #264]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f8c:	f7fe fbe8 	bl	8001760 <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f94:	f7fe fbe4 	bl	8001760 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e310      	b.n	80035c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fa6:	4b3a      	ldr	r3, [pc, #232]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0f0      	beq.n	8002f94 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fb2:	4b37      	ldr	r3, [pc, #220]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a36      	ldr	r2, [pc, #216]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002fb8:	f043 0308 	orr.w	r3, r3, #8
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	4b34      	ldr	r3, [pc, #208]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	4931      	ldr	r1, [pc, #196]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fd0:	4b2f      	ldr	r3, [pc, #188]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69db      	ldr	r3, [r3, #28]
 8002fdc:	021b      	lsls	r3, r3, #8
 8002fde:	492c      	ldr	r1, [pc, #176]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	604b      	str	r3, [r1, #4]
 8002fe4:	e01a      	b.n	800301c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fe6:	4b2a      	ldr	r3, [pc, #168]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a29      	ldr	r2, [pc, #164]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8002fec:	f023 0301 	bic.w	r3, r3, #1
 8002ff0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ff2:	f7fe fbb5 	bl	8001760 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ffa:	f7fe fbb1 	bl	8001760 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e2dd      	b.n	80035c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800300c:	4b20      	ldr	r3, [pc, #128]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1f0      	bne.n	8002ffa <HAL_RCC_OscConfig+0x1da>
 8003018:	e000      	b.n	800301c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800301a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d074      	beq.n	8003112 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	2b08      	cmp	r3, #8
 800302c:	d005      	beq.n	800303a <HAL_RCC_OscConfig+0x21a>
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	2b0c      	cmp	r3, #12
 8003032:	d10e      	bne.n	8003052 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	2b03      	cmp	r3, #3
 8003038:	d10b      	bne.n	8003052 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800303a:	4b15      	ldr	r3, [pc, #84]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d064      	beq.n	8003110 <HAL_RCC_OscConfig+0x2f0>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d160      	bne.n	8003110 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e2ba      	b.n	80035c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800305a:	d106      	bne.n	800306a <HAL_RCC_OscConfig+0x24a>
 800305c:	4b0c      	ldr	r3, [pc, #48]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a0b      	ldr	r2, [pc, #44]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8003062:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003066:	6013      	str	r3, [r2, #0]
 8003068:	e026      	b.n	80030b8 <HAL_RCC_OscConfig+0x298>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003072:	d115      	bne.n	80030a0 <HAL_RCC_OscConfig+0x280>
 8003074:	4b06      	ldr	r3, [pc, #24]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a05      	ldr	r2, [pc, #20]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 800307a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	4b03      	ldr	r3, [pc, #12]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a02      	ldr	r2, [pc, #8]	@ (8003090 <HAL_RCC_OscConfig+0x270>)
 8003086:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	e014      	b.n	80030b8 <HAL_RCC_OscConfig+0x298>
 800308e:	bf00      	nop
 8003090:	40021000 	.word	0x40021000
 8003094:	08007be0 	.word	0x08007be0
 8003098:	20000004 	.word	0x20000004
 800309c:	20000008 	.word	0x20000008
 80030a0:	4ba0      	ldr	r3, [pc, #640]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a9f      	ldr	r2, [pc, #636]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 80030a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	4b9d      	ldr	r3, [pc, #628]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a9c      	ldr	r2, [pc, #624]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 80030b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d013      	beq.n	80030e8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c0:	f7fe fb4e 	bl	8001760 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c8:	f7fe fb4a 	bl	8001760 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b64      	cmp	r3, #100	@ 0x64
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e276      	b.n	80035c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030da:	4b92      	ldr	r3, [pc, #584]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0x2a8>
 80030e6:	e014      	b.n	8003112 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e8:	f7fe fb3a 	bl	8001760 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f0:	f7fe fb36 	bl	8001760 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b64      	cmp	r3, #100	@ 0x64
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e262      	b.n	80035c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003102:	4b88      	ldr	r3, [pc, #544]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0x2d0>
 800310e:	e000      	b.n	8003112 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d060      	beq.n	80031e0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	2b04      	cmp	r3, #4
 8003122:	d005      	beq.n	8003130 <HAL_RCC_OscConfig+0x310>
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	2b0c      	cmp	r3, #12
 8003128:	d119      	bne.n	800315e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2b02      	cmp	r3, #2
 800312e:	d116      	bne.n	800315e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003130:	4b7c      	ldr	r3, [pc, #496]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_RCC_OscConfig+0x328>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e23f      	b.n	80035c8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003148:	4b76      	ldr	r3, [pc, #472]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	061b      	lsls	r3, r3, #24
 8003156:	4973      	ldr	r1, [pc, #460]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 8003158:	4313      	orrs	r3, r2
 800315a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800315c:	e040      	b.n	80031e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d023      	beq.n	80031ae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003166:	4b6f      	ldr	r3, [pc, #444]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a6e      	ldr	r2, [pc, #440]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 800316c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003170:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003172:	f7fe faf5 	bl	8001760 <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003178:	e008      	b.n	800318c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800317a:	f7fe faf1 	bl	8001760 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e21d      	b.n	80035c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800318c:	4b65      	ldr	r3, [pc, #404]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0f0      	beq.n	800317a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003198:	4b62      	ldr	r3, [pc, #392]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	061b      	lsls	r3, r3, #24
 80031a6:	495f      	ldr	r1, [pc, #380]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	604b      	str	r3, [r1, #4]
 80031ac:	e018      	b.n	80031e0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ae:	4b5d      	ldr	r3, [pc, #372]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a5c      	ldr	r2, [pc, #368]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 80031b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ba:	f7fe fad1 	bl	8001760 <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c2:	f7fe facd 	bl	8001760 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e1f9      	b.n	80035c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031d4:	4b53      	ldr	r3, [pc, #332]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1f0      	bne.n	80031c2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0308 	and.w	r3, r3, #8
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d03c      	beq.n	8003266 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d01c      	beq.n	800322e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031f4:	4b4b      	ldr	r3, [pc, #300]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 80031f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031fa:	4a4a      	ldr	r2, [pc, #296]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 80031fc:	f043 0301 	orr.w	r3, r3, #1
 8003200:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003204:	f7fe faac 	bl	8001760 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800320c:	f7fe faa8 	bl	8001760 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e1d4      	b.n	80035c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800321e:	4b41      	ldr	r3, [pc, #260]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 8003220:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0ef      	beq.n	800320c <HAL_RCC_OscConfig+0x3ec>
 800322c:	e01b      	b.n	8003266 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800322e:	4b3d      	ldr	r3, [pc, #244]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 8003230:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003234:	4a3b      	ldr	r2, [pc, #236]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 8003236:	f023 0301 	bic.w	r3, r3, #1
 800323a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323e:	f7fe fa8f 	bl	8001760 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003246:	f7fe fa8b 	bl	8001760 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e1b7      	b.n	80035c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003258:	4b32      	ldr	r3, [pc, #200]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 800325a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1ef      	bne.n	8003246 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 80a6 	beq.w	80033c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003274:	2300      	movs	r3, #0
 8003276:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003278:	4b2a      	ldr	r3, [pc, #168]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 800327a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800327c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10d      	bne.n	80032a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003284:	4b27      	ldr	r3, [pc, #156]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 8003286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003288:	4a26      	ldr	r2, [pc, #152]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 800328a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800328e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003290:	4b24      	ldr	r3, [pc, #144]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 8003292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800329c:	2301      	movs	r3, #1
 800329e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032a0:	4b21      	ldr	r3, [pc, #132]	@ (8003328 <HAL_RCC_OscConfig+0x508>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d118      	bne.n	80032de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003328 <HAL_RCC_OscConfig+0x508>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003328 <HAL_RCC_OscConfig+0x508>)
 80032b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032b8:	f7fe fa52 	bl	8001760 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c0:	f7fe fa4e 	bl	8001760 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e17a      	b.n	80035c8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032d2:	4b15      	ldr	r3, [pc, #84]	@ (8003328 <HAL_RCC_OscConfig+0x508>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f0      	beq.n	80032c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d108      	bne.n	80032f8 <HAL_RCC_OscConfig+0x4d8>
 80032e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 80032e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 80032ee:	f043 0301 	orr.w	r3, r3, #1
 80032f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032f6:	e029      	b.n	800334c <HAL_RCC_OscConfig+0x52c>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	2b05      	cmp	r3, #5
 80032fe:	d115      	bne.n	800332c <HAL_RCC_OscConfig+0x50c>
 8003300:	4b08      	ldr	r3, [pc, #32]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 8003302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003306:	4a07      	ldr	r2, [pc, #28]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 8003308:	f043 0304 	orr.w	r3, r3, #4
 800330c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003310:	4b04      	ldr	r3, [pc, #16]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003316:	4a03      	ldr	r2, [pc, #12]	@ (8003324 <HAL_RCC_OscConfig+0x504>)
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003320:	e014      	b.n	800334c <HAL_RCC_OscConfig+0x52c>
 8003322:	bf00      	nop
 8003324:	40021000 	.word	0x40021000
 8003328:	40007000 	.word	0x40007000
 800332c:	4b9c      	ldr	r3, [pc, #624]	@ (80035a0 <HAL_RCC_OscConfig+0x780>)
 800332e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003332:	4a9b      	ldr	r2, [pc, #620]	@ (80035a0 <HAL_RCC_OscConfig+0x780>)
 8003334:	f023 0301 	bic.w	r3, r3, #1
 8003338:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800333c:	4b98      	ldr	r3, [pc, #608]	@ (80035a0 <HAL_RCC_OscConfig+0x780>)
 800333e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003342:	4a97      	ldr	r2, [pc, #604]	@ (80035a0 <HAL_RCC_OscConfig+0x780>)
 8003344:	f023 0304 	bic.w	r3, r3, #4
 8003348:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d016      	beq.n	8003382 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003354:	f7fe fa04 	bl	8001760 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800335a:	e00a      	b.n	8003372 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800335c:	f7fe fa00 	bl	8001760 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800336a:	4293      	cmp	r3, r2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e12a      	b.n	80035c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003372:	4b8b      	ldr	r3, [pc, #556]	@ (80035a0 <HAL_RCC_OscConfig+0x780>)
 8003374:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0ed      	beq.n	800335c <HAL_RCC_OscConfig+0x53c>
 8003380:	e015      	b.n	80033ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003382:	f7fe f9ed 	bl	8001760 <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003388:	e00a      	b.n	80033a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800338a:	f7fe f9e9 	bl	8001760 <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003398:	4293      	cmp	r3, r2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e113      	b.n	80035c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033a0:	4b7f      	ldr	r3, [pc, #508]	@ (80035a0 <HAL_RCC_OscConfig+0x780>)
 80033a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1ed      	bne.n	800338a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033ae:	7ffb      	ldrb	r3, [r7, #31]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d105      	bne.n	80033c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b4:	4b7a      	ldr	r3, [pc, #488]	@ (80035a0 <HAL_RCC_OscConfig+0x780>)
 80033b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b8:	4a79      	ldr	r2, [pc, #484]	@ (80035a0 <HAL_RCC_OscConfig+0x780>)
 80033ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033be:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 80fe 	beq.w	80035c6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	f040 80d0 	bne.w	8003574 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033d4:	4b72      	ldr	r3, [pc, #456]	@ (80035a0 <HAL_RCC_OscConfig+0x780>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f003 0203 	and.w	r2, r3, #3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d130      	bne.n	800344a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f2:	3b01      	subs	r3, #1
 80033f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d127      	bne.n	800344a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003404:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003406:	429a      	cmp	r2, r3
 8003408:	d11f      	bne.n	800344a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003414:	2a07      	cmp	r2, #7
 8003416:	bf14      	ite	ne
 8003418:	2201      	movne	r2, #1
 800341a:	2200      	moveq	r2, #0
 800341c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800341e:	4293      	cmp	r3, r2
 8003420:	d113      	bne.n	800344a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342c:	085b      	lsrs	r3, r3, #1
 800342e:	3b01      	subs	r3, #1
 8003430:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003432:	429a      	cmp	r2, r3
 8003434:	d109      	bne.n	800344a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003440:	085b      	lsrs	r3, r3, #1
 8003442:	3b01      	subs	r3, #1
 8003444:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003446:	429a      	cmp	r2, r3
 8003448:	d06e      	beq.n	8003528 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	2b0c      	cmp	r3, #12
 800344e:	d069      	beq.n	8003524 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003450:	4b53      	ldr	r3, [pc, #332]	@ (80035a0 <HAL_RCC_OscConfig+0x780>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d105      	bne.n	8003468 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800345c:	4b50      	ldr	r3, [pc, #320]	@ (80035a0 <HAL_RCC_OscConfig+0x780>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e0ad      	b.n	80035c8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800346c:	4b4c      	ldr	r3, [pc, #304]	@ (80035a0 <HAL_RCC_OscConfig+0x780>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a4b      	ldr	r2, [pc, #300]	@ (80035a0 <HAL_RCC_OscConfig+0x780>)
 8003472:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003476:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003478:	f7fe f972 	bl	8001760 <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003480:	f7fe f96e 	bl	8001760 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e09a      	b.n	80035c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003492:	4b43      	ldr	r3, [pc, #268]	@ (80035a0 <HAL_RCC_OscConfig+0x780>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1f0      	bne.n	8003480 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800349e:	4b40      	ldr	r3, [pc, #256]	@ (80035a0 <HAL_RCC_OscConfig+0x780>)
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	4b40      	ldr	r3, [pc, #256]	@ (80035a4 <HAL_RCC_OscConfig+0x784>)
 80034a4:	4013      	ands	r3, r2
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80034ae:	3a01      	subs	r2, #1
 80034b0:	0112      	lsls	r2, r2, #4
 80034b2:	4311      	orrs	r1, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80034b8:	0212      	lsls	r2, r2, #8
 80034ba:	4311      	orrs	r1, r2
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80034c0:	0852      	lsrs	r2, r2, #1
 80034c2:	3a01      	subs	r2, #1
 80034c4:	0552      	lsls	r2, r2, #21
 80034c6:	4311      	orrs	r1, r2
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80034cc:	0852      	lsrs	r2, r2, #1
 80034ce:	3a01      	subs	r2, #1
 80034d0:	0652      	lsls	r2, r2, #25
 80034d2:	4311      	orrs	r1, r2
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80034d8:	0912      	lsrs	r2, r2, #4
 80034da:	0452      	lsls	r2, r2, #17
 80034dc:	430a      	orrs	r2, r1
 80034de:	4930      	ldr	r1, [pc, #192]	@ (80035a0 <HAL_RCC_OscConfig+0x780>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034e4:	4b2e      	ldr	r3, [pc, #184]	@ (80035a0 <HAL_RCC_OscConfig+0x780>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a2d      	ldr	r2, [pc, #180]	@ (80035a0 <HAL_RCC_OscConfig+0x780>)
 80034ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034f0:	4b2b      	ldr	r3, [pc, #172]	@ (80035a0 <HAL_RCC_OscConfig+0x780>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	4a2a      	ldr	r2, [pc, #168]	@ (80035a0 <HAL_RCC_OscConfig+0x780>)
 80034f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034fc:	f7fe f930 	bl	8001760 <HAL_GetTick>
 8003500:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003502:	e008      	b.n	8003516 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003504:	f7fe f92c 	bl	8001760 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	2b02      	cmp	r3, #2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e058      	b.n	80035c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003516:	4b22      	ldr	r3, [pc, #136]	@ (80035a0 <HAL_RCC_OscConfig+0x780>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0f0      	beq.n	8003504 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003522:	e050      	b.n	80035c6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e04f      	b.n	80035c8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003528:	4b1d      	ldr	r3, [pc, #116]	@ (80035a0 <HAL_RCC_OscConfig+0x780>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d148      	bne.n	80035c6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003534:	4b1a      	ldr	r3, [pc, #104]	@ (80035a0 <HAL_RCC_OscConfig+0x780>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a19      	ldr	r2, [pc, #100]	@ (80035a0 <HAL_RCC_OscConfig+0x780>)
 800353a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800353e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003540:	4b17      	ldr	r3, [pc, #92]	@ (80035a0 <HAL_RCC_OscConfig+0x780>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	4a16      	ldr	r2, [pc, #88]	@ (80035a0 <HAL_RCC_OscConfig+0x780>)
 8003546:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800354a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800354c:	f7fe f908 	bl	8001760 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003554:	f7fe f904 	bl	8001760 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e030      	b.n	80035c8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003566:	4b0e      	ldr	r3, [pc, #56]	@ (80035a0 <HAL_RCC_OscConfig+0x780>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0x734>
 8003572:	e028      	b.n	80035c6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	2b0c      	cmp	r3, #12
 8003578:	d023      	beq.n	80035c2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800357a:	4b09      	ldr	r3, [pc, #36]	@ (80035a0 <HAL_RCC_OscConfig+0x780>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a08      	ldr	r2, [pc, #32]	@ (80035a0 <HAL_RCC_OscConfig+0x780>)
 8003580:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003586:	f7fe f8eb 	bl	8001760 <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800358c:	e00c      	b.n	80035a8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800358e:	f7fe f8e7 	bl	8001760 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b02      	cmp	r3, #2
 800359a:	d905      	bls.n	80035a8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e013      	b.n	80035c8 <HAL_RCC_OscConfig+0x7a8>
 80035a0:	40021000 	.word	0x40021000
 80035a4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035a8:	4b09      	ldr	r3, [pc, #36]	@ (80035d0 <HAL_RCC_OscConfig+0x7b0>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1ec      	bne.n	800358e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80035b4:	4b06      	ldr	r3, [pc, #24]	@ (80035d0 <HAL_RCC_OscConfig+0x7b0>)
 80035b6:	68da      	ldr	r2, [r3, #12]
 80035b8:	4905      	ldr	r1, [pc, #20]	@ (80035d0 <HAL_RCC_OscConfig+0x7b0>)
 80035ba:	4b06      	ldr	r3, [pc, #24]	@ (80035d4 <HAL_RCC_OscConfig+0x7b4>)
 80035bc:	4013      	ands	r3, r2
 80035be:	60cb      	str	r3, [r1, #12]
 80035c0:	e001      	b.n	80035c6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e000      	b.n	80035c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3720      	adds	r7, #32
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40021000 	.word	0x40021000
 80035d4:	feeefffc 	.word	0xfeeefffc

080035d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e0e7      	b.n	80037bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035ec:	4b75      	ldr	r3, [pc, #468]	@ (80037c4 <HAL_RCC_ClockConfig+0x1ec>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d910      	bls.n	800361c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fa:	4b72      	ldr	r3, [pc, #456]	@ (80037c4 <HAL_RCC_ClockConfig+0x1ec>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f023 0207 	bic.w	r2, r3, #7
 8003602:	4970      	ldr	r1, [pc, #448]	@ (80037c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	4313      	orrs	r3, r2
 8003608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800360a:	4b6e      	ldr	r3, [pc, #440]	@ (80037c4 <HAL_RCC_ClockConfig+0x1ec>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d001      	beq.n	800361c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e0cf      	b.n	80037bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d010      	beq.n	800364a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	4b66      	ldr	r3, [pc, #408]	@ (80037c8 <HAL_RCC_ClockConfig+0x1f0>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003634:	429a      	cmp	r2, r3
 8003636:	d908      	bls.n	800364a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003638:	4b63      	ldr	r3, [pc, #396]	@ (80037c8 <HAL_RCC_ClockConfig+0x1f0>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	4960      	ldr	r1, [pc, #384]	@ (80037c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	d04c      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b03      	cmp	r3, #3
 800365c:	d107      	bne.n	800366e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800365e:	4b5a      	ldr	r3, [pc, #360]	@ (80037c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d121      	bne.n	80036ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e0a6      	b.n	80037bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d107      	bne.n	8003686 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003676:	4b54      	ldr	r3, [pc, #336]	@ (80037c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d115      	bne.n	80036ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e09a      	b.n	80037bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d107      	bne.n	800369e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800368e:	4b4e      	ldr	r3, [pc, #312]	@ (80037c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d109      	bne.n	80036ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e08e      	b.n	80037bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800369e:	4b4a      	ldr	r3, [pc, #296]	@ (80037c8 <HAL_RCC_ClockConfig+0x1f0>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e086      	b.n	80037bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036ae:	4b46      	ldr	r3, [pc, #280]	@ (80037c8 <HAL_RCC_ClockConfig+0x1f0>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f023 0203 	bic.w	r2, r3, #3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	4943      	ldr	r1, [pc, #268]	@ (80037c8 <HAL_RCC_ClockConfig+0x1f0>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c0:	f7fe f84e 	bl	8001760 <HAL_GetTick>
 80036c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c6:	e00a      	b.n	80036de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c8:	f7fe f84a 	bl	8001760 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e06e      	b.n	80037bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036de:	4b3a      	ldr	r3, [pc, #232]	@ (80037c8 <HAL_RCC_ClockConfig+0x1f0>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 020c 	and.w	r2, r3, #12
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d1eb      	bne.n	80036c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d010      	beq.n	800371e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	4b31      	ldr	r3, [pc, #196]	@ (80037c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003708:	429a      	cmp	r2, r3
 800370a:	d208      	bcs.n	800371e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800370c:	4b2e      	ldr	r3, [pc, #184]	@ (80037c8 <HAL_RCC_ClockConfig+0x1f0>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	492b      	ldr	r1, [pc, #172]	@ (80037c8 <HAL_RCC_ClockConfig+0x1f0>)
 800371a:	4313      	orrs	r3, r2
 800371c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800371e:	4b29      	ldr	r3, [pc, #164]	@ (80037c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d210      	bcs.n	800374e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372c:	4b25      	ldr	r3, [pc, #148]	@ (80037c4 <HAL_RCC_ClockConfig+0x1ec>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f023 0207 	bic.w	r2, r3, #7
 8003734:	4923      	ldr	r1, [pc, #140]	@ (80037c4 <HAL_RCC_ClockConfig+0x1ec>)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	4313      	orrs	r3, r2
 800373a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800373c:	4b21      	ldr	r3, [pc, #132]	@ (80037c4 <HAL_RCC_ClockConfig+0x1ec>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d001      	beq.n	800374e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e036      	b.n	80037bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0304 	and.w	r3, r3, #4
 8003756:	2b00      	cmp	r3, #0
 8003758:	d008      	beq.n	800376c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800375a:	4b1b      	ldr	r3, [pc, #108]	@ (80037c8 <HAL_RCC_ClockConfig+0x1f0>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	4918      	ldr	r1, [pc, #96]	@ (80037c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003768:	4313      	orrs	r3, r2
 800376a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0308 	and.w	r3, r3, #8
 8003774:	2b00      	cmp	r3, #0
 8003776:	d009      	beq.n	800378c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003778:	4b13      	ldr	r3, [pc, #76]	@ (80037c8 <HAL_RCC_ClockConfig+0x1f0>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	4910      	ldr	r1, [pc, #64]	@ (80037c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003788:	4313      	orrs	r3, r2
 800378a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800378c:	f000 f824 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 8003790:	4602      	mov	r2, r0
 8003792:	4b0d      	ldr	r3, [pc, #52]	@ (80037c8 <HAL_RCC_ClockConfig+0x1f0>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	091b      	lsrs	r3, r3, #4
 8003798:	f003 030f 	and.w	r3, r3, #15
 800379c:	490b      	ldr	r1, [pc, #44]	@ (80037cc <HAL_RCC_ClockConfig+0x1f4>)
 800379e:	5ccb      	ldrb	r3, [r1, r3]
 80037a0:	f003 031f 	and.w	r3, r3, #31
 80037a4:	fa22 f303 	lsr.w	r3, r2, r3
 80037a8:	4a09      	ldr	r2, [pc, #36]	@ (80037d0 <HAL_RCC_ClockConfig+0x1f8>)
 80037aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037ac:	4b09      	ldr	r3, [pc, #36]	@ (80037d4 <HAL_RCC_ClockConfig+0x1fc>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fd ff85 	bl	80016c0 <HAL_InitTick>
 80037b6:	4603      	mov	r3, r0
 80037b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80037ba:	7afb      	ldrb	r3, [r7, #11]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40022000 	.word	0x40022000
 80037c8:	40021000 	.word	0x40021000
 80037cc:	08007be0 	.word	0x08007be0
 80037d0:	20000004 	.word	0x20000004
 80037d4:	20000008 	.word	0x20000008

080037d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	b089      	sub	sp, #36	@ 0x24
 80037dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	61fb      	str	r3, [r7, #28]
 80037e2:	2300      	movs	r3, #0
 80037e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037e6:	4b3e      	ldr	r3, [pc, #248]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
 80037ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037f0:	4b3b      	ldr	r3, [pc, #236]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f003 0303 	and.w	r3, r3, #3
 80037f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d005      	beq.n	800380c <HAL_RCC_GetSysClockFreq+0x34>
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	2b0c      	cmp	r3, #12
 8003804:	d121      	bne.n	800384a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d11e      	bne.n	800384a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800380c:	4b34      	ldr	r3, [pc, #208]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0308 	and.w	r3, r3, #8
 8003814:	2b00      	cmp	r3, #0
 8003816:	d107      	bne.n	8003828 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003818:	4b31      	ldr	r3, [pc, #196]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800381a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800381e:	0a1b      	lsrs	r3, r3, #8
 8003820:	f003 030f 	and.w	r3, r3, #15
 8003824:	61fb      	str	r3, [r7, #28]
 8003826:	e005      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003828:	4b2d      	ldr	r3, [pc, #180]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	091b      	lsrs	r3, r3, #4
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003834:	4a2b      	ldr	r2, [pc, #172]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800383c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10d      	bne.n	8003860 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003848:	e00a      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	2b04      	cmp	r3, #4
 800384e:	d102      	bne.n	8003856 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003850:	4b25      	ldr	r3, [pc, #148]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003852:	61bb      	str	r3, [r7, #24]
 8003854:	e004      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	2b08      	cmp	r3, #8
 800385a:	d101      	bne.n	8003860 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800385c:	4b23      	ldr	r3, [pc, #140]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x114>)
 800385e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	2b0c      	cmp	r3, #12
 8003864:	d134      	bne.n	80038d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003866:	4b1e      	ldr	r3, [pc, #120]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2b02      	cmp	r3, #2
 8003874:	d003      	beq.n	800387e <HAL_RCC_GetSysClockFreq+0xa6>
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	2b03      	cmp	r3, #3
 800387a:	d003      	beq.n	8003884 <HAL_RCC_GetSysClockFreq+0xac>
 800387c:	e005      	b.n	800388a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800387e:	4b1a      	ldr	r3, [pc, #104]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003880:	617b      	str	r3, [r7, #20]
      break;
 8003882:	e005      	b.n	8003890 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003884:	4b19      	ldr	r3, [pc, #100]	@ (80038ec <HAL_RCC_GetSysClockFreq+0x114>)
 8003886:	617b      	str	r3, [r7, #20]
      break;
 8003888:	e002      	b.n	8003890 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	617b      	str	r3, [r7, #20]
      break;
 800388e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003890:	4b13      	ldr	r3, [pc, #76]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	3301      	adds	r3, #1
 800389c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800389e:	4b10      	ldr	r3, [pc, #64]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	0a1b      	lsrs	r3, r3, #8
 80038a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	fb03 f202 	mul.w	r2, r3, r2
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038b6:	4b0a      	ldr	r3, [pc, #40]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	0e5b      	lsrs	r3, r3, #25
 80038bc:	f003 0303 	and.w	r3, r3, #3
 80038c0:	3301      	adds	r3, #1
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038d0:	69bb      	ldr	r3, [r7, #24]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3724      	adds	r7, #36	@ 0x24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40021000 	.word	0x40021000
 80038e4:	08007bf8 	.word	0x08007bf8
 80038e8:	00f42400 	.word	0x00f42400
 80038ec:	007a1200 	.word	0x007a1200

080038f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038f4:	4b03      	ldr	r3, [pc, #12]	@ (8003904 <HAL_RCC_GetHCLKFreq+0x14>)
 80038f6:	681b      	ldr	r3, [r3, #0]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	20000004 	.word	0x20000004

08003908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800390c:	f7ff fff0 	bl	80038f0 <HAL_RCC_GetHCLKFreq>
 8003910:	4602      	mov	r2, r0
 8003912:	4b06      	ldr	r3, [pc, #24]	@ (800392c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	0a1b      	lsrs	r3, r3, #8
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	4904      	ldr	r1, [pc, #16]	@ (8003930 <HAL_RCC_GetPCLK1Freq+0x28>)
 800391e:	5ccb      	ldrb	r3, [r1, r3]
 8003920:	f003 031f 	and.w	r3, r3, #31
 8003924:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003928:	4618      	mov	r0, r3
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40021000 	.word	0x40021000
 8003930:	08007bf0 	.word	0x08007bf0

08003934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003938:	f7ff ffda 	bl	80038f0 <HAL_RCC_GetHCLKFreq>
 800393c:	4602      	mov	r2, r0
 800393e:	4b06      	ldr	r3, [pc, #24]	@ (8003958 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	0adb      	lsrs	r3, r3, #11
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	4904      	ldr	r1, [pc, #16]	@ (800395c <HAL_RCC_GetPCLK2Freq+0x28>)
 800394a:	5ccb      	ldrb	r3, [r1, r3]
 800394c:	f003 031f 	and.w	r3, r3, #31
 8003950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40021000 	.word	0x40021000
 800395c:	08007bf0 	.word	0x08007bf0

08003960 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003968:	2300      	movs	r3, #0
 800396a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800396c:	4b2a      	ldr	r3, [pc, #168]	@ (8003a18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800396e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003978:	f7ff f9ee 	bl	8002d58 <HAL_PWREx_GetVoltageRange>
 800397c:	6178      	str	r0, [r7, #20]
 800397e:	e014      	b.n	80039aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003980:	4b25      	ldr	r3, [pc, #148]	@ (8003a18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003984:	4a24      	ldr	r2, [pc, #144]	@ (8003a18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003986:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800398a:	6593      	str	r3, [r2, #88]	@ 0x58
 800398c:	4b22      	ldr	r3, [pc, #136]	@ (8003a18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800398e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003990:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003994:	60fb      	str	r3, [r7, #12]
 8003996:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003998:	f7ff f9de 	bl	8002d58 <HAL_PWREx_GetVoltageRange>
 800399c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800399e:	4b1e      	ldr	r3, [pc, #120]	@ (8003a18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003a18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039b0:	d10b      	bne.n	80039ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b80      	cmp	r3, #128	@ 0x80
 80039b6:	d919      	bls.n	80039ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2ba0      	cmp	r3, #160	@ 0xa0
 80039bc:	d902      	bls.n	80039c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039be:	2302      	movs	r3, #2
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	e013      	b.n	80039ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039c4:	2301      	movs	r3, #1
 80039c6:	613b      	str	r3, [r7, #16]
 80039c8:	e010      	b.n	80039ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b80      	cmp	r3, #128	@ 0x80
 80039ce:	d902      	bls.n	80039d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80039d0:	2303      	movs	r3, #3
 80039d2:	613b      	str	r3, [r7, #16]
 80039d4:	e00a      	b.n	80039ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b80      	cmp	r3, #128	@ 0x80
 80039da:	d102      	bne.n	80039e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039dc:	2302      	movs	r3, #2
 80039de:	613b      	str	r3, [r7, #16]
 80039e0:	e004      	b.n	80039ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b70      	cmp	r3, #112	@ 0x70
 80039e6:	d101      	bne.n	80039ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039e8:	2301      	movs	r3, #1
 80039ea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039ec:	4b0b      	ldr	r3, [pc, #44]	@ (8003a1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f023 0207 	bic.w	r2, r3, #7
 80039f4:	4909      	ldr	r1, [pc, #36]	@ (8003a1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039fc:	4b07      	ldr	r3, [pc, #28]	@ (8003a1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0307 	and.w	r3, r3, #7
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d001      	beq.n	8003a0e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	40022000 	.word	0x40022000

08003a20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a28:	2300      	movs	r3, #0
 8003a2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d041      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a40:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003a44:	d02a      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003a46:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003a4a:	d824      	bhi.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a50:	d008      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003a52:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a56:	d81e      	bhi.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003a5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a60:	d010      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a62:	e018      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a64:	4b86      	ldr	r3, [pc, #536]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	4a85      	ldr	r2, [pc, #532]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a6e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a70:	e015      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	3304      	adds	r3, #4
 8003a76:	2100      	movs	r1, #0
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f001 f829 	bl	8004ad0 <RCCEx_PLLSAI1_Config>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a82:	e00c      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3320      	adds	r3, #32
 8003a88:	2100      	movs	r1, #0
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f001 f914 	bl	8004cb8 <RCCEx_PLLSAI2_Config>
 8003a90:	4603      	mov	r3, r0
 8003a92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a94:	e003      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	74fb      	strb	r3, [r7, #19]
      break;
 8003a9a:	e000      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a9e:	7cfb      	ldrb	r3, [r7, #19]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10b      	bne.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003aa4:	4b76      	ldr	r3, [pc, #472]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aaa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ab2:	4973      	ldr	r1, [pc, #460]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003aba:	e001      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003abc:	7cfb      	ldrb	r3, [r7, #19]
 8003abe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d041      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ad0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ad4:	d02a      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003ad6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ada:	d824      	bhi.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003adc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ae0:	d008      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ae2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ae6:	d81e      	bhi.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00a      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003aec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003af0:	d010      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003af2:	e018      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003af4:	4b62      	ldr	r3, [pc, #392]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	4a61      	ldr	r2, [pc, #388]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003afe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b00:	e015      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3304      	adds	r3, #4
 8003b06:	2100      	movs	r1, #0
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 ffe1 	bl	8004ad0 <RCCEx_PLLSAI1_Config>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b12:	e00c      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3320      	adds	r3, #32
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f001 f8cc 	bl	8004cb8 <RCCEx_PLLSAI2_Config>
 8003b20:	4603      	mov	r3, r0
 8003b22:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b24:	e003      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	74fb      	strb	r3, [r7, #19]
      break;
 8003b2a:	e000      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003b2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b2e:	7cfb      	ldrb	r3, [r7, #19]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10b      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b34:	4b52      	ldr	r3, [pc, #328]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b3a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b42:	494f      	ldr	r1, [pc, #316]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003b4a:	e001      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b4c:	7cfb      	ldrb	r3, [r7, #19]
 8003b4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 80a0 	beq.w	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b62:	4b47      	ldr	r3, [pc, #284]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003b72:	2300      	movs	r3, #0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00d      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b78:	4b41      	ldr	r3, [pc, #260]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b7c:	4a40      	ldr	r2, [pc, #256]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b82:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b84:	4b3e      	ldr	r3, [pc, #248]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b8c:	60bb      	str	r3, [r7, #8]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b90:	2301      	movs	r3, #1
 8003b92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b94:	4b3b      	ldr	r3, [pc, #236]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a3a      	ldr	r2, [pc, #232]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ba0:	f7fd fdde 	bl	8001760 <HAL_GetTick>
 8003ba4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ba6:	e009      	b.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba8:	f7fd fdda 	bl	8001760 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d902      	bls.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	74fb      	strb	r3, [r7, #19]
        break;
 8003bba:	e005      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003bbc:	4b31      	ldr	r3, [pc, #196]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0ef      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003bc8:	7cfb      	ldrb	r3, [r7, #19]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d15c      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bce:	4b2c      	ldr	r3, [pc, #176]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bd8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d01f      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d019      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bec:	4b24      	ldr	r3, [pc, #144]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bf6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bf8:	4b21      	ldr	r3, [pc, #132]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bfe:	4a20      	ldr	r2, [pc, #128]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c08:	4b1d      	ldr	r3, [pc, #116]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c0e:	4a1c      	ldr	r2, [pc, #112]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c18:	4a19      	ldr	r2, [pc, #100]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d016      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c2a:	f7fd fd99 	bl	8001760 <HAL_GetTick>
 8003c2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c30:	e00b      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c32:	f7fd fd95 	bl	8001760 <HAL_GetTick>
 8003c36:	4602      	mov	r2, r0
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d902      	bls.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	74fb      	strb	r3, [r7, #19]
            break;
 8003c48:	e006      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0ec      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003c58:	7cfb      	ldrb	r3, [r7, #19]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10c      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c5e:	4b08      	ldr	r3, [pc, #32]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c6e:	4904      	ldr	r1, [pc, #16]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003c76:	e009      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c78:	7cfb      	ldrb	r3, [r7, #19]
 8003c7a:	74bb      	strb	r3, [r7, #18]
 8003c7c:	e006      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003c7e:	bf00      	nop
 8003c80:	40021000 	.word	0x40021000
 8003c84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c88:	7cfb      	ldrb	r3, [r7, #19]
 8003c8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c8c:	7c7b      	ldrb	r3, [r7, #17]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d105      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c92:	4b9e      	ldr	r3, [pc, #632]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c96:	4a9d      	ldr	r2, [pc, #628]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c9c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003caa:	4b98      	ldr	r3, [pc, #608]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb0:	f023 0203 	bic.w	r2, r3, #3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb8:	4994      	ldr	r1, [pc, #592]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ccc:	4b8f      	ldr	r3, [pc, #572]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd2:	f023 020c 	bic.w	r2, r3, #12
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cda:	498c      	ldr	r1, [pc, #560]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0304 	and.w	r3, r3, #4
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00a      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cee:	4b87      	ldr	r3, [pc, #540]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfc:	4983      	ldr	r1, [pc, #524]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0308 	and.w	r3, r3, #8
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00a      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d10:	4b7e      	ldr	r3, [pc, #504]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d1e:	497b      	ldr	r1, [pc, #492]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0310 	and.w	r3, r3, #16
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00a      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d32:	4b76      	ldr	r3, [pc, #472]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d40:	4972      	ldr	r1, [pc, #456]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0320 	and.w	r3, r3, #32
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00a      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d54:	4b6d      	ldr	r3, [pc, #436]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d5a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d62:	496a      	ldr	r1, [pc, #424]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00a      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d76:	4b65      	ldr	r3, [pc, #404]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d7c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d84:	4961      	ldr	r1, [pc, #388]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00a      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d98:	4b5c      	ldr	r3, [pc, #368]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003da6:	4959      	ldr	r1, [pc, #356]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00a      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dba:	4b54      	ldr	r3, [pc, #336]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dc0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dc8:	4950      	ldr	r1, [pc, #320]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00a      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ddc:	4b4b      	ldr	r3, [pc, #300]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dea:	4948      	ldr	r1, [pc, #288]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00a      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dfe:	4b43      	ldr	r3, [pc, #268]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e04:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e0c:	493f      	ldr	r1, [pc, #252]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d028      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e20:	4b3a      	ldr	r3, [pc, #232]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e26:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e2e:	4937      	ldr	r1, [pc, #220]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e3e:	d106      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e40:	4b32      	ldr	r3, [pc, #200]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	4a31      	ldr	r2, [pc, #196]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e4a:	60d3      	str	r3, [r2, #12]
 8003e4c:	e011      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e56:	d10c      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fe36 	bl	8004ad0 <RCCEx_PLLSAI1_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e68:	7cfb      	ldrb	r3, [r7, #19]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003e6e:	7cfb      	ldrb	r3, [r7, #19]
 8003e70:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d028      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e7e:	4b23      	ldr	r3, [pc, #140]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e84:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e8c:	491f      	ldr	r1, [pc, #124]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e9c:	d106      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	4a1a      	ldr	r2, [pc, #104]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ea8:	60d3      	str	r3, [r2, #12]
 8003eaa:	e011      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003eb4:	d10c      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	2101      	movs	r1, #1
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 fe07 	bl	8004ad0 <RCCEx_PLLSAI1_Config>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ec6:	7cfb      	ldrb	r3, [r7, #19]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003ecc:	7cfb      	ldrb	r3, [r7, #19]
 8003ece:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d02b      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003edc:	4b0b      	ldr	r3, [pc, #44]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eea:	4908      	ldr	r1, [pc, #32]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ef6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003efa:	d109      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003efc:	4b03      	ldr	r3, [pc, #12]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	4a02      	ldr	r2, [pc, #8]	@ (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f06:	60d3      	str	r3, [r2, #12]
 8003f08:	e014      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003f0a:	bf00      	nop
 8003f0c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f18:	d10c      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	2101      	movs	r1, #1
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fdd5 	bl	8004ad0 <RCCEx_PLLSAI1_Config>
 8003f26:	4603      	mov	r3, r0
 8003f28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f2a:	7cfb      	ldrb	r3, [r7, #19]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d001      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003f30:	7cfb      	ldrb	r3, [r7, #19]
 8003f32:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d02f      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f40:	4b2b      	ldr	r3, [pc, #172]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f46:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f4e:	4928      	ldr	r1, [pc, #160]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f5e:	d10d      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3304      	adds	r3, #4
 8003f64:	2102      	movs	r1, #2
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fdb2 	bl	8004ad0 <RCCEx_PLLSAI1_Config>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f70:	7cfb      	ldrb	r3, [r7, #19]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d014      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f76:	7cfb      	ldrb	r3, [r7, #19]
 8003f78:	74bb      	strb	r3, [r7, #18]
 8003f7a:	e011      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f84:	d10c      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	3320      	adds	r3, #32
 8003f8a:	2102      	movs	r1, #2
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 fe93 	bl	8004cb8 <RCCEx_PLLSAI2_Config>
 8003f92:	4603      	mov	r3, r0
 8003f94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f96:	7cfb      	ldrb	r3, [r7, #19]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f9c:	7cfb      	ldrb	r3, [r7, #19]
 8003f9e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003fac:	4b10      	ldr	r3, [pc, #64]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fba:	490d      	ldr	r1, [pc, #52]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00b      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fce:	4b08      	ldr	r3, [pc, #32]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fd4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fde:	4904      	ldr	r1, [pc, #16]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003fe6:	7cbb      	ldrb	r3, [r7, #18]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40021000 	.word	0x40021000

08003ff4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b088      	sub	sp, #32
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004006:	d13e      	bne.n	8004086 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004008:	4bb2      	ldr	r3, [pc, #712]	@ (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800400a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800400e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004012:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800401a:	d028      	beq.n	800406e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004022:	f200 8542 	bhi.w	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800402c:	d005      	beq.n	800403a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004034:	d00e      	beq.n	8004054 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8004036:	f000 bd38 	b.w	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800403a:	4ba6      	ldr	r3, [pc, #664]	@ (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800403c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b02      	cmp	r3, #2
 8004046:	f040 8532 	bne.w	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 800404a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800404e:	61fb      	str	r3, [r7, #28]
      break;
 8004050:	f000 bd2d 	b.w	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004054:	4b9f      	ldr	r3, [pc, #636]	@ (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004056:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b02      	cmp	r3, #2
 8004060:	f040 8527 	bne.w	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8004064:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004068:	61fb      	str	r3, [r7, #28]
      break;
 800406a:	f000 bd22 	b.w	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800406e:	4b99      	ldr	r3, [pc, #612]	@ (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004076:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800407a:	f040 851c 	bne.w	8004ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 800407e:	4b96      	ldr	r3, [pc, #600]	@ (80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8004080:	61fb      	str	r3, [r7, #28]
      break;
 8004082:	f000 bd18 	b.w	8004ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004086:	4b93      	ldr	r3, [pc, #588]	@ (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	2b03      	cmp	r3, #3
 8004094:	d036      	beq.n	8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2b03      	cmp	r3, #3
 800409a:	d840      	bhi.n	800411e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d003      	beq.n	80040aa <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d020      	beq.n	80040ea <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80040a8:	e039      	b.n	800411e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80040aa:	4b8a      	ldr	r3, [pc, #552]	@ (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d116      	bne.n	80040e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80040b6:	4b87      	ldr	r3, [pc, #540]	@ (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d005      	beq.n	80040ce <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80040c2:	4b84      	ldr	r3, [pc, #528]	@ (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	091b      	lsrs	r3, r3, #4
 80040c8:	f003 030f 	and.w	r3, r3, #15
 80040cc:	e005      	b.n	80040da <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80040ce:	4b81      	ldr	r3, [pc, #516]	@ (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80040d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040d4:	0a1b      	lsrs	r3, r3, #8
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	4a80      	ldr	r2, [pc, #512]	@ (80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80040dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80040e2:	e01f      	b.n	8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	61bb      	str	r3, [r7, #24]
      break;
 80040e8:	e01c      	b.n	8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80040ea:	4b7a      	ldr	r3, [pc, #488]	@ (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040f6:	d102      	bne.n	80040fe <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80040f8:	4b79      	ldr	r3, [pc, #484]	@ (80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80040fa:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80040fc:	e012      	b.n	8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80040fe:	2300      	movs	r3, #0
 8004100:	61bb      	str	r3, [r7, #24]
      break;
 8004102:	e00f      	b.n	8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004104:	4b73      	ldr	r3, [pc, #460]	@ (80042d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800410c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004110:	d102      	bne.n	8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8004112:	4b74      	ldr	r3, [pc, #464]	@ (80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8004114:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004116:	e005      	b.n	8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	61bb      	str	r3, [r7, #24]
      break;
 800411c:	e002      	b.n	8004124 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 800411e:	2300      	movs	r3, #0
 8004120:	61bb      	str	r3, [r7, #24]
      break;
 8004122:	bf00      	nop
    }

    switch(PeriphClk)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800412a:	f000 80dd 	beq.w	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004134:	f200 84c1 	bhi.w	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800413e:	f000 80d3 	beq.w	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004148:	f200 84b7 	bhi.w	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004152:	f000 835f 	beq.w	8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800415c:	f200 84ad 	bhi.w	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004166:	f000 847e 	beq.w	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004170:	f200 84a3 	bhi.w	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800417a:	f000 82cd 	beq.w	8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004184:	f200 8499 	bhi.w	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800418e:	f000 80ab 	beq.w	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004198:	f200 848f 	bhi.w	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041a2:	f000 8090 	beq.w	80042c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041ac:	f200 8485 	bhi.w	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041b6:	d07f      	beq.n	80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041be:	f200 847c 	bhi.w	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041c8:	f000 8403 	beq.w	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041d2:	f200 8472 	bhi.w	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041dc:	f000 83af 	beq.w	800493e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041e6:	f200 8468 	bhi.w	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041f0:	f000 8379 	beq.w	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041fa:	f200 845e 	bhi.w	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b80      	cmp	r3, #128	@ 0x80
 8004202:	f000 8344 	beq.w	800488e <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b80      	cmp	r3, #128	@ 0x80
 800420a:	f200 8456 	bhi.w	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b20      	cmp	r3, #32
 8004212:	d84b      	bhi.n	80042ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 844f 	beq.w	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3b01      	subs	r3, #1
 8004220:	2b1f      	cmp	r3, #31
 8004222:	f200 844a 	bhi.w	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004226:	a201      	add	r2, pc, #4	@ (adr r2, 800422c <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8004228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422c:	08004415 	.word	0x08004415
 8004230:	08004483 	.word	0x08004483
 8004234:	08004abb 	.word	0x08004abb
 8004238:	08004517 	.word	0x08004517
 800423c:	08004abb 	.word	0x08004abb
 8004240:	08004abb 	.word	0x08004abb
 8004244:	08004abb 	.word	0x08004abb
 8004248:	0800459d 	.word	0x0800459d
 800424c:	08004abb 	.word	0x08004abb
 8004250:	08004abb 	.word	0x08004abb
 8004254:	08004abb 	.word	0x08004abb
 8004258:	08004abb 	.word	0x08004abb
 800425c:	08004abb 	.word	0x08004abb
 8004260:	08004abb 	.word	0x08004abb
 8004264:	08004abb 	.word	0x08004abb
 8004268:	08004615 	.word	0x08004615
 800426c:	08004abb 	.word	0x08004abb
 8004270:	08004abb 	.word	0x08004abb
 8004274:	08004abb 	.word	0x08004abb
 8004278:	08004abb 	.word	0x08004abb
 800427c:	08004abb 	.word	0x08004abb
 8004280:	08004abb 	.word	0x08004abb
 8004284:	08004abb 	.word	0x08004abb
 8004288:	08004abb 	.word	0x08004abb
 800428c:	08004abb 	.word	0x08004abb
 8004290:	08004abb 	.word	0x08004abb
 8004294:	08004abb 	.word	0x08004abb
 8004298:	08004abb 	.word	0x08004abb
 800429c:	08004abb 	.word	0x08004abb
 80042a0:	08004abb 	.word	0x08004abb
 80042a4:	08004abb 	.word	0x08004abb
 80042a8:	08004697 	.word	0x08004697
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b40      	cmp	r3, #64	@ 0x40
 80042b0:	f000 82c1 	beq.w	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 80042b4:	f000 bc01 	b.w	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80042b8:	69b9      	ldr	r1, [r7, #24]
 80042ba:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80042be:	f000 fdd9 	bl	8004e74 <RCCEx_GetSAIxPeriphCLKFreq>
 80042c2:	61f8      	str	r0, [r7, #28]
      break;
 80042c4:	e3fa      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80042c6:	69b9      	ldr	r1, [r7, #24]
 80042c8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80042cc:	f000 fdd2 	bl	8004e74 <RCCEx_GetSAIxPeriphCLKFreq>
 80042d0:	61f8      	str	r0, [r7, #28]
      break;
 80042d2:	e3f3      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80042d4:	40021000 	.word	0x40021000
 80042d8:	0003d090 	.word	0x0003d090
 80042dc:	08007bf8 	.word	0x08007bf8
 80042e0:	00f42400 	.word	0x00f42400
 80042e4:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80042e8:	4ba9      	ldr	r3, [pc, #676]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80042ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ee:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80042f2:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80042fa:	d00c      	beq.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8004302:	d87f      	bhi.n	8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800430a:	d04e      	beq.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004312:	d01d      	beq.n	8004350 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8004314:	e076      	b.n	8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004316:	4b9e      	ldr	r3, [pc, #632]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b02      	cmp	r3, #2
 8004320:	d172      	bne.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004322:	4b9b      	ldr	r3, [pc, #620]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0308 	and.w	r3, r3, #8
 800432a:	2b00      	cmp	r3, #0
 800432c:	d005      	beq.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 800432e:	4b98      	ldr	r3, [pc, #608]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	091b      	lsrs	r3, r3, #4
 8004334:	f003 030f 	and.w	r3, r3, #15
 8004338:	e005      	b.n	8004346 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 800433a:	4b95      	ldr	r3, [pc, #596]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800433c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004340:	0a1b      	lsrs	r3, r3, #8
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	4a93      	ldr	r2, [pc, #588]	@ (8004594 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8004348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800434c:	61fb      	str	r3, [r7, #28]
          break;
 800434e:	e05b      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004350:	4b8f      	ldr	r3, [pc, #572]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004358:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800435c:	d156      	bne.n	800440c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800435e:	4b8c      	ldr	r3, [pc, #560]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004366:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800436a:	d14f      	bne.n	800440c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800436c:	4b88      	ldr	r3, [pc, #544]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	0a1b      	lsrs	r3, r3, #8
 8004372:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004376:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	fb03 f202 	mul.w	r2, r3, r2
 8004380:	4b83      	ldr	r3, [pc, #524]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	091b      	lsrs	r3, r3, #4
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	3301      	adds	r3, #1
 800438c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004390:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004392:	4b7f      	ldr	r3, [pc, #508]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	0d5b      	lsrs	r3, r3, #21
 8004398:	f003 0303 	and.w	r3, r3, #3
 800439c:	3301      	adds	r3, #1
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a6:	61fb      	str	r3, [r7, #28]
          break;
 80043a8:	e030      	b.n	800440c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80043aa:	4b79      	ldr	r3, [pc, #484]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80043b6:	d12b      	bne.n	8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80043b8:	4b75      	ldr	r3, [pc, #468]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043c4:	d124      	bne.n	8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80043c6:	4b72      	ldr	r3, [pc, #456]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	0a1b      	lsrs	r3, r3, #8
 80043cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80043d0:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	fb03 f202 	mul.w	r2, r3, r2
 80043da:	4b6d      	ldr	r3, [pc, #436]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	091b      	lsrs	r3, r3, #4
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	3301      	adds	r3, #1
 80043e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ea:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80043ec:	4b68      	ldr	r3, [pc, #416]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	0d5b      	lsrs	r3, r3, #21
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	3301      	adds	r3, #1
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004400:	61fb      	str	r3, [r7, #28]
          break;
 8004402:	e005      	b.n	8004410 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8004404:	bf00      	nop
 8004406:	e359      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004408:	bf00      	nop
 800440a:	e357      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800440c:	bf00      	nop
 800440e:	e355      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004410:	bf00      	nop
        break;
 8004412:	e353      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004414:	4b5e      	ldr	r3, [pc, #376]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	2b03      	cmp	r3, #3
 8004424:	d827      	bhi.n	8004476 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8004426:	a201      	add	r2, pc, #4	@ (adr r2, 800442c <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8004428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442c:	0800443d 	.word	0x0800443d
 8004430:	08004445 	.word	0x08004445
 8004434:	0800444d 	.word	0x0800444d
 8004438:	08004461 	.word	0x08004461
          frequency = HAL_RCC_GetPCLK2Freq();
 800443c:	f7ff fa7a 	bl	8003934 <HAL_RCC_GetPCLK2Freq>
 8004440:	61f8      	str	r0, [r7, #28]
          break;
 8004442:	e01d      	b.n	8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004444:	f7ff f9c8 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 8004448:	61f8      	str	r0, [r7, #28]
          break;
 800444a:	e019      	b.n	8004480 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800444c:	4b50      	ldr	r3, [pc, #320]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004454:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004458:	d10f      	bne.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 800445a:	4b4f      	ldr	r3, [pc, #316]	@ (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 800445c:	61fb      	str	r3, [r7, #28]
          break;
 800445e:	e00c      	b.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004460:	4b4b      	ldr	r3, [pc, #300]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004462:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b02      	cmp	r3, #2
 800446c:	d107      	bne.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 800446e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004472:	61fb      	str	r3, [r7, #28]
          break;
 8004474:	e003      	b.n	800447e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8004476:	bf00      	nop
 8004478:	e320      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800447a:	bf00      	nop
 800447c:	e31e      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800447e:	bf00      	nop
        break;
 8004480:	e31c      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004482:	4b43      	ldr	r3, [pc, #268]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004488:	f003 030c 	and.w	r3, r3, #12
 800448c:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	2b0c      	cmp	r3, #12
 8004492:	d83a      	bhi.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8004494:	a201      	add	r2, pc, #4	@ (adr r2, 800449c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8004496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449a:	bf00      	nop
 800449c:	080044d1 	.word	0x080044d1
 80044a0:	0800450b 	.word	0x0800450b
 80044a4:	0800450b 	.word	0x0800450b
 80044a8:	0800450b 	.word	0x0800450b
 80044ac:	080044d9 	.word	0x080044d9
 80044b0:	0800450b 	.word	0x0800450b
 80044b4:	0800450b 	.word	0x0800450b
 80044b8:	0800450b 	.word	0x0800450b
 80044bc:	080044e1 	.word	0x080044e1
 80044c0:	0800450b 	.word	0x0800450b
 80044c4:	0800450b 	.word	0x0800450b
 80044c8:	0800450b 	.word	0x0800450b
 80044cc:	080044f5 	.word	0x080044f5
          frequency = HAL_RCC_GetPCLK1Freq();
 80044d0:	f7ff fa1a 	bl	8003908 <HAL_RCC_GetPCLK1Freq>
 80044d4:	61f8      	str	r0, [r7, #28]
          break;
 80044d6:	e01d      	b.n	8004514 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 80044d8:	f7ff f97e 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 80044dc:	61f8      	str	r0, [r7, #28]
          break;
 80044de:	e019      	b.n	8004514 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ec:	d10f      	bne.n	800450e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 80044ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80044f0:	61fb      	str	r3, [r7, #28]
          break;
 80044f2:	e00c      	b.n	800450e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80044f4:	4b26      	ldr	r3, [pc, #152]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80044f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d107      	bne.n	8004512 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8004502:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004506:	61fb      	str	r3, [r7, #28]
          break;
 8004508:	e003      	b.n	8004512 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 800450a:	bf00      	nop
 800450c:	e2d6      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800450e:	bf00      	nop
 8004510:	e2d4      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004512:	bf00      	nop
        break;
 8004514:	e2d2      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004516:	4b1e      	ldr	r3, [pc, #120]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004520:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	2b30      	cmp	r3, #48	@ 0x30
 8004526:	d021      	beq.n	800456c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	2b30      	cmp	r3, #48	@ 0x30
 800452c:	d829      	bhi.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	2b20      	cmp	r3, #32
 8004532:	d011      	beq.n	8004558 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	2b20      	cmp	r3, #32
 8004538:	d823      	bhi.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	2b10      	cmp	r3, #16
 8004544:	d004      	beq.n	8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8004546:	e01c      	b.n	8004582 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004548:	f7ff f9de 	bl	8003908 <HAL_RCC_GetPCLK1Freq>
 800454c:	61f8      	str	r0, [r7, #28]
          break;
 800454e:	e01d      	b.n	800458c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8004550:	f7ff f942 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 8004554:	61f8      	str	r0, [r7, #28]
          break;
 8004556:	e019      	b.n	800458c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004558:	4b0d      	ldr	r3, [pc, #52]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004560:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004564:	d10f      	bne.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8004566:	4b0c      	ldr	r3, [pc, #48]	@ (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004568:	61fb      	str	r3, [r7, #28]
          break;
 800456a:	e00c      	b.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800456c:	4b08      	ldr	r3, [pc, #32]	@ (8004590 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800456e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b02      	cmp	r3, #2
 8004578:	d107      	bne.n	800458a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 800457a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800457e:	61fb      	str	r3, [r7, #28]
          break;
 8004580:	e003      	b.n	800458a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8004582:	bf00      	nop
 8004584:	e29a      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004586:	bf00      	nop
 8004588:	e298      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800458a:	bf00      	nop
        break;
 800458c:	e296      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800458e:	bf00      	nop
 8004590:	40021000 	.word	0x40021000
 8004594:	08007bf8 	.word	0x08007bf8
 8004598:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800459c:	4b9b      	ldr	r3, [pc, #620]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800459e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80045a6:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80045ac:	d021      	beq.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	2bc0      	cmp	r3, #192	@ 0xc0
 80045b2:	d829      	bhi.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	2b80      	cmp	r3, #128	@ 0x80
 80045b8:	d011      	beq.n	80045de <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	2b80      	cmp	r3, #128	@ 0x80
 80045be:	d823      	bhi.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	2b40      	cmp	r3, #64	@ 0x40
 80045ca:	d004      	beq.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 80045cc:	e01c      	b.n	8004608 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 80045ce:	f7ff f99b 	bl	8003908 <HAL_RCC_GetPCLK1Freq>
 80045d2:	61f8      	str	r0, [r7, #28]
          break;
 80045d4:	e01d      	b.n	8004612 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 80045d6:	f7ff f8ff 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 80045da:	61f8      	str	r0, [r7, #28]
          break;
 80045dc:	e019      	b.n	8004612 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80045de:	4b8b      	ldr	r3, [pc, #556]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045ea:	d10f      	bne.n	800460c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 80045ec:	4b88      	ldr	r3, [pc, #544]	@ (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80045ee:	61fb      	str	r3, [r7, #28]
          break;
 80045f0:	e00c      	b.n	800460c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80045f2:	4b86      	ldr	r3, [pc, #536]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80045f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d107      	bne.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8004600:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004604:	61fb      	str	r3, [r7, #28]
          break;
 8004606:	e003      	b.n	8004610 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8004608:	bf00      	nop
 800460a:	e257      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800460c:	bf00      	nop
 800460e:	e255      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004610:	bf00      	nop
        break;
 8004612:	e253      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004614:	4b7d      	ldr	r3, [pc, #500]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800461a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800461e:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004626:	d025      	beq.n	8004674 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800462e:	d82c      	bhi.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004636:	d013      	beq.n	8004660 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800463e:	d824      	bhi.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d004      	beq.n	8004650 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800464c:	d004      	beq.n	8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 800464e:	e01c      	b.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004650:	f7ff f95a 	bl	8003908 <HAL_RCC_GetPCLK1Freq>
 8004654:	61f8      	str	r0, [r7, #28]
          break;
 8004656:	e01d      	b.n	8004694 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004658:	f7ff f8be 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 800465c:	61f8      	str	r0, [r7, #28]
          break;
 800465e:	e019      	b.n	8004694 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004660:	4b6a      	ldr	r3, [pc, #424]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004668:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800466c:	d10f      	bne.n	800468e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 800466e:	4b68      	ldr	r3, [pc, #416]	@ (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004670:	61fb      	str	r3, [r7, #28]
          break;
 8004672:	e00c      	b.n	800468e <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004674:	4b65      	ldr	r3, [pc, #404]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004676:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b02      	cmp	r3, #2
 8004680:	d107      	bne.n	8004692 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8004682:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004686:	61fb      	str	r3, [r7, #28]
          break;
 8004688:	e003      	b.n	8004692 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 800468a:	bf00      	nop
 800468c:	e216      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800468e:	bf00      	nop
 8004690:	e214      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004692:	bf00      	nop
        break;
 8004694:	e212      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004696:	4b5d      	ldr	r3, [pc, #372]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800469c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80046a0:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046a8:	d025      	beq.n	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80046b0:	d82c      	bhi.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046b8:	d013      	beq.n	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046c0:	d824      	bhi.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d004      	beq.n	80046d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ce:	d004      	beq.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 80046d0:	e01c      	b.n	800470c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 80046d2:	f7ff f919 	bl	8003908 <HAL_RCC_GetPCLK1Freq>
 80046d6:	61f8      	str	r0, [r7, #28]
          break;
 80046d8:	e01d      	b.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 80046da:	f7ff f87d 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 80046de:	61f8      	str	r0, [r7, #28]
          break;
 80046e0:	e019      	b.n	8004716 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80046e2:	4b4a      	ldr	r3, [pc, #296]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ee:	d10f      	bne.n	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 80046f0:	4b47      	ldr	r3, [pc, #284]	@ (8004810 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80046f2:	61fb      	str	r3, [r7, #28]
          break;
 80046f4:	e00c      	b.n	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80046f6:	4b45      	ldr	r3, [pc, #276]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80046f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b02      	cmp	r3, #2
 8004702:	d107      	bne.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8004704:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004708:	61fb      	str	r3, [r7, #28]
          break;
 800470a:	e003      	b.n	8004714 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 800470c:	bf00      	nop
 800470e:	e1d5      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004710:	bf00      	nop
 8004712:	e1d3      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004714:	bf00      	nop
        break;
 8004716:	e1d1      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004718:	4b3c      	ldr	r3, [pc, #240]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800471a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800471e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004722:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800472a:	d00c      	beq.n	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004732:	d864      	bhi.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800473a:	d008      	beq.n	800474e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004742:	d030      	beq.n	80047a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004744:	e05b      	b.n	80047fe <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004746:	f7ff f847 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 800474a:	61f8      	str	r0, [r7, #28]
          break;
 800474c:	e05c      	b.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800474e:	4b2f      	ldr	r3, [pc, #188]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004756:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800475a:	d152      	bne.n	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 800475c:	4b2b      	ldr	r3, [pc, #172]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d04c      	beq.n	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004768:	4b28      	ldr	r3, [pc, #160]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	0a1b      	lsrs	r3, r3, #8
 800476e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004772:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	fb03 f202 	mul.w	r2, r3, r2
 800477c:	4b23      	ldr	r3, [pc, #140]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	091b      	lsrs	r3, r3, #4
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	3301      	adds	r3, #1
 8004788:	fbb2 f3f3 	udiv	r3, r2, r3
 800478c:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800478e:	4b1f      	ldr	r3, [pc, #124]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	0e5b      	lsrs	r3, r3, #25
 8004794:	f003 0303 	and.w	r3, r3, #3
 8004798:	3301      	adds	r3, #1
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a2:	61fb      	str	r3, [r7, #28]
          break;
 80047a4:	e02d      	b.n	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 80047a6:	4b19      	ldr	r3, [pc, #100]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047b2:	d128      	bne.n	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80047b4:	4b15      	ldr	r3, [pc, #84]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d022      	beq.n	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80047c0:	4b12      	ldr	r3, [pc, #72]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	0a1b      	lsrs	r3, r3, #8
 80047c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047ca:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	fb03 f202 	mul.w	r2, r3, r2
 80047d4:	4b0d      	ldr	r3, [pc, #52]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	091b      	lsrs	r3, r3, #4
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	3301      	adds	r3, #1
 80047e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80047e6:	4b09      	ldr	r3, [pc, #36]	@ (800480c <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	0e5b      	lsrs	r3, r3, #25
 80047ec:	f003 0303 	and.w	r3, r3, #3
 80047f0:	3301      	adds	r3, #1
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fa:	61fb      	str	r3, [r7, #28]
          break;
 80047fc:	e003      	b.n	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 80047fe:	bf00      	nop
 8004800:	e15c      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004802:	bf00      	nop
 8004804:	e15a      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004806:	bf00      	nop
        break;
 8004808:	e158      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800480a:	bf00      	nop
 800480c:	40021000 	.word	0x40021000
 8004810:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004814:	4b9d      	ldr	r3, [pc, #628]	@ (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800481a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800481e:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d103      	bne.n	800482e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004826:	f7ff f885 	bl	8003934 <HAL_RCC_GetPCLK2Freq>
 800482a:	61f8      	str	r0, [r7, #28]
        break;
 800482c:	e146      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 800482e:	f7fe ffd3 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 8004832:	61f8      	str	r0, [r7, #28]
        break;
 8004834:	e142      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004836:	4b95      	ldr	r3, [pc, #596]	@ (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800483c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004840:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004848:	d013      	beq.n	8004872 <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004850:	d819      	bhi.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d004      	beq.n	8004862 <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800485e:	d004      	beq.n	800486a <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8004860:	e011      	b.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004862:	f7ff f851 	bl	8003908 <HAL_RCC_GetPCLK1Freq>
 8004866:	61f8      	str	r0, [r7, #28]
          break;
 8004868:	e010      	b.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 800486a:	f7fe ffb5 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 800486e:	61f8      	str	r0, [r7, #28]
          break;
 8004870:	e00c      	b.n	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004872:	4b86      	ldr	r3, [pc, #536]	@ (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800487a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800487e:	d104      	bne.n	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8004880:	4b83      	ldr	r3, [pc, #524]	@ (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004882:	61fb      	str	r3, [r7, #28]
          break;
 8004884:	e001      	b.n	800488a <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8004886:	bf00      	nop
 8004888:	e118      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800488a:	bf00      	nop
        break;
 800488c:	e116      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800488e:	4b7f      	ldr	r3, [pc, #508]	@ (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004894:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004898:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048a0:	d013      	beq.n	80048ca <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048a8:	d819      	bhi.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d004      	beq.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048b6:	d004      	beq.n	80048c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 80048b8:	e011      	b.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 80048ba:	f7ff f825 	bl	8003908 <HAL_RCC_GetPCLK1Freq>
 80048be:	61f8      	str	r0, [r7, #28]
          break;
 80048c0:	e010      	b.n	80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 80048c2:	f7fe ff89 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 80048c6:	61f8      	str	r0, [r7, #28]
          break;
 80048c8:	e00c      	b.n	80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80048ca:	4b70      	ldr	r3, [pc, #448]	@ (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048d6:	d104      	bne.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 80048d8:	4b6d      	ldr	r3, [pc, #436]	@ (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80048da:	61fb      	str	r3, [r7, #28]
          break;
 80048dc:	e001      	b.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 80048de:	bf00      	nop
 80048e0:	e0ec      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80048e2:	bf00      	nop
        break;
 80048e4:	e0ea      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80048e6:	4b69      	ldr	r3, [pc, #420]	@ (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80048e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048f0:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80048f8:	d013      	beq.n	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004900:	d819      	bhi.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d004      	beq.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800490e:	d004      	beq.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8004910:	e011      	b.n	8004936 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004912:	f7fe fff9 	bl	8003908 <HAL_RCC_GetPCLK1Freq>
 8004916:	61f8      	str	r0, [r7, #28]
          break;
 8004918:	e010      	b.n	800493c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 800491a:	f7fe ff5d 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 800491e:	61f8      	str	r0, [r7, #28]
          break;
 8004920:	e00c      	b.n	800493c <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004922:	4b5a      	ldr	r3, [pc, #360]	@ (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800492a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800492e:	d104      	bne.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8004930:	4b57      	ldr	r3, [pc, #348]	@ (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004932:	61fb      	str	r3, [r7, #28]
          break;
 8004934:	e001      	b.n	800493a <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8004936:	bf00      	nop
 8004938:	e0c0      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800493a:	bf00      	nop
        break;
 800493c:	e0be      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800493e:	4b53      	ldr	r3, [pc, #332]	@ (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004944:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004948:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004950:	d02c      	beq.n	80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004958:	d833      	bhi.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004960:	d01a      	beq.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004968:	d82b      	bhi.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d004      	beq.n	800497a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004976:	d004      	beq.n	8004982 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8004978:	e023      	b.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 800497a:	f7fe ffc5 	bl	8003908 <HAL_RCC_GetPCLK1Freq>
 800497e:	61f8      	str	r0, [r7, #28]
          break;
 8004980:	e026      	b.n	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004982:	4b42      	ldr	r3, [pc, #264]	@ (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004984:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b02      	cmp	r3, #2
 800498e:	d11a      	bne.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8004990:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004994:	61fb      	str	r3, [r7, #28]
          break;
 8004996:	e016      	b.n	80049c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004998:	4b3c      	ldr	r3, [pc, #240]	@ (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049a4:	d111      	bne.n	80049ca <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 80049a6:	4b3a      	ldr	r3, [pc, #232]	@ (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80049a8:	61fb      	str	r3, [r7, #28]
          break;
 80049aa:	e00e      	b.n	80049ca <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80049ac:	4b37      	ldr	r3, [pc, #220]	@ (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80049ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d109      	bne.n	80049ce <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 80049ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049be:	61fb      	str	r3, [r7, #28]
          break;
 80049c0:	e005      	b.n	80049ce <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 80049c2:	bf00      	nop
 80049c4:	e07a      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80049c6:	bf00      	nop
 80049c8:	e078      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80049ca:	bf00      	nop
 80049cc:	e076      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80049ce:	bf00      	nop
        break;
 80049d0:	e074      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80049d2:	4b2e      	ldr	r3, [pc, #184]	@ (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80049d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80049dc:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80049e4:	d02c      	beq.n	8004a40 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80049ec:	d833      	bhi.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049f4:	d01a      	beq.n	8004a2c <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80049fc:	d82b      	bhi.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d004      	beq.n	8004a0e <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a0a:	d004      	beq.n	8004a16 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8004a0c:	e023      	b.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a0e:	f7fe ff7b 	bl	8003908 <HAL_RCC_GetPCLK1Freq>
 8004a12:	61f8      	str	r0, [r7, #28]
          break;
 8004a14:	e026      	b.n	8004a64 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004a16:	4b1d      	ldr	r3, [pc, #116]	@ (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d11a      	bne.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8004a24:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004a28:	61fb      	str	r3, [r7, #28]
          break;
 8004a2a:	e016      	b.n	8004a5a <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a2c:	4b17      	ldr	r3, [pc, #92]	@ (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a38:	d111      	bne.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8004a3a:	4b15      	ldr	r3, [pc, #84]	@ (8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004a3c:	61fb      	str	r3, [r7, #28]
          break;
 8004a3e:	e00e      	b.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004a40:	4b12      	ldr	r3, [pc, #72]	@ (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d109      	bne.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8004a4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a52:	61fb      	str	r3, [r7, #28]
          break;
 8004a54:	e005      	b.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8004a56:	bf00      	nop
 8004a58:	e030      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004a5a:	bf00      	nop
 8004a5c:	e02e      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004a5e:	bf00      	nop
 8004a60:	e02c      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004a62:	bf00      	nop
        break;
 8004a64:	e02a      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004a66:	4b09      	ldr	r3, [pc, #36]	@ (8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a6c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004a70:	613b      	str	r3, [r7, #16]
        switch(srcclk)
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d004      	beq.n	8004a82 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a7e:	d009      	beq.n	8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8004a80:	e012      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a82:	f7fe ff41 	bl	8003908 <HAL_RCC_GetPCLK1Freq>
 8004a86:	61f8      	str	r0, [r7, #28]
          break;
 8004a88:	e00e      	b.n	8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8004a8a:	bf00      	nop
 8004a8c:	40021000 	.word	0x40021000
 8004a90:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a94:	4b0c      	ldr	r3, [pc, #48]	@ (8004ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aa0:	d101      	bne.n	8004aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8004aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8004acc <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004aa4:	61fb      	str	r3, [r7, #28]
          break;
 8004aa6:	bf00      	nop
        break;
 8004aa8:	e008      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004aaa:	bf00      	nop
 8004aac:	e006      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004aae:	bf00      	nop
 8004ab0:	e004      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004ab2:	bf00      	nop
 8004ab4:	e002      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004ab6:	bf00      	nop
 8004ab8:	e000      	b.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004aba:	bf00      	nop
    }
  }

  return(frequency);
 8004abc:	69fb      	ldr	r3, [r7, #28]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3720      	adds	r7, #32
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	00f42400 	.word	0x00f42400

08004ad0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ade:	4b75      	ldr	r3, [pc, #468]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d018      	beq.n	8004b1c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004aea:	4b72      	ldr	r3, [pc, #456]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f003 0203 	and.w	r2, r3, #3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d10d      	bne.n	8004b16 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
       ||
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d009      	beq.n	8004b16 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b02:	4b6c      	ldr	r3, [pc, #432]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	091b      	lsrs	r3, r3, #4
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
       ||
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d047      	beq.n	8004ba6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	73fb      	strb	r3, [r7, #15]
 8004b1a:	e044      	b.n	8004ba6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b03      	cmp	r3, #3
 8004b22:	d018      	beq.n	8004b56 <RCCEx_PLLSAI1_Config+0x86>
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d825      	bhi.n	8004b74 <RCCEx_PLLSAI1_Config+0xa4>
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d002      	beq.n	8004b32 <RCCEx_PLLSAI1_Config+0x62>
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d009      	beq.n	8004b44 <RCCEx_PLLSAI1_Config+0x74>
 8004b30:	e020      	b.n	8004b74 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b32:	4b60      	ldr	r3, [pc, #384]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d11d      	bne.n	8004b7a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b42:	e01a      	b.n	8004b7a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b44:	4b5b      	ldr	r3, [pc, #364]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d116      	bne.n	8004b7e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b54:	e013      	b.n	8004b7e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b56:	4b57      	ldr	r3, [pc, #348]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10f      	bne.n	8004b82 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b62:	4b54      	ldr	r3, [pc, #336]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d109      	bne.n	8004b82 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b72:	e006      	b.n	8004b82 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	73fb      	strb	r3, [r7, #15]
      break;
 8004b78:	e004      	b.n	8004b84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b7a:	bf00      	nop
 8004b7c:	e002      	b.n	8004b84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b7e:	bf00      	nop
 8004b80:	e000      	b.n	8004b84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b82:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b84:	7bfb      	ldrb	r3, [r7, #15]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10d      	bne.n	8004ba6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b8a:	4b4a      	ldr	r3, [pc, #296]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6819      	ldr	r1, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	430b      	orrs	r3, r1
 8004ba0:	4944      	ldr	r1, [pc, #272]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d17d      	bne.n	8004ca8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004bac:	4b41      	ldr	r3, [pc, #260]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a40      	ldr	r2, [pc, #256]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bb2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004bb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bb8:	f7fc fdd2 	bl	8001760 <HAL_GetTick>
 8004bbc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bbe:	e009      	b.n	8004bd4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bc0:	f7fc fdce 	bl	8001760 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d902      	bls.n	8004bd4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	73fb      	strb	r3, [r7, #15]
        break;
 8004bd2:	e005      	b.n	8004be0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bd4:	4b37      	ldr	r3, [pc, #220]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1ef      	bne.n	8004bc0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d160      	bne.n	8004ca8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d111      	bne.n	8004c10 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bec:	4b31      	ldr	r3, [pc, #196]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004bf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6892      	ldr	r2, [r2, #8]
 8004bfc:	0211      	lsls	r1, r2, #8
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	68d2      	ldr	r2, [r2, #12]
 8004c02:	0912      	lsrs	r2, r2, #4
 8004c04:	0452      	lsls	r2, r2, #17
 8004c06:	430a      	orrs	r2, r1
 8004c08:	492a      	ldr	r1, [pc, #168]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	610b      	str	r3, [r1, #16]
 8004c0e:	e027      	b.n	8004c60 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d112      	bne.n	8004c3c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c16:	4b27      	ldr	r3, [pc, #156]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004c1e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	6892      	ldr	r2, [r2, #8]
 8004c26:	0211      	lsls	r1, r2, #8
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6912      	ldr	r2, [r2, #16]
 8004c2c:	0852      	lsrs	r2, r2, #1
 8004c2e:	3a01      	subs	r2, #1
 8004c30:	0552      	lsls	r2, r2, #21
 8004c32:	430a      	orrs	r2, r1
 8004c34:	491f      	ldr	r1, [pc, #124]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	610b      	str	r3, [r1, #16]
 8004c3a:	e011      	b.n	8004c60 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004c44:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6892      	ldr	r2, [r2, #8]
 8004c4c:	0211      	lsls	r1, r2, #8
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6952      	ldr	r2, [r2, #20]
 8004c52:	0852      	lsrs	r2, r2, #1
 8004c54:	3a01      	subs	r2, #1
 8004c56:	0652      	lsls	r2, r2, #25
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	4916      	ldr	r1, [pc, #88]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c60:	4b14      	ldr	r3, [pc, #80]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a13      	ldr	r2, [pc, #76]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c66:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6c:	f7fc fd78 	bl	8001760 <HAL_GetTick>
 8004c70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c72:	e009      	b.n	8004c88 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c74:	f7fc fd74 	bl	8001760 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d902      	bls.n	8004c88 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	73fb      	strb	r3, [r7, #15]
          break;
 8004c86:	e005      	b.n	8004c94 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c88:	4b0a      	ldr	r3, [pc, #40]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d0ef      	beq.n	8004c74 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004c94:	7bfb      	ldrb	r3, [r7, #15]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c9a:	4b06      	ldr	r3, [pc, #24]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c9c:	691a      	ldr	r2, [r3, #16]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	4904      	ldr	r1, [pc, #16]	@ (8004cb4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40021000 	.word	0x40021000

08004cb8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cc6:	4b6a      	ldr	r3, [pc, #424]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d018      	beq.n	8004d04 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004cd2:	4b67      	ldr	r3, [pc, #412]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f003 0203 	and.w	r2, r3, #3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d10d      	bne.n	8004cfe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
       ||
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d009      	beq.n	8004cfe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004cea:	4b61      	ldr	r3, [pc, #388]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	091b      	lsrs	r3, r3, #4
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
       ||
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d047      	beq.n	8004d8e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	73fb      	strb	r3, [r7, #15]
 8004d02:	e044      	b.n	8004d8e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	d018      	beq.n	8004d3e <RCCEx_PLLSAI2_Config+0x86>
 8004d0c:	2b03      	cmp	r3, #3
 8004d0e:	d825      	bhi.n	8004d5c <RCCEx_PLLSAI2_Config+0xa4>
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d002      	beq.n	8004d1a <RCCEx_PLLSAI2_Config+0x62>
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d009      	beq.n	8004d2c <RCCEx_PLLSAI2_Config+0x74>
 8004d18:	e020      	b.n	8004d5c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d1a:	4b55      	ldr	r3, [pc, #340]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d11d      	bne.n	8004d62 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d2a:	e01a      	b.n	8004d62 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d2c:	4b50      	ldr	r3, [pc, #320]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d116      	bne.n	8004d66 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d3c:	e013      	b.n	8004d66 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d3e:	4b4c      	ldr	r3, [pc, #304]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10f      	bne.n	8004d6a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d4a:	4b49      	ldr	r3, [pc, #292]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d109      	bne.n	8004d6a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d5a:	e006      	b.n	8004d6a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d60:	e004      	b.n	8004d6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d62:	bf00      	nop
 8004d64:	e002      	b.n	8004d6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d66:	bf00      	nop
 8004d68:	e000      	b.n	8004d6c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004d6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10d      	bne.n	8004d8e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d72:	4b3f      	ldr	r3, [pc, #252]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6819      	ldr	r1, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	430b      	orrs	r3, r1
 8004d88:	4939      	ldr	r1, [pc, #228]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d167      	bne.n	8004e64 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d94:	4b36      	ldr	r3, [pc, #216]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a35      	ldr	r2, [pc, #212]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da0:	f7fc fcde 	bl	8001760 <HAL_GetTick>
 8004da4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004da6:	e009      	b.n	8004dbc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004da8:	f7fc fcda 	bl	8001760 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d902      	bls.n	8004dbc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	73fb      	strb	r3, [r7, #15]
        break;
 8004dba:	e005      	b.n	8004dc8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004dbc:	4b2c      	ldr	r3, [pc, #176]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1ef      	bne.n	8004da8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d14a      	bne.n	8004e64 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d111      	bne.n	8004df8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004dd4:	4b26      	ldr	r3, [pc, #152]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004ddc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6892      	ldr	r2, [r2, #8]
 8004de4:	0211      	lsls	r1, r2, #8
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	68d2      	ldr	r2, [r2, #12]
 8004dea:	0912      	lsrs	r2, r2, #4
 8004dec:	0452      	lsls	r2, r2, #17
 8004dee:	430a      	orrs	r2, r1
 8004df0:	491f      	ldr	r1, [pc, #124]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	614b      	str	r3, [r1, #20]
 8004df6:	e011      	b.n	8004e1c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004df8:	4b1d      	ldr	r3, [pc, #116]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004e00:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6892      	ldr	r2, [r2, #8]
 8004e08:	0211      	lsls	r1, r2, #8
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6912      	ldr	r2, [r2, #16]
 8004e0e:	0852      	lsrs	r2, r2, #1
 8004e10:	3a01      	subs	r2, #1
 8004e12:	0652      	lsls	r2, r2, #25
 8004e14:	430a      	orrs	r2, r1
 8004e16:	4916      	ldr	r1, [pc, #88]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e1c:	4b14      	ldr	r3, [pc, #80]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a13      	ldr	r2, [pc, #76]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e28:	f7fc fc9a 	bl	8001760 <HAL_GetTick>
 8004e2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e2e:	e009      	b.n	8004e44 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e30:	f7fc fc96 	bl	8001760 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d902      	bls.n	8004e44 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	73fb      	strb	r3, [r7, #15]
          break;
 8004e42:	e005      	b.n	8004e50 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e44:	4b0a      	ldr	r3, [pc, #40]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0ef      	beq.n	8004e30 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d106      	bne.n	8004e64 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e56:	4b06      	ldr	r3, [pc, #24]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e58:	695a      	ldr	r2, [r3, #20]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	4904      	ldr	r1, [pc, #16]	@ (8004e70 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40021000 	.word	0x40021000

08004e74 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b089      	sub	sp, #36	@ 0x24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004e86:	2300      	movs	r3, #0
 8004e88:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e90:	d10c      	bne.n	8004eac <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004e92:	4b6e      	ldr	r3, [pc, #440]	@ (800504c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e98:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004e9c:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004ea4:	d112      	bne.n	8004ecc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004ea6:	4b6a      	ldr	r3, [pc, #424]	@ (8005050 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004ea8:	61fb      	str	r3, [r7, #28]
 8004eaa:	e00f      	b.n	8004ecc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eb2:	d10b      	bne.n	8004ecc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004eb4:	4b65      	ldr	r3, [pc, #404]	@ (800504c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eba:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004ebe:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ec6:	d101      	bne.n	8004ecc <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004ec8:	4b61      	ldr	r3, [pc, #388]	@ (8005050 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004eca:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f040 80b4 	bne.w	800503c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ede:	d003      	beq.n	8004ee8 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ee6:	d135      	bne.n	8004f54 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004ee8:	4b58      	ldr	r3, [pc, #352]	@ (800504c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ef0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ef4:	f040 80a1 	bne.w	800503a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8004ef8:	4b54      	ldr	r3, [pc, #336]	@ (800504c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 809a 	beq.w	800503a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004f06:	4b51      	ldr	r3, [pc, #324]	@ (800504c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	091b      	lsrs	r3, r3, #4
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	3301      	adds	r3, #1
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f18:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004f1a:	4b4c      	ldr	r3, [pc, #304]	@ (800504c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	0a1b      	lsrs	r3, r3, #8
 8004f20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f24:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10a      	bne.n	8004f42 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004f2c:	4b47      	ldr	r3, [pc, #284]	@ (800504c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d002      	beq.n	8004f3e <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8004f38:	2311      	movs	r3, #17
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	e001      	b.n	8004f42 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8004f3e:	2307      	movs	r3, #7
 8004f40:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	fb03 f202 	mul.w	r2, r3, r2
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f50:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004f52:	e072      	b.n	800503a <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d133      	bne.n	8004fc2 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004f5a:	4b3c      	ldr	r3, [pc, #240]	@ (800504c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f66:	d169      	bne.n	800503c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004f68:	4b38      	ldr	r3, [pc, #224]	@ (800504c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d063      	beq.n	800503c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004f74:	4b35      	ldr	r3, [pc, #212]	@ (800504c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	091b      	lsrs	r3, r3, #4
 8004f7a:	f003 0307 	and.w	r3, r3, #7
 8004f7e:	3301      	adds	r3, #1
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f86:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004f88:	4b30      	ldr	r3, [pc, #192]	@ (800504c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	0a1b      	lsrs	r3, r3, #8
 8004f8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f92:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d10a      	bne.n	8004fb0 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004f9a:	4b2c      	ldr	r3, [pc, #176]	@ (800504c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8004fa6:	2311      	movs	r3, #17
 8004fa8:	617b      	str	r3, [r7, #20]
 8004faa:	e001      	b.n	8004fb0 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8004fac:	2307      	movs	r3, #7
 8004fae:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	fb03 f202 	mul.w	r2, r3, r2
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbe:	61fb      	str	r3, [r7, #28]
 8004fc0:	e03c      	b.n	800503c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fc8:	d003      	beq.n	8004fd2 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004fd0:	d134      	bne.n	800503c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8004fd2:	4b1e      	ldr	r3, [pc, #120]	@ (800504c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fde:	d12d      	bne.n	800503c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800504c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d027      	beq.n	800503c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004fec:	4b17      	ldr	r3, [pc, #92]	@ (800504c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	091b      	lsrs	r3, r3, #4
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffe:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005000:	4b12      	ldr	r3, [pc, #72]	@ (800504c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005002:	695b      	ldr	r3, [r3, #20]
 8005004:	0a1b      	lsrs	r3, r3, #8
 8005006:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800500a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10a      	bne.n	8005028 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8005012:	4b0e      	ldr	r3, [pc, #56]	@ (800504c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 800501e:	2311      	movs	r3, #17
 8005020:	617b      	str	r3, [r7, #20]
 8005022:	e001      	b.n	8005028 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8005024:	2307      	movs	r3, #7
 8005026:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	fb03 f202 	mul.w	r2, r3, r2
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	fbb2 f3f3 	udiv	r3, r2, r3
 8005036:	61fb      	str	r3, [r7, #28]
 8005038:	e000      	b.n	800503c <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800503a:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 800503c:	69fb      	ldr	r3, [r7, #28]
}
 800503e:	4618      	mov	r0, r3
 8005040:	3724      	adds	r7, #36	@ 0x24
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40021000 	.word	0x40021000
 8005050:	001fff68 	.word	0x001fff68

08005054 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2b02      	cmp	r3, #2
 8005066:	d904      	bls.n	8005072 <HAL_SAI_InitProtocol+0x1e>
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	3b03      	subs	r3, #3
 800506c:	2b01      	cmp	r3, #1
 800506e:	d812      	bhi.n	8005096 <HAL_SAI_InitProtocol+0x42>
 8005070:	e008      	b.n	8005084 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	68b9      	ldr	r1, [r7, #8]
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 faeb 	bl	8005654 <SAI_InitI2S>
 800507e:	4603      	mov	r3, r0
 8005080:	75fb      	strb	r3, [r7, #23]
      break;
 8005082:	e00b      	b.n	800509c <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	68b9      	ldr	r1, [r7, #8]
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 fb94 	bl	80057b8 <SAI_InitPCM>
 8005090:	4603      	mov	r3, r0
 8005092:	75fb      	strb	r3, [r7, #23]
      break;
 8005094:	e002      	b.n	800509c <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	75fb      	strb	r3, [r7, #23]
      break;
 800509a:	bf00      	nop
  }

  if (status == HAL_OK)
 800509c:	7dfb      	ldrb	r3, [r7, #23]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d104      	bne.n	80050ac <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f000 f808 	bl	80050b8 <HAL_SAI_Init>
 80050a8:	4603      	mov	r3, r0
 80050aa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80050ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
	...

080050b8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e155      	b.n	8005376 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7fb ff86 	bl	8000ff0 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 fc21 	bl	800592c <SAI_Disable>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e140      	b.n	8005376 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	2b02      	cmp	r3, #2
 8005102:	d00c      	beq.n	800511e <HAL_SAI_Init+0x66>
 8005104:	2b02      	cmp	r3, #2
 8005106:	d80d      	bhi.n	8005124 <HAL_SAI_Init+0x6c>
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <HAL_SAI_Init+0x5a>
 800510c:	2b01      	cmp	r3, #1
 800510e:	d003      	beq.n	8005118 <HAL_SAI_Init+0x60>
 8005110:	e008      	b.n	8005124 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8005112:	2300      	movs	r3, #0
 8005114:	61fb      	str	r3, [r7, #28]
      break;
 8005116:	e008      	b.n	800512a <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005118:	2310      	movs	r3, #16
 800511a:	61fb      	str	r3, [r7, #28]
      break;
 800511c:	e005      	b.n	800512a <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800511e:	2320      	movs	r3, #32
 8005120:	61fb      	str	r3, [r7, #28]
      break;
 8005122:	e002      	b.n	800512a <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8005124:	2300      	movs	r3, #0
 8005126:	61fb      	str	r3, [r7, #28]
      break;
 8005128:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2b03      	cmp	r3, #3
 8005130:	d81d      	bhi.n	800516e <HAL_SAI_Init+0xb6>
 8005132:	a201      	add	r2, pc, #4	@ (adr r2, 8005138 <HAL_SAI_Init+0x80>)
 8005134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005138:	08005149 	.word	0x08005149
 800513c:	0800514f 	.word	0x0800514f
 8005140:	08005157 	.word	0x08005157
 8005144:	0800515f 	.word	0x0800515f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8005148:	2300      	movs	r3, #0
 800514a:	617b      	str	r3, [r7, #20]
      break;
 800514c:	e012      	b.n	8005174 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800514e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005152:	617b      	str	r3, [r7, #20]
      break;
 8005154:	e00e      	b.n	8005174 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005156:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800515a:	617b      	str	r3, [r7, #20]
      break;
 800515c:	e00a      	b.n	8005174 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800515e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005162:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f043 0301 	orr.w	r3, r3, #1
 800516a:	61fb      	str	r3, [r7, #28]
      break;
 800516c:	e002      	b.n	8005174 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 800516e:	2300      	movs	r3, #0
 8005170:	617b      	str	r3, [r7, #20]
      break;
 8005172:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a81      	ldr	r2, [pc, #516]	@ (8005380 <HAL_SAI_Init+0x2c8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d004      	beq.n	8005188 <HAL_SAI_Init+0xd0>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a80      	ldr	r2, [pc, #512]	@ (8005384 <HAL_SAI_Init+0x2cc>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d103      	bne.n	8005190 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8005188:	4a7f      	ldr	r2, [pc, #508]	@ (8005388 <HAL_SAI_Init+0x2d0>)
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	e002      	b.n	8005196 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005190:	4a7e      	ldr	r2, [pc, #504]	@ (800538c <HAL_SAI_Init+0x2d4>)
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d041      	beq.n	8005222 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a77      	ldr	r2, [pc, #476]	@ (8005380 <HAL_SAI_Init+0x2c8>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d004      	beq.n	80051b2 <HAL_SAI_Init+0xfa>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a75      	ldr	r2, [pc, #468]	@ (8005384 <HAL_SAI_Init+0x2cc>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d105      	bne.n	80051be <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80051b2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80051b6:	f7fe ff1d 	bl	8003ff4 <HAL_RCCEx_GetPeriphCLKFreq>
 80051ba:	6138      	str	r0, [r7, #16]
 80051bc:	e004      	b.n	80051c8 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80051be:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80051c2:	f7fe ff17 	bl	8003ff4 <HAL_RCCEx_GetPeriphCLKFreq>
 80051c6:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	4613      	mov	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	005b      	lsls	r3, r3, #1
 80051d2:	461a      	mov	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	69db      	ldr	r3, [r3, #28]
 80051d8:	025b      	lsls	r3, r3, #9
 80051da:	fbb2 f3f3 	udiv	r3, r2, r3
 80051de:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4a6b      	ldr	r2, [pc, #428]	@ (8005390 <HAL_SAI_Init+0x2d8>)
 80051e4:	fba2 2303 	umull	r2, r3, r2, r3
 80051e8:	08da      	lsrs	r2, r3, #3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80051ee:	68f9      	ldr	r1, [r7, #12]
 80051f0:	4b67      	ldr	r3, [pc, #412]	@ (8005390 <HAL_SAI_Init+0x2d8>)
 80051f2:	fba3 2301 	umull	r2, r3, r3, r1
 80051f6:	08da      	lsrs	r2, r3, #3
 80051f8:	4613      	mov	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4413      	add	r3, r2
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	1aca      	subs	r2, r1, r3
 8005202:	2a08      	cmp	r2, #8
 8005204:	d904      	bls.n	8005210 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005214:	2b04      	cmp	r3, #4
 8005216:	d104      	bne.n	8005222 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	085a      	lsrs	r2, r3, #1
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_SAI_Init+0x17a>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d109      	bne.n	8005246 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005236:	2b01      	cmp	r3, #1
 8005238:	d101      	bne.n	800523e <HAL_SAI_Init+0x186>
 800523a:	2300      	movs	r3, #0
 800523c:	e001      	b.n	8005242 <HAL_SAI_Init+0x18a>
 800523e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005242:	61bb      	str	r3, [r7, #24]
 8005244:	e008      	b.n	8005258 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800524a:	2b01      	cmp	r3, #1
 800524c:	d102      	bne.n	8005254 <HAL_SAI_Init+0x19c>
 800524e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005252:	e000      	b.n	8005256 <HAL_SAI_Init+0x19e>
 8005254:	2300      	movs	r3, #0
 8005256:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6819      	ldr	r1, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	4b4c      	ldr	r3, [pc, #304]	@ (8005394 <HAL_SAI_Init+0x2dc>)
 8005264:	400b      	ands	r3, r1
 8005266:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6819      	ldr	r1, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005276:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800527c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005282:	431a      	orrs	r2, r3
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 8005290:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800529c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	051b      	lsls	r3, r3, #20
 80052a4:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	6812      	ldr	r2, [r2, #0]
 80052b8:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80052bc:	f023 030f 	bic.w	r3, r3, #15
 80052c0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6859      	ldr	r1, [r3, #4]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	699a      	ldr	r2, [r3, #24]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d0:	431a      	orrs	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d6:	431a      	orrs	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6899      	ldr	r1, [r3, #8]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	4b2b      	ldr	r3, [pc, #172]	@ (8005398 <HAL_SAI_Init+0x2e0>)
 80052ec:	400b      	ands	r3, r1
 80052ee:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6899      	ldr	r1, [r3, #8]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fa:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005300:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8005306:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 800530c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005312:	3b01      	subs	r3, #1
 8005314:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005316:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68d9      	ldr	r1, [r3, #12]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800532e:	400b      	ands	r3, r1
 8005330:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68d9      	ldr	r1, [r3, #12]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005340:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005346:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005348:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800534e:	3b01      	subs	r3, #1
 8005350:	021b      	lsls	r3, r3, #8
 8005352:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3720      	adds	r7, #32
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	40015404 	.word	0x40015404
 8005384:	40015424 	.word	0x40015424
 8005388:	40015400 	.word	0x40015400
 800538c:	40015800 	.word	0x40015800
 8005390:	cccccccd 	.word	0xcccccccd
 8005394:	ff05c010 	.word	0xff05c010
 8005398:	fff88000 	.word	0xfff88000

0800539c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	4613      	mov	r3, r2
 80053a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 80053aa:	f7fc f9d9 	bl	8001760 <HAL_GetTick>
 80053ae:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d002      	beq.n	80053bc <HAL_SAI_Transmit_DMA+0x20>
 80053b6:	88fb      	ldrh	r3, [r7, #6]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d101      	bne.n	80053c0 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e093      	b.n	80054e8 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	f040 808c 	bne.w	80054e6 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d101      	bne.n	80053dc <HAL_SAI_Transmit_DMA+0x40>
 80053d8:	2302      	movs	r3, #2
 80053da:	e085      	b.n	80054e8 <HAL_SAI_Transmit_DMA+0x14c>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	88fa      	ldrh	r2, [r7, #6]
 80053ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	88fa      	ldrh	r2, [r7, #6]
 80053f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2212      	movs	r2, #18
 8005406:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800540e:	4a38      	ldr	r2, [pc, #224]	@ (80054f0 <HAL_SAI_Transmit_DMA+0x154>)
 8005410:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005416:	4a37      	ldr	r2, [pc, #220]	@ (80054f4 <HAL_SAI_Transmit_DMA+0x158>)
 8005418:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800541e:	4a36      	ldr	r2, [pc, #216]	@ (80054f8 <HAL_SAI_Transmit_DMA+0x15c>)
 8005420:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005426:	2200      	movs	r2, #0
 8005428:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005432:	4619      	mov	r1, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	331c      	adds	r3, #28
 800543a:	461a      	mov	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8005442:	f7fc fb63 	bl	8001b0c <HAL_DMA_Start_IT>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d005      	beq.n	8005458 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e047      	b.n	80054e8 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005458:	2100      	movs	r1, #0
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f000 fa2e 	bl	80058bc <SAI_InterruptFlag>
 8005460:	4601      	mov	r1, r0
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	691a      	ldr	r2, [r3, #16]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	430a      	orrs	r2, r1
 800546e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800547e:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005480:	e015      	b.n	80054ae <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8005482:	f7fc f96d 	bl	8001760 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005490:	d90d      	bls.n	80054ae <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005498:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e01c      	b.n	80054e8 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0e2      	beq.n	8005482 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d107      	bne.n	80054da <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80054d8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	e000      	b.n	80054e8 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 80054e6:	2302      	movs	r3, #2
  }
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3718      	adds	r7, #24
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	080059ff 	.word	0x080059ff
 80054f4:	080059a1 	.word	0x080059a1
 80054f8:	08005a95 	.word	0x08005a95

080054fc <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	4613      	mov	r3, r2
 8005508:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <HAL_SAI_Receive_DMA+0x1a>
 8005510:	88fb      	ldrh	r3, [r7, #6]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e074      	b.n	8005604 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b01      	cmp	r3, #1
 8005524:	d16d      	bne.n	8005602 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800552c:	2b01      	cmp	r3, #1
 800552e:	d101      	bne.n	8005534 <HAL_SAI_Receive_DMA+0x38>
 8005530:	2302      	movs	r3, #2
 8005532:	e067      	b.n	8005604 <HAL_SAI_Receive_DMA+0x108>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	88fa      	ldrh	r2, [r7, #6]
 8005546:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	88fa      	ldrh	r2, [r7, #6]
 800554e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2222      	movs	r2, #34	@ 0x22
 800555e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005566:	4a29      	ldr	r2, [pc, #164]	@ (800560c <HAL_SAI_Receive_DMA+0x110>)
 8005568:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800556e:	4a28      	ldr	r2, [pc, #160]	@ (8005610 <HAL_SAI_Receive_DMA+0x114>)
 8005570:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005576:	4a27      	ldr	r2, [pc, #156]	@ (8005614 <HAL_SAI_Receive_DMA+0x118>)
 8005578:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800557e:	2200      	movs	r2, #0
 8005580:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	331c      	adds	r3, #28
 800558c:	4619      	mov	r1, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005592:	461a      	mov	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800559a:	f7fc fab7 	bl	8001b0c <HAL_DMA_Start_IT>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d005      	beq.n	80055b0 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e029      	b.n	8005604 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80055b0:	2100      	movs	r1, #0
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 f982 	bl	80058bc <SAI_InterruptFlag>
 80055b8:	4601      	mov	r1, r0
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	691a      	ldr	r2, [r3, #16]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80055d6:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d107      	bne.n	80055f6 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80055f4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80055fe:	2300      	movs	r3, #0
 8005600:	e000      	b.n	8005604 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8005602:	2302      	movs	r3, #2
  }
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	08005a79 	.word	0x08005a79
 8005610:	08005a1b 	.word	0x08005a1b
 8005614:	08005a95 	.word	0x08005a95

08005618 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <SAI_InitI2S+0x2e>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2b02      	cmp	r3, #2
 8005680:	d103      	bne.n	800568a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005688:	e002      	b.n	8005690 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2201      	movs	r2, #1
 800568e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005696:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800569e:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e077      	b.n	80057aa <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d107      	bne.n	80056d0 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80056cc:	651a      	str	r2, [r3, #80]	@ 0x50
 80056ce:	e006      	b.n	80056de <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80056d6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b03      	cmp	r3, #3
 80056e2:	d84f      	bhi.n	8005784 <SAI_InitI2S+0x130>
 80056e4:	a201      	add	r2, pc, #4	@ (adr r2, 80056ec <SAI_InitI2S+0x98>)
 80056e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ea:	bf00      	nop
 80056ec:	080056fd 	.word	0x080056fd
 80056f0:	0800571f 	.word	0x0800571f
 80056f4:	08005741 	.word	0x08005741
 80056f8:	08005763 	.word	0x08005763
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2280      	movs	r2, #128	@ 0x80
 8005700:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	085b      	lsrs	r3, r3, #1
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	085b      	lsrs	r3, r3, #1
 8005710:	011a      	lsls	r2, r3, #4
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2240      	movs	r2, #64	@ 0x40
 800571a:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800571c:	e035      	b.n	800578a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2280      	movs	r2, #128	@ 0x80
 8005722:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	085b      	lsrs	r3, r3, #1
 8005728:	019a      	lsls	r2, r3, #6
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	085b      	lsrs	r3, r3, #1
 8005732:	015a      	lsls	r2, r3, #5
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2280      	movs	r2, #128	@ 0x80
 800573c:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800573e:	e024      	b.n	800578a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	22c0      	movs	r2, #192	@ 0xc0
 8005744:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	085b      	lsrs	r3, r3, #1
 800574a:	019a      	lsls	r2, r3, #6
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	085b      	lsrs	r3, r3, #1
 8005754:	015a      	lsls	r2, r3, #5
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2280      	movs	r2, #128	@ 0x80
 800575e:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005760:	e013      	b.n	800578a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	22e0      	movs	r2, #224	@ 0xe0
 8005766:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	085b      	lsrs	r3, r3, #1
 800576c:	019a      	lsls	r2, r3, #6
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	085b      	lsrs	r3, r3, #1
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2280      	movs	r2, #128	@ 0x80
 8005780:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005782:	e002      	b.n	800578a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	75fb      	strb	r3, [r7, #23]
      break;
 8005788:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	2b02      	cmp	r3, #2
 800578e:	d10b      	bne.n	80057a8 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d102      	bne.n	800579c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2210      	movs	r2, #16
 800579a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d102      	bne.n	80057a8 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2208      	movs	r2, #8
 80057a6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 80057a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	371c      	adds	r7, #28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop

080057b8 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057c6:	2300      	movs	r3, #0
 80057c8:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d003      	beq.n	80057e6 <SAI_InitPCM+0x2e>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d103      	bne.n	80057ee <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2201      	movs	r2, #1
 80057ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 80057ec:	e002      	b.n	80057f4 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005800:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005808:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800581c:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	2b04      	cmp	r3, #4
 8005822:	d103      	bne.n	800582c <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2201      	movs	r2, #1
 8005828:	645a      	str	r2, [r3, #68]	@ 0x44
 800582a:	e002      	b.n	8005832 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	220d      	movs	r2, #13
 8005830:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b03      	cmp	r3, #3
 8005836:	d837      	bhi.n	80058a8 <SAI_InitPCM+0xf0>
 8005838:	a201      	add	r2, pc, #4	@ (adr r2, 8005840 <SAI_InitPCM+0x88>)
 800583a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583e:	bf00      	nop
 8005840:	08005851 	.word	0x08005851
 8005844:	08005867 	.word	0x08005867
 8005848:	0800587d 	.word	0x0800587d
 800584c:	08005893 	.word	0x08005893
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2280      	movs	r2, #128	@ 0x80
 8005854:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	011a      	lsls	r2, r3, #4
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2240      	movs	r2, #64	@ 0x40
 8005862:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005864:	e023      	b.n	80058ae <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2280      	movs	r2, #128	@ 0x80
 800586a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2280      	movs	r2, #128	@ 0x80
 8005878:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800587a:	e018      	b.n	80058ae <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	22c0      	movs	r2, #192	@ 0xc0
 8005880:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	015a      	lsls	r2, r3, #5
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2280      	movs	r2, #128	@ 0x80
 800588e:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005890:	e00d      	b.n	80058ae <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	22e0      	movs	r2, #224	@ 0xe0
 8005896:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2280      	movs	r2, #128	@ 0x80
 80058a4:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80058a6:	e002      	b.n	80058ae <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	75fb      	strb	r3, [r7, #23]
      break;
 80058ac:	bf00      	nop
  }

  return status;
 80058ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	371c      	adds	r7, #28
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80058bc:	b480      	push	{r7}
 80058be:	b085      	sub	sp, #20
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	460b      	mov	r3, r1
 80058c6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80058cc:	78fb      	ldrb	r3, [r7, #3]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d103      	bne.n	80058da <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f043 0308 	orr.w	r3, r3, #8
 80058d8:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058de:	2b08      	cmp	r3, #8
 80058e0:	d10b      	bne.n	80058fa <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80058e6:	2b03      	cmp	r3, #3
 80058e8:	d003      	beq.n	80058f2 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d103      	bne.n	80058fa <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f043 0310 	orr.w	r3, r3, #16
 80058f8:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	2b03      	cmp	r3, #3
 8005900:	d003      	beq.n	800590a <SAI_InterruptFlag+0x4e>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2b02      	cmp	r3, #2
 8005908:	d104      	bne.n	8005914 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005910:	60fb      	str	r3, [r7, #12]
 8005912:	e003      	b.n	800591c <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f043 0304 	orr.w	r3, r3, #4
 800591a:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800591c:	68fb      	ldr	r3, [r7, #12]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
	...

0800592c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005934:	4b18      	ldr	r3, [pc, #96]	@ (8005998 <SAI_Disable+0x6c>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a18      	ldr	r2, [pc, #96]	@ (800599c <SAI_Disable+0x70>)
 800593a:	fba2 2303 	umull	r2, r3, r2, r3
 800593e:	0b1b      	lsrs	r3, r3, #12
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005944:	2300      	movs	r3, #0
 8005946:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005956:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10a      	bne.n	8005974 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005964:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	72fb      	strb	r3, [r7, #11]
      break;
 8005972:	e009      	b.n	8005988 <SAI_Disable+0x5c>
    }
    count--;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	3b01      	subs	r3, #1
 8005978:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1e7      	bne.n	8005958 <SAI_Disable+0x2c>

  return status;
 8005988:	7afb      	ldrb	r3, [r7, #11]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	20000004 	.word	0x20000004
 800599c:	95cbec1b 	.word	0x95cbec1b

080059a0 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ac:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	2b20      	cmp	r3, #32
 80059b4:	d01c      	beq.n	80059f0 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80059cc:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80059ce:	2100      	movs	r1, #0
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f7ff ff73 	bl	80058bc <SAI_InterruptFlag>
 80059d6:	4603      	mov	r3, r0
 80059d8:	43d9      	mvns	r1, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	400a      	ands	r2, r1
 80059e6:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f7ff fe11 	bl	8005618 <HAL_SAI_TxCpltCallback>
#endif
}
 80059f6:	bf00      	nop
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}

080059fe <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b084      	sub	sp, #16
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f7ff fe0d 	bl	800562c <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8005a12:	bf00      	nop
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b084      	sub	sp, #16
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a26:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	69db      	ldr	r3, [r3, #28]
 8005a2c:	2b20      	cmp	r3, #32
 8005a2e:	d01c      	beq.n	8005a6a <SAI_DMARxCplt+0x50>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005a3e:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005a48:	2100      	movs	r1, #0
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f7ff ff36 	bl	80058bc <SAI_InterruptFlag>
 8005a50:	4603      	mov	r3, r0
 8005a52:	43d9      	mvns	r1, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	691a      	ldr	r2, [r3, #16]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	400a      	ands	r2, r1
 8005a60:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f7fb f8c4 	bl	8000bf8 <HAL_SAI_RxCpltCallback>
#endif
}
 8005a70:	bf00      	nop
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a84:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f7fb f8e8 	bl	8000c5c <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8005a8c:	bf00      	nop
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa0:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005aa8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005ac0:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f7ff ff32 	bl	800592c <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f7ff fdb1 	bl	8005640 <HAL_SAI_ErrorCallback>
#endif
}
 8005ade:	bf00      	nop
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b084      	sub	sp, #16
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e095      	b.n	8005c24 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d108      	bne.n	8005b12 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b08:	d009      	beq.n	8005b1e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	61da      	str	r2, [r3, #28]
 8005b10:	e005      	b.n	8005b1e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d106      	bne.n	8005b3e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7fb fb6b 	bl	8001214 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2202      	movs	r2, #2
 8005b42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b54:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b5e:	d902      	bls.n	8005b66 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b60:	2300      	movs	r3, #0
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	e002      	b.n	8005b6c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b6a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005b74:	d007      	beq.n	8005b86 <HAL_SPI_Init+0xa0>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b7e:	d002      	beq.n	8005b86 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005b96:	431a      	orrs	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	f003 0301 	and.w	r3, r3, #1
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bc8:	ea42 0103 	orr.w	r1, r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	0c1b      	lsrs	r3, r3, #16
 8005be2:	f003 0204 	and.w	r2, r3, #4
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bea:	f003 0310 	and.w	r3, r3, #16
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bf4:	f003 0308 	and.w	r3, r3, #8
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005c02:	ea42 0103 	orr.w	r1, r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	430a      	orrs	r2, r1
 8005c12:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b088      	sub	sp, #32
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	603b      	str	r3, [r7, #0]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c3c:	f7fb fd90 	bl	8001760 <HAL_GetTick>
 8005c40:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005c42:	88fb      	ldrh	r3, [r7, #6]
 8005c44:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d001      	beq.n	8005c56 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005c52:	2302      	movs	r3, #2
 8005c54:	e15c      	b.n	8005f10 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <HAL_SPI_Transmit+0x36>
 8005c5c:	88fb      	ldrh	r3, [r7, #6]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e154      	b.n	8005f10 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d101      	bne.n	8005c74 <HAL_SPI_Transmit+0x48>
 8005c70:	2302      	movs	r3, #2
 8005c72:	e14d      	b.n	8005f10 <HAL_SPI_Transmit+0x2e4>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2203      	movs	r2, #3
 8005c80:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	88fa      	ldrh	r2, [r7, #6]
 8005c94:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	88fa      	ldrh	r2, [r7, #6]
 8005c9a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cc6:	d10f      	bne.n	8005ce8 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cd6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ce6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf2:	2b40      	cmp	r3, #64	@ 0x40
 8005cf4:	d007      	beq.n	8005d06 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d0e:	d952      	bls.n	8005db6 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d002      	beq.n	8005d1e <HAL_SPI_Transmit+0xf2>
 8005d18:	8b7b      	ldrh	r3, [r7, #26]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d145      	bne.n	8005daa <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d22:	881a      	ldrh	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d2e:	1c9a      	adds	r2, r3, #2
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d42:	e032      	b.n	8005daa <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d112      	bne.n	8005d78 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d56:	881a      	ldrh	r2, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d62:	1c9a      	adds	r2, r3, #2
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	b29a      	uxth	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d76:	e018      	b.n	8005daa <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d78:	f7fb fcf2 	bl	8001760 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d803      	bhi.n	8005d90 <HAL_SPI_Transmit+0x164>
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8e:	d102      	bne.n	8005d96 <HAL_SPI_Transmit+0x16a>
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d109      	bne.n	8005daa <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e0b2      	b.n	8005f10 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1c7      	bne.n	8005d44 <HAL_SPI_Transmit+0x118>
 8005db4:	e083      	b.n	8005ebe <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d002      	beq.n	8005dc4 <HAL_SPI_Transmit+0x198>
 8005dbe:	8b7b      	ldrh	r3, [r7, #26]
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d177      	bne.n	8005eb4 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d912      	bls.n	8005df4 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd2:	881a      	ldrh	r2, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dde:	1c9a      	adds	r2, r3, #2
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	3b02      	subs	r3, #2
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005df2:	e05f      	b.n	8005eb4 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	330c      	adds	r3, #12
 8005dfe:	7812      	ldrb	r2, [r2, #0]
 8005e00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e06:	1c5a      	adds	r2, r3, #1
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	3b01      	subs	r3, #1
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005e1a:	e04b      	b.n	8005eb4 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d12b      	bne.n	8005e82 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d912      	bls.n	8005e5a <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e38:	881a      	ldrh	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e44:	1c9a      	adds	r2, r3, #2
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	3b02      	subs	r3, #2
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e58:	e02c      	b.n	8005eb4 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	330c      	adds	r3, #12
 8005e64:	7812      	ldrb	r2, [r2, #0]
 8005e66:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e80:	e018      	b.n	8005eb4 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e82:	f7fb fc6d 	bl	8001760 <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d803      	bhi.n	8005e9a <HAL_SPI_Transmit+0x26e>
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e98:	d102      	bne.n	8005ea0 <HAL_SPI_Transmit+0x274>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d109      	bne.n	8005eb4 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e02d      	b.n	8005f10 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1ae      	bne.n	8005e1c <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ebe:	69fa      	ldr	r2, [r7, #28]
 8005ec0:	6839      	ldr	r1, [r7, #0]
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f000 f946 	bl	8006154 <SPI_EndRxTxTransaction>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2220      	movs	r2, #32
 8005ed2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10a      	bne.n	8005ef2 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005edc:	2300      	movs	r3, #0
 8005ede:	617b      	str	r3, [r7, #20]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	617b      	str	r3, [r7, #20]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	617b      	str	r3, [r7, #20]
 8005ef0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e000      	b.n	8005f10 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
  }
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3720      	adds	r7, #32
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b088      	sub	sp, #32
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	603b      	str	r3, [r7, #0]
 8005f24:	4613      	mov	r3, r2
 8005f26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f28:	f7fb fc1a 	bl	8001760 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f30:	1a9b      	subs	r3, r3, r2
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	4413      	add	r3, r2
 8005f36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f38:	f7fb fc12 	bl	8001760 <HAL_GetTick>
 8005f3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f3e:	4b39      	ldr	r3, [pc, #228]	@ (8006024 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	015b      	lsls	r3, r3, #5
 8005f44:	0d1b      	lsrs	r3, r3, #20
 8005f46:	69fa      	ldr	r2, [r7, #28]
 8005f48:	fb02 f303 	mul.w	r3, r2, r3
 8005f4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f4e:	e054      	b.n	8005ffa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f56:	d050      	beq.n	8005ffa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f58:	f7fb fc02 	bl	8001760 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	69fa      	ldr	r2, [r7, #28]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d902      	bls.n	8005f6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d13d      	bne.n	8005fea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005f7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f86:	d111      	bne.n	8005fac <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f90:	d004      	beq.n	8005f9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f9a:	d107      	bne.n	8005fac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005faa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fb4:	d10f      	bne.n	8005fd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005fc4:	601a      	str	r2, [r3, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005fd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e017      	b.n	800601a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d101      	bne.n	8005ff4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	689a      	ldr	r2, [r3, #8]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	4013      	ands	r3, r2
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	429a      	cmp	r2, r3
 8006008:	bf0c      	ite	eq
 800600a:	2301      	moveq	r3, #1
 800600c:	2300      	movne	r3, #0
 800600e:	b2db      	uxtb	r3, r3
 8006010:	461a      	mov	r2, r3
 8006012:	79fb      	ldrb	r3, [r7, #7]
 8006014:	429a      	cmp	r2, r3
 8006016:	d19b      	bne.n	8005f50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3720      	adds	r7, #32
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	20000004 	.word	0x20000004

08006028 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b08a      	sub	sp, #40	@ 0x28
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
 8006034:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006036:	2300      	movs	r3, #0
 8006038:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800603a:	f7fb fb91 	bl	8001760 <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006042:	1a9b      	subs	r3, r3, r2
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	4413      	add	r3, r2
 8006048:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800604a:	f7fb fb89 	bl	8001760 <HAL_GetTick>
 800604e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	330c      	adds	r3, #12
 8006056:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006058:	4b3d      	ldr	r3, [pc, #244]	@ (8006150 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	4613      	mov	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	00da      	lsls	r2, r3, #3
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	0d1b      	lsrs	r3, r3, #20
 8006068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800606a:	fb02 f303 	mul.w	r3, r2, r3
 800606e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006070:	e060      	b.n	8006134 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006078:	d107      	bne.n	800608a <SPI_WaitFifoStateUntilTimeout+0x62>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d104      	bne.n	800608a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	b2db      	uxtb	r3, r3
 8006086:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006088:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006090:	d050      	beq.n	8006134 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006092:	f7fb fb65 	bl	8001760 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	6a3b      	ldr	r3, [r7, #32]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800609e:	429a      	cmp	r2, r3
 80060a0:	d902      	bls.n	80060a8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80060a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d13d      	bne.n	8006124 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80060b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060c0:	d111      	bne.n	80060e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060ca:	d004      	beq.n	80060d6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060d4:	d107      	bne.n	80060e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060ee:	d10f      	bne.n	8006110 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060fe:	601a      	str	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800610e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2200      	movs	r2, #0
 800611c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e010      	b.n	8006146 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	3b01      	subs	r3, #1
 8006132:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689a      	ldr	r2, [r3, #8]
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	4013      	ands	r3, r2
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	429a      	cmp	r2, r3
 8006142:	d196      	bne.n	8006072 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3728      	adds	r7, #40	@ 0x28
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	20000004 	.word	0x20000004

08006154 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af02      	add	r7, sp, #8
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2200      	movs	r2, #0
 8006168:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f7ff ff5b 	bl	8006028 <SPI_WaitFifoStateUntilTimeout>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d007      	beq.n	8006188 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800617c:	f043 0220 	orr.w	r2, r3, #32
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e027      	b.n	80061d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2200      	movs	r2, #0
 8006190:	2180      	movs	r1, #128	@ 0x80
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f7ff fec0 	bl	8005f18 <SPI_WaitFlagStateUntilTimeout>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d007      	beq.n	80061ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061a2:	f043 0220 	orr.w	r2, r3, #32
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e014      	b.n	80061d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f7ff ff34 	bl	8006028 <SPI_WaitFifoStateUntilTimeout>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d007      	beq.n	80061d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061ca:	f043 0220 	orr.w	r2, r3, #32
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e000      	b.n	80061d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e040      	b.n	8006274 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d106      	bne.n	8006208 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7fb f9b6 	bl	8001574 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2224      	movs	r2, #36	@ 0x24
 800620c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 0201 	bic.w	r2, r2, #1
 800621c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006222:	2b00      	cmp	r3, #0
 8006224:	d002      	beq.n	800622c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 fb6a 	bl	8006900 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f8af 	bl	8006390 <UART_SetConfig>
 8006232:	4603      	mov	r3, r0
 8006234:	2b01      	cmp	r3, #1
 8006236:	d101      	bne.n	800623c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e01b      	b.n	8006274 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800624a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	689a      	ldr	r2, [r3, #8]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800625a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f042 0201 	orr.w	r2, r2, #1
 800626a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 fbe9 	bl	8006a44 <UART_CheckIdleState>
 8006272:	4603      	mov	r3, r0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3708      	adds	r7, #8
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08a      	sub	sp, #40	@ 0x28
 8006280:	af02      	add	r7, sp, #8
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	603b      	str	r3, [r7, #0]
 8006288:	4613      	mov	r3, r2
 800628a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006290:	2b20      	cmp	r3, #32
 8006292:	d177      	bne.n	8006384 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d002      	beq.n	80062a0 <HAL_UART_Transmit+0x24>
 800629a:	88fb      	ldrh	r3, [r7, #6]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e070      	b.n	8006386 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2221      	movs	r2, #33	@ 0x21
 80062b0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062b2:	f7fb fa55 	bl	8001760 <HAL_GetTick>
 80062b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	88fa      	ldrh	r2, [r7, #6]
 80062bc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	88fa      	ldrh	r2, [r7, #6]
 80062c4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062d0:	d108      	bne.n	80062e4 <HAL_UART_Transmit+0x68>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d104      	bne.n	80062e4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80062da:	2300      	movs	r3, #0
 80062dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	61bb      	str	r3, [r7, #24]
 80062e2:	e003      	b.n	80062ec <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062e8:	2300      	movs	r3, #0
 80062ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062ec:	e02f      	b.n	800634e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	2200      	movs	r2, #0
 80062f6:	2180      	movs	r1, #128	@ 0x80
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f000 fc4b 	bl	8006b94 <UART_WaitOnFlagUntilTimeout>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d004      	beq.n	800630e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2220      	movs	r2, #32
 8006308:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e03b      	b.n	8006386 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d10b      	bne.n	800632c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	881a      	ldrh	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006320:	b292      	uxth	r2, r2
 8006322:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	3302      	adds	r3, #2
 8006328:	61bb      	str	r3, [r7, #24]
 800632a:	e007      	b.n	800633c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	781a      	ldrb	r2, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	3301      	adds	r3, #1
 800633a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006342:	b29b      	uxth	r3, r3
 8006344:	3b01      	subs	r3, #1
 8006346:	b29a      	uxth	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006354:	b29b      	uxth	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1c9      	bne.n	80062ee <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	2200      	movs	r2, #0
 8006362:	2140      	movs	r1, #64	@ 0x40
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f000 fc15 	bl	8006b94 <UART_WaitOnFlagUntilTimeout>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d004      	beq.n	800637a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2220      	movs	r2, #32
 8006374:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e005      	b.n	8006386 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2220      	movs	r2, #32
 800637e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006380:	2300      	movs	r3, #0
 8006382:	e000      	b.n	8006386 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006384:	2302      	movs	r3, #2
  }
}
 8006386:	4618      	mov	r0, r3
 8006388:	3720      	adds	r7, #32
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
	...

08006390 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006394:	b08a      	sub	sp, #40	@ 0x28
 8006396:	af00      	add	r7, sp, #0
 8006398:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800639a:	2300      	movs	r3, #0
 800639c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	689a      	ldr	r2, [r3, #8]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	431a      	orrs	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	431a      	orrs	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	69db      	ldr	r3, [r3, #28]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	4ba4      	ldr	r3, [pc, #656]	@ (8006650 <UART_SetConfig+0x2c0>)
 80063c0:	4013      	ands	r3, r2
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	6812      	ldr	r2, [r2, #0]
 80063c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063c8:	430b      	orrs	r3, r1
 80063ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	68da      	ldr	r2, [r3, #12]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	430a      	orrs	r2, r1
 80063e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a99      	ldr	r2, [pc, #612]	@ (8006654 <UART_SetConfig+0x2c4>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d004      	beq.n	80063fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063f8:	4313      	orrs	r3, r2
 80063fa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800640c:	430a      	orrs	r2, r1
 800640e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a90      	ldr	r2, [pc, #576]	@ (8006658 <UART_SetConfig+0x2c8>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d126      	bne.n	8006468 <UART_SetConfig+0xd8>
 800641a:	4b90      	ldr	r3, [pc, #576]	@ (800665c <UART_SetConfig+0x2cc>)
 800641c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006420:	f003 0303 	and.w	r3, r3, #3
 8006424:	2b03      	cmp	r3, #3
 8006426:	d81b      	bhi.n	8006460 <UART_SetConfig+0xd0>
 8006428:	a201      	add	r2, pc, #4	@ (adr r2, 8006430 <UART_SetConfig+0xa0>)
 800642a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642e:	bf00      	nop
 8006430:	08006441 	.word	0x08006441
 8006434:	08006451 	.word	0x08006451
 8006438:	08006449 	.word	0x08006449
 800643c:	08006459 	.word	0x08006459
 8006440:	2301      	movs	r3, #1
 8006442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006446:	e116      	b.n	8006676 <UART_SetConfig+0x2e6>
 8006448:	2302      	movs	r3, #2
 800644a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800644e:	e112      	b.n	8006676 <UART_SetConfig+0x2e6>
 8006450:	2304      	movs	r3, #4
 8006452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006456:	e10e      	b.n	8006676 <UART_SetConfig+0x2e6>
 8006458:	2308      	movs	r3, #8
 800645a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800645e:	e10a      	b.n	8006676 <UART_SetConfig+0x2e6>
 8006460:	2310      	movs	r3, #16
 8006462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006466:	e106      	b.n	8006676 <UART_SetConfig+0x2e6>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a7c      	ldr	r2, [pc, #496]	@ (8006660 <UART_SetConfig+0x2d0>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d138      	bne.n	80064e4 <UART_SetConfig+0x154>
 8006472:	4b7a      	ldr	r3, [pc, #488]	@ (800665c <UART_SetConfig+0x2cc>)
 8006474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006478:	f003 030c 	and.w	r3, r3, #12
 800647c:	2b0c      	cmp	r3, #12
 800647e:	d82d      	bhi.n	80064dc <UART_SetConfig+0x14c>
 8006480:	a201      	add	r2, pc, #4	@ (adr r2, 8006488 <UART_SetConfig+0xf8>)
 8006482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006486:	bf00      	nop
 8006488:	080064bd 	.word	0x080064bd
 800648c:	080064dd 	.word	0x080064dd
 8006490:	080064dd 	.word	0x080064dd
 8006494:	080064dd 	.word	0x080064dd
 8006498:	080064cd 	.word	0x080064cd
 800649c:	080064dd 	.word	0x080064dd
 80064a0:	080064dd 	.word	0x080064dd
 80064a4:	080064dd 	.word	0x080064dd
 80064a8:	080064c5 	.word	0x080064c5
 80064ac:	080064dd 	.word	0x080064dd
 80064b0:	080064dd 	.word	0x080064dd
 80064b4:	080064dd 	.word	0x080064dd
 80064b8:	080064d5 	.word	0x080064d5
 80064bc:	2300      	movs	r3, #0
 80064be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064c2:	e0d8      	b.n	8006676 <UART_SetConfig+0x2e6>
 80064c4:	2302      	movs	r3, #2
 80064c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ca:	e0d4      	b.n	8006676 <UART_SetConfig+0x2e6>
 80064cc:	2304      	movs	r3, #4
 80064ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064d2:	e0d0      	b.n	8006676 <UART_SetConfig+0x2e6>
 80064d4:	2308      	movs	r3, #8
 80064d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064da:	e0cc      	b.n	8006676 <UART_SetConfig+0x2e6>
 80064dc:	2310      	movs	r3, #16
 80064de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064e2:	e0c8      	b.n	8006676 <UART_SetConfig+0x2e6>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a5e      	ldr	r2, [pc, #376]	@ (8006664 <UART_SetConfig+0x2d4>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d125      	bne.n	800653a <UART_SetConfig+0x1aa>
 80064ee:	4b5b      	ldr	r3, [pc, #364]	@ (800665c <UART_SetConfig+0x2cc>)
 80064f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80064f8:	2b30      	cmp	r3, #48	@ 0x30
 80064fa:	d016      	beq.n	800652a <UART_SetConfig+0x19a>
 80064fc:	2b30      	cmp	r3, #48	@ 0x30
 80064fe:	d818      	bhi.n	8006532 <UART_SetConfig+0x1a2>
 8006500:	2b20      	cmp	r3, #32
 8006502:	d00a      	beq.n	800651a <UART_SetConfig+0x18a>
 8006504:	2b20      	cmp	r3, #32
 8006506:	d814      	bhi.n	8006532 <UART_SetConfig+0x1a2>
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <UART_SetConfig+0x182>
 800650c:	2b10      	cmp	r3, #16
 800650e:	d008      	beq.n	8006522 <UART_SetConfig+0x192>
 8006510:	e00f      	b.n	8006532 <UART_SetConfig+0x1a2>
 8006512:	2300      	movs	r3, #0
 8006514:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006518:	e0ad      	b.n	8006676 <UART_SetConfig+0x2e6>
 800651a:	2302      	movs	r3, #2
 800651c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006520:	e0a9      	b.n	8006676 <UART_SetConfig+0x2e6>
 8006522:	2304      	movs	r3, #4
 8006524:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006528:	e0a5      	b.n	8006676 <UART_SetConfig+0x2e6>
 800652a:	2308      	movs	r3, #8
 800652c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006530:	e0a1      	b.n	8006676 <UART_SetConfig+0x2e6>
 8006532:	2310      	movs	r3, #16
 8006534:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006538:	e09d      	b.n	8006676 <UART_SetConfig+0x2e6>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a4a      	ldr	r2, [pc, #296]	@ (8006668 <UART_SetConfig+0x2d8>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d125      	bne.n	8006590 <UART_SetConfig+0x200>
 8006544:	4b45      	ldr	r3, [pc, #276]	@ (800665c <UART_SetConfig+0x2cc>)
 8006546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800654a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800654e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006550:	d016      	beq.n	8006580 <UART_SetConfig+0x1f0>
 8006552:	2bc0      	cmp	r3, #192	@ 0xc0
 8006554:	d818      	bhi.n	8006588 <UART_SetConfig+0x1f8>
 8006556:	2b80      	cmp	r3, #128	@ 0x80
 8006558:	d00a      	beq.n	8006570 <UART_SetConfig+0x1e0>
 800655a:	2b80      	cmp	r3, #128	@ 0x80
 800655c:	d814      	bhi.n	8006588 <UART_SetConfig+0x1f8>
 800655e:	2b00      	cmp	r3, #0
 8006560:	d002      	beq.n	8006568 <UART_SetConfig+0x1d8>
 8006562:	2b40      	cmp	r3, #64	@ 0x40
 8006564:	d008      	beq.n	8006578 <UART_SetConfig+0x1e8>
 8006566:	e00f      	b.n	8006588 <UART_SetConfig+0x1f8>
 8006568:	2300      	movs	r3, #0
 800656a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800656e:	e082      	b.n	8006676 <UART_SetConfig+0x2e6>
 8006570:	2302      	movs	r3, #2
 8006572:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006576:	e07e      	b.n	8006676 <UART_SetConfig+0x2e6>
 8006578:	2304      	movs	r3, #4
 800657a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800657e:	e07a      	b.n	8006676 <UART_SetConfig+0x2e6>
 8006580:	2308      	movs	r3, #8
 8006582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006586:	e076      	b.n	8006676 <UART_SetConfig+0x2e6>
 8006588:	2310      	movs	r3, #16
 800658a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800658e:	e072      	b.n	8006676 <UART_SetConfig+0x2e6>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a35      	ldr	r2, [pc, #212]	@ (800666c <UART_SetConfig+0x2dc>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d12a      	bne.n	80065f0 <UART_SetConfig+0x260>
 800659a:	4b30      	ldr	r3, [pc, #192]	@ (800665c <UART_SetConfig+0x2cc>)
 800659c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065a8:	d01a      	beq.n	80065e0 <UART_SetConfig+0x250>
 80065aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065ae:	d81b      	bhi.n	80065e8 <UART_SetConfig+0x258>
 80065b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065b4:	d00c      	beq.n	80065d0 <UART_SetConfig+0x240>
 80065b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065ba:	d815      	bhi.n	80065e8 <UART_SetConfig+0x258>
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d003      	beq.n	80065c8 <UART_SetConfig+0x238>
 80065c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065c4:	d008      	beq.n	80065d8 <UART_SetConfig+0x248>
 80065c6:	e00f      	b.n	80065e8 <UART_SetConfig+0x258>
 80065c8:	2300      	movs	r3, #0
 80065ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ce:	e052      	b.n	8006676 <UART_SetConfig+0x2e6>
 80065d0:	2302      	movs	r3, #2
 80065d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065d6:	e04e      	b.n	8006676 <UART_SetConfig+0x2e6>
 80065d8:	2304      	movs	r3, #4
 80065da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065de:	e04a      	b.n	8006676 <UART_SetConfig+0x2e6>
 80065e0:	2308      	movs	r3, #8
 80065e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065e6:	e046      	b.n	8006676 <UART_SetConfig+0x2e6>
 80065e8:	2310      	movs	r3, #16
 80065ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ee:	e042      	b.n	8006676 <UART_SetConfig+0x2e6>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a17      	ldr	r2, [pc, #92]	@ (8006654 <UART_SetConfig+0x2c4>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d13a      	bne.n	8006670 <UART_SetConfig+0x2e0>
 80065fa:	4b18      	ldr	r3, [pc, #96]	@ (800665c <UART_SetConfig+0x2cc>)
 80065fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006600:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006604:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006608:	d01a      	beq.n	8006640 <UART_SetConfig+0x2b0>
 800660a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800660e:	d81b      	bhi.n	8006648 <UART_SetConfig+0x2b8>
 8006610:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006614:	d00c      	beq.n	8006630 <UART_SetConfig+0x2a0>
 8006616:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800661a:	d815      	bhi.n	8006648 <UART_SetConfig+0x2b8>
 800661c:	2b00      	cmp	r3, #0
 800661e:	d003      	beq.n	8006628 <UART_SetConfig+0x298>
 8006620:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006624:	d008      	beq.n	8006638 <UART_SetConfig+0x2a8>
 8006626:	e00f      	b.n	8006648 <UART_SetConfig+0x2b8>
 8006628:	2300      	movs	r3, #0
 800662a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800662e:	e022      	b.n	8006676 <UART_SetConfig+0x2e6>
 8006630:	2302      	movs	r3, #2
 8006632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006636:	e01e      	b.n	8006676 <UART_SetConfig+0x2e6>
 8006638:	2304      	movs	r3, #4
 800663a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800663e:	e01a      	b.n	8006676 <UART_SetConfig+0x2e6>
 8006640:	2308      	movs	r3, #8
 8006642:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006646:	e016      	b.n	8006676 <UART_SetConfig+0x2e6>
 8006648:	2310      	movs	r3, #16
 800664a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800664e:	e012      	b.n	8006676 <UART_SetConfig+0x2e6>
 8006650:	efff69f3 	.word	0xefff69f3
 8006654:	40008000 	.word	0x40008000
 8006658:	40013800 	.word	0x40013800
 800665c:	40021000 	.word	0x40021000
 8006660:	40004400 	.word	0x40004400
 8006664:	40004800 	.word	0x40004800
 8006668:	40004c00 	.word	0x40004c00
 800666c:	40005000 	.word	0x40005000
 8006670:	2310      	movs	r3, #16
 8006672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a9f      	ldr	r2, [pc, #636]	@ (80068f8 <UART_SetConfig+0x568>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d17a      	bne.n	8006776 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006680:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006684:	2b08      	cmp	r3, #8
 8006686:	d824      	bhi.n	80066d2 <UART_SetConfig+0x342>
 8006688:	a201      	add	r2, pc, #4	@ (adr r2, 8006690 <UART_SetConfig+0x300>)
 800668a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668e:	bf00      	nop
 8006690:	080066b5 	.word	0x080066b5
 8006694:	080066d3 	.word	0x080066d3
 8006698:	080066bd 	.word	0x080066bd
 800669c:	080066d3 	.word	0x080066d3
 80066a0:	080066c3 	.word	0x080066c3
 80066a4:	080066d3 	.word	0x080066d3
 80066a8:	080066d3 	.word	0x080066d3
 80066ac:	080066d3 	.word	0x080066d3
 80066b0:	080066cb 	.word	0x080066cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066b4:	f7fd f928 	bl	8003908 <HAL_RCC_GetPCLK1Freq>
 80066b8:	61f8      	str	r0, [r7, #28]
        break;
 80066ba:	e010      	b.n	80066de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066bc:	4b8f      	ldr	r3, [pc, #572]	@ (80068fc <UART_SetConfig+0x56c>)
 80066be:	61fb      	str	r3, [r7, #28]
        break;
 80066c0:	e00d      	b.n	80066de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066c2:	f7fd f889 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 80066c6:	61f8      	str	r0, [r7, #28]
        break;
 80066c8:	e009      	b.n	80066de <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066ce:	61fb      	str	r3, [r7, #28]
        break;
 80066d0:	e005      	b.n	80066de <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80066d2:	2300      	movs	r3, #0
 80066d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80066dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f000 80fb 	beq.w	80068dc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	4613      	mov	r3, r2
 80066ec:	005b      	lsls	r3, r3, #1
 80066ee:	4413      	add	r3, r2
 80066f0:	69fa      	ldr	r2, [r7, #28]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d305      	bcc.n	8006702 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066fc:	69fa      	ldr	r2, [r7, #28]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d903      	bls.n	800670a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006708:	e0e8      	b.n	80068dc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	2200      	movs	r2, #0
 800670e:	461c      	mov	r4, r3
 8006710:	4615      	mov	r5, r2
 8006712:	f04f 0200 	mov.w	r2, #0
 8006716:	f04f 0300 	mov.w	r3, #0
 800671a:	022b      	lsls	r3, r5, #8
 800671c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006720:	0222      	lsls	r2, r4, #8
 8006722:	68f9      	ldr	r1, [r7, #12]
 8006724:	6849      	ldr	r1, [r1, #4]
 8006726:	0849      	lsrs	r1, r1, #1
 8006728:	2000      	movs	r0, #0
 800672a:	4688      	mov	r8, r1
 800672c:	4681      	mov	r9, r0
 800672e:	eb12 0a08 	adds.w	sl, r2, r8
 8006732:	eb43 0b09 	adc.w	fp, r3, r9
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	603b      	str	r3, [r7, #0]
 800673e:	607a      	str	r2, [r7, #4]
 8006740:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006744:	4650      	mov	r0, sl
 8006746:	4659      	mov	r1, fp
 8006748:	f7f9 fd92 	bl	8000270 <__aeabi_uldivmod>
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	4613      	mov	r3, r2
 8006752:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800675a:	d308      	bcc.n	800676e <UART_SetConfig+0x3de>
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006762:	d204      	bcs.n	800676e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	69ba      	ldr	r2, [r7, #24]
 800676a:	60da      	str	r2, [r3, #12]
 800676c:	e0b6      	b.n	80068dc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006774:	e0b2      	b.n	80068dc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800677e:	d15e      	bne.n	800683e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006780:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006784:	2b08      	cmp	r3, #8
 8006786:	d828      	bhi.n	80067da <UART_SetConfig+0x44a>
 8006788:	a201      	add	r2, pc, #4	@ (adr r2, 8006790 <UART_SetConfig+0x400>)
 800678a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678e:	bf00      	nop
 8006790:	080067b5 	.word	0x080067b5
 8006794:	080067bd 	.word	0x080067bd
 8006798:	080067c5 	.word	0x080067c5
 800679c:	080067db 	.word	0x080067db
 80067a0:	080067cb 	.word	0x080067cb
 80067a4:	080067db 	.word	0x080067db
 80067a8:	080067db 	.word	0x080067db
 80067ac:	080067db 	.word	0x080067db
 80067b0:	080067d3 	.word	0x080067d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067b4:	f7fd f8a8 	bl	8003908 <HAL_RCC_GetPCLK1Freq>
 80067b8:	61f8      	str	r0, [r7, #28]
        break;
 80067ba:	e014      	b.n	80067e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067bc:	f7fd f8ba 	bl	8003934 <HAL_RCC_GetPCLK2Freq>
 80067c0:	61f8      	str	r0, [r7, #28]
        break;
 80067c2:	e010      	b.n	80067e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067c4:	4b4d      	ldr	r3, [pc, #308]	@ (80068fc <UART_SetConfig+0x56c>)
 80067c6:	61fb      	str	r3, [r7, #28]
        break;
 80067c8:	e00d      	b.n	80067e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ca:	f7fd f805 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 80067ce:	61f8      	str	r0, [r7, #28]
        break;
 80067d0:	e009      	b.n	80067e6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067d6:	61fb      	str	r3, [r7, #28]
        break;
 80067d8:	e005      	b.n	80067e6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80067da:	2300      	movs	r3, #0
 80067dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80067e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d077      	beq.n	80068dc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	005a      	lsls	r2, r3, #1
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	085b      	lsrs	r3, r3, #1
 80067f6:	441a      	add	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006800:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	2b0f      	cmp	r3, #15
 8006806:	d916      	bls.n	8006836 <UART_SetConfig+0x4a6>
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800680e:	d212      	bcs.n	8006836 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	b29b      	uxth	r3, r3
 8006814:	f023 030f 	bic.w	r3, r3, #15
 8006818:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	085b      	lsrs	r3, r3, #1
 800681e:	b29b      	uxth	r3, r3
 8006820:	f003 0307 	and.w	r3, r3, #7
 8006824:	b29a      	uxth	r2, r3
 8006826:	8afb      	ldrh	r3, [r7, #22]
 8006828:	4313      	orrs	r3, r2
 800682a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	8afa      	ldrh	r2, [r7, #22]
 8006832:	60da      	str	r2, [r3, #12]
 8006834:	e052      	b.n	80068dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800683c:	e04e      	b.n	80068dc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800683e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006842:	2b08      	cmp	r3, #8
 8006844:	d827      	bhi.n	8006896 <UART_SetConfig+0x506>
 8006846:	a201      	add	r2, pc, #4	@ (adr r2, 800684c <UART_SetConfig+0x4bc>)
 8006848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684c:	08006871 	.word	0x08006871
 8006850:	08006879 	.word	0x08006879
 8006854:	08006881 	.word	0x08006881
 8006858:	08006897 	.word	0x08006897
 800685c:	08006887 	.word	0x08006887
 8006860:	08006897 	.word	0x08006897
 8006864:	08006897 	.word	0x08006897
 8006868:	08006897 	.word	0x08006897
 800686c:	0800688f 	.word	0x0800688f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006870:	f7fd f84a 	bl	8003908 <HAL_RCC_GetPCLK1Freq>
 8006874:	61f8      	str	r0, [r7, #28]
        break;
 8006876:	e014      	b.n	80068a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006878:	f7fd f85c 	bl	8003934 <HAL_RCC_GetPCLK2Freq>
 800687c:	61f8      	str	r0, [r7, #28]
        break;
 800687e:	e010      	b.n	80068a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006880:	4b1e      	ldr	r3, [pc, #120]	@ (80068fc <UART_SetConfig+0x56c>)
 8006882:	61fb      	str	r3, [r7, #28]
        break;
 8006884:	e00d      	b.n	80068a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006886:	f7fc ffa7 	bl	80037d8 <HAL_RCC_GetSysClockFreq>
 800688a:	61f8      	str	r0, [r7, #28]
        break;
 800688c:	e009      	b.n	80068a2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800688e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006892:	61fb      	str	r3, [r7, #28]
        break;
 8006894:	e005      	b.n	80068a2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006896:	2300      	movs	r3, #0
 8006898:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80068a0:	bf00      	nop
    }

    if (pclk != 0U)
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d019      	beq.n	80068dc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	085a      	lsrs	r2, r3, #1
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	441a      	add	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	2b0f      	cmp	r3, #15
 80068c0:	d909      	bls.n	80068d6 <UART_SetConfig+0x546>
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068c8:	d205      	bcs.n	80068d6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	60da      	str	r2, [r3, #12]
 80068d4:	e002      	b.n	80068dc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80068e8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3728      	adds	r7, #40	@ 0x28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068f6:	bf00      	nop
 80068f8:	40008000 	.word	0x40008000
 80068fc:	00f42400 	.word	0x00f42400

08006900 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800690c:	f003 0308 	and.w	r3, r3, #8
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00a      	beq.n	800692a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	430a      	orrs	r2, r1
 8006928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00a      	beq.n	800694c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	430a      	orrs	r2, r1
 800694a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006950:	f003 0302 	and.w	r3, r3, #2
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00a      	beq.n	800696e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	430a      	orrs	r2, r1
 800696c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006972:	f003 0304 	and.w	r3, r3, #4
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00a      	beq.n	8006990 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	430a      	orrs	r2, r1
 800698e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006994:	f003 0310 	and.w	r3, r3, #16
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00a      	beq.n	80069b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b6:	f003 0320 	and.w	r3, r3, #32
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00a      	beq.n	80069d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d01a      	beq.n	8006a16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	430a      	orrs	r2, r1
 80069f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069fe:	d10a      	bne.n	8006a16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00a      	beq.n	8006a38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	430a      	orrs	r2, r1
 8006a36:	605a      	str	r2, [r3, #4]
  }
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b098      	sub	sp, #96	@ 0x60
 8006a48:	af02      	add	r7, sp, #8
 8006a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a54:	f7fa fe84 	bl	8001760 <HAL_GetTick>
 8006a58:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0308 	and.w	r3, r3, #8
 8006a64:	2b08      	cmp	r3, #8
 8006a66:	d12e      	bne.n	8006ac6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a70:	2200      	movs	r2, #0
 8006a72:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f88c 	bl	8006b94 <UART_WaitOnFlagUntilTimeout>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d021      	beq.n	8006ac6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a8a:	e853 3f00 	ldrex	r3, [r3]
 8006a8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a96:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006aa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006aa2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006aa6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006aa8:	e841 2300 	strex	r3, r2, [r1]
 8006aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1e6      	bne.n	8006a82 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e062      	b.n	8006b8c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0304 	and.w	r3, r3, #4
 8006ad0:	2b04      	cmp	r3, #4
 8006ad2:	d149      	bne.n	8006b68 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ad4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006adc:	2200      	movs	r2, #0
 8006ade:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f856 	bl	8006b94 <UART_WaitOnFlagUntilTimeout>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d03c      	beq.n	8006b68 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af6:	e853 3f00 	ldrex	r3, [r3]
 8006afa:	623b      	str	r3, [r7, #32]
   return(result);
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	461a      	mov	r2, r3
 8006b0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b14:	e841 2300 	strex	r3, r2, [r1]
 8006b18:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1e6      	bne.n	8006aee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3308      	adds	r3, #8
 8006b26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	e853 3f00 	ldrex	r3, [r3]
 8006b2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f023 0301 	bic.w	r3, r3, #1
 8006b36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3308      	adds	r3, #8
 8006b3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b40:	61fa      	str	r2, [r7, #28]
 8006b42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b44:	69b9      	ldr	r1, [r7, #24]
 8006b46:	69fa      	ldr	r2, [r7, #28]
 8006b48:	e841 2300 	strex	r3, r2, [r1]
 8006b4c:	617b      	str	r3, [r7, #20]
   return(result);
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1e5      	bne.n	8006b20 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2220      	movs	r2, #32
 8006b58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e011      	b.n	8006b8c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2220      	movs	r2, #32
 8006b6c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2220      	movs	r2, #32
 8006b72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3758      	adds	r7, #88	@ 0x58
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	603b      	str	r3, [r7, #0]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ba4:	e04f      	b.n	8006c46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bac:	d04b      	beq.n	8006c46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bae:	f7fa fdd7 	bl	8001760 <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d302      	bcc.n	8006bc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e04e      	b.n	8006c66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0304 	and.w	r3, r3, #4
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d037      	beq.n	8006c46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	2b80      	cmp	r3, #128	@ 0x80
 8006bda:	d034      	beq.n	8006c46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	2b40      	cmp	r3, #64	@ 0x40
 8006be0:	d031      	beq.n	8006c46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	69db      	ldr	r3, [r3, #28]
 8006be8:	f003 0308 	and.w	r3, r3, #8
 8006bec:	2b08      	cmp	r3, #8
 8006bee:	d110      	bne.n	8006c12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2208      	movs	r2, #8
 8006bf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f000 f838 	bl	8006c6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2208      	movs	r2, #8
 8006c02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e029      	b.n	8006c66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	69db      	ldr	r3, [r3, #28]
 8006c18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c20:	d111      	bne.n	8006c46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f000 f81e 	bl	8006c6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2220      	movs	r2, #32
 8006c36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e00f      	b.n	8006c66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	69da      	ldr	r2, [r3, #28]
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	4013      	ands	r3, r2
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	bf0c      	ite	eq
 8006c56:	2301      	moveq	r3, #1
 8006c58:	2300      	movne	r3, #0
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	79fb      	ldrb	r3, [r7, #7]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d0a0      	beq.n	8006ba6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b095      	sub	sp, #84	@ 0x54
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c7e:	e853 3f00 	ldrex	r3, [r3]
 8006c82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	461a      	mov	r2, r3
 8006c92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c94:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c96:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c9c:	e841 2300 	strex	r3, r2, [r1]
 8006ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1e6      	bne.n	8006c76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	3308      	adds	r3, #8
 8006cae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	e853 3f00 	ldrex	r3, [r3]
 8006cb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	f023 0301 	bic.w	r3, r3, #1
 8006cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3308      	adds	r3, #8
 8006cc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ccc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cd0:	e841 2300 	strex	r3, r2, [r1]
 8006cd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1e5      	bne.n	8006ca8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d118      	bne.n	8006d16 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	e853 3f00 	ldrex	r3, [r3]
 8006cf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	f023 0310 	bic.w	r3, r3, #16
 8006cf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d02:	61bb      	str	r3, [r7, #24]
 8006d04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d06:	6979      	ldr	r1, [r7, #20]
 8006d08:	69ba      	ldr	r2, [r7, #24]
 8006d0a:	e841 2300 	strex	r3, r2, [r1]
 8006d0e:	613b      	str	r3, [r7, #16]
   return(result);
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1e6      	bne.n	8006ce4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2220      	movs	r2, #32
 8006d1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006d2a:	bf00      	nop
 8006d2c:	3754      	adds	r7, #84	@ 0x54
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
	...

08006d38 <std>:
 8006d38:	2300      	movs	r3, #0
 8006d3a:	b510      	push	{r4, lr}
 8006d3c:	4604      	mov	r4, r0
 8006d3e:	e9c0 3300 	strd	r3, r3, [r0]
 8006d42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d46:	6083      	str	r3, [r0, #8]
 8006d48:	8181      	strh	r1, [r0, #12]
 8006d4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d4c:	81c2      	strh	r2, [r0, #14]
 8006d4e:	6183      	str	r3, [r0, #24]
 8006d50:	4619      	mov	r1, r3
 8006d52:	2208      	movs	r2, #8
 8006d54:	305c      	adds	r0, #92	@ 0x5c
 8006d56:	f000 f99b 	bl	8007090 <memset>
 8006d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d90 <std+0x58>)
 8006d5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d94 <std+0x5c>)
 8006d60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d62:	4b0d      	ldr	r3, [pc, #52]	@ (8006d98 <std+0x60>)
 8006d64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d66:	4b0d      	ldr	r3, [pc, #52]	@ (8006d9c <std+0x64>)
 8006d68:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006da0 <std+0x68>)
 8006d6c:	6224      	str	r4, [r4, #32]
 8006d6e:	429c      	cmp	r4, r3
 8006d70:	d006      	beq.n	8006d80 <std+0x48>
 8006d72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d76:	4294      	cmp	r4, r2
 8006d78:	d002      	beq.n	8006d80 <std+0x48>
 8006d7a:	33d0      	adds	r3, #208	@ 0xd0
 8006d7c:	429c      	cmp	r4, r3
 8006d7e:	d105      	bne.n	8006d8c <std+0x54>
 8006d80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d88:	f000 b9fa 	b.w	8007180 <__retarget_lock_init_recursive>
 8006d8c:	bd10      	pop	{r4, pc}
 8006d8e:	bf00      	nop
 8006d90:	08006ee1 	.word	0x08006ee1
 8006d94:	08006f03 	.word	0x08006f03
 8006d98:	08006f3b 	.word	0x08006f3b
 8006d9c:	08006f5f 	.word	0x08006f5f
 8006da0:	20000500 	.word	0x20000500

08006da4 <stdio_exit_handler>:
 8006da4:	4a02      	ldr	r2, [pc, #8]	@ (8006db0 <stdio_exit_handler+0xc>)
 8006da6:	4903      	ldr	r1, [pc, #12]	@ (8006db4 <stdio_exit_handler+0x10>)
 8006da8:	4803      	ldr	r0, [pc, #12]	@ (8006db8 <stdio_exit_handler+0x14>)
 8006daa:	f000 b869 	b.w	8006e80 <_fwalk_sglue>
 8006dae:	bf00      	nop
 8006db0:	20000010 	.word	0x20000010
 8006db4:	08007a1d 	.word	0x08007a1d
 8006db8:	20000020 	.word	0x20000020

08006dbc <cleanup_stdio>:
 8006dbc:	6841      	ldr	r1, [r0, #4]
 8006dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8006df0 <cleanup_stdio+0x34>)
 8006dc0:	4299      	cmp	r1, r3
 8006dc2:	b510      	push	{r4, lr}
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	d001      	beq.n	8006dcc <cleanup_stdio+0x10>
 8006dc8:	f000 fe28 	bl	8007a1c <_fflush_r>
 8006dcc:	68a1      	ldr	r1, [r4, #8]
 8006dce:	4b09      	ldr	r3, [pc, #36]	@ (8006df4 <cleanup_stdio+0x38>)
 8006dd0:	4299      	cmp	r1, r3
 8006dd2:	d002      	beq.n	8006dda <cleanup_stdio+0x1e>
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f000 fe21 	bl	8007a1c <_fflush_r>
 8006dda:	68e1      	ldr	r1, [r4, #12]
 8006ddc:	4b06      	ldr	r3, [pc, #24]	@ (8006df8 <cleanup_stdio+0x3c>)
 8006dde:	4299      	cmp	r1, r3
 8006de0:	d004      	beq.n	8006dec <cleanup_stdio+0x30>
 8006de2:	4620      	mov	r0, r4
 8006de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006de8:	f000 be18 	b.w	8007a1c <_fflush_r>
 8006dec:	bd10      	pop	{r4, pc}
 8006dee:	bf00      	nop
 8006df0:	20000500 	.word	0x20000500
 8006df4:	20000568 	.word	0x20000568
 8006df8:	200005d0 	.word	0x200005d0

08006dfc <global_stdio_init.part.0>:
 8006dfc:	b510      	push	{r4, lr}
 8006dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8006e2c <global_stdio_init.part.0+0x30>)
 8006e00:	4c0b      	ldr	r4, [pc, #44]	@ (8006e30 <global_stdio_init.part.0+0x34>)
 8006e02:	4a0c      	ldr	r2, [pc, #48]	@ (8006e34 <global_stdio_init.part.0+0x38>)
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	4620      	mov	r0, r4
 8006e08:	2200      	movs	r2, #0
 8006e0a:	2104      	movs	r1, #4
 8006e0c:	f7ff ff94 	bl	8006d38 <std>
 8006e10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e14:	2201      	movs	r2, #1
 8006e16:	2109      	movs	r1, #9
 8006e18:	f7ff ff8e 	bl	8006d38 <std>
 8006e1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e20:	2202      	movs	r2, #2
 8006e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e26:	2112      	movs	r1, #18
 8006e28:	f7ff bf86 	b.w	8006d38 <std>
 8006e2c:	20000638 	.word	0x20000638
 8006e30:	20000500 	.word	0x20000500
 8006e34:	08006da5 	.word	0x08006da5

08006e38 <__sfp_lock_acquire>:
 8006e38:	4801      	ldr	r0, [pc, #4]	@ (8006e40 <__sfp_lock_acquire+0x8>)
 8006e3a:	f000 b9a2 	b.w	8007182 <__retarget_lock_acquire_recursive>
 8006e3e:	bf00      	nop
 8006e40:	20000641 	.word	0x20000641

08006e44 <__sfp_lock_release>:
 8006e44:	4801      	ldr	r0, [pc, #4]	@ (8006e4c <__sfp_lock_release+0x8>)
 8006e46:	f000 b99d 	b.w	8007184 <__retarget_lock_release_recursive>
 8006e4a:	bf00      	nop
 8006e4c:	20000641 	.word	0x20000641

08006e50 <__sinit>:
 8006e50:	b510      	push	{r4, lr}
 8006e52:	4604      	mov	r4, r0
 8006e54:	f7ff fff0 	bl	8006e38 <__sfp_lock_acquire>
 8006e58:	6a23      	ldr	r3, [r4, #32]
 8006e5a:	b11b      	cbz	r3, 8006e64 <__sinit+0x14>
 8006e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e60:	f7ff bff0 	b.w	8006e44 <__sfp_lock_release>
 8006e64:	4b04      	ldr	r3, [pc, #16]	@ (8006e78 <__sinit+0x28>)
 8006e66:	6223      	str	r3, [r4, #32]
 8006e68:	4b04      	ldr	r3, [pc, #16]	@ (8006e7c <__sinit+0x2c>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1f5      	bne.n	8006e5c <__sinit+0xc>
 8006e70:	f7ff ffc4 	bl	8006dfc <global_stdio_init.part.0>
 8006e74:	e7f2      	b.n	8006e5c <__sinit+0xc>
 8006e76:	bf00      	nop
 8006e78:	08006dbd 	.word	0x08006dbd
 8006e7c:	20000638 	.word	0x20000638

08006e80 <_fwalk_sglue>:
 8006e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e84:	4607      	mov	r7, r0
 8006e86:	4688      	mov	r8, r1
 8006e88:	4614      	mov	r4, r2
 8006e8a:	2600      	movs	r6, #0
 8006e8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e90:	f1b9 0901 	subs.w	r9, r9, #1
 8006e94:	d505      	bpl.n	8006ea2 <_fwalk_sglue+0x22>
 8006e96:	6824      	ldr	r4, [r4, #0]
 8006e98:	2c00      	cmp	r4, #0
 8006e9a:	d1f7      	bne.n	8006e8c <_fwalk_sglue+0xc>
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ea2:	89ab      	ldrh	r3, [r5, #12]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d907      	bls.n	8006eb8 <_fwalk_sglue+0x38>
 8006ea8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006eac:	3301      	adds	r3, #1
 8006eae:	d003      	beq.n	8006eb8 <_fwalk_sglue+0x38>
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	4638      	mov	r0, r7
 8006eb4:	47c0      	blx	r8
 8006eb6:	4306      	orrs	r6, r0
 8006eb8:	3568      	adds	r5, #104	@ 0x68
 8006eba:	e7e9      	b.n	8006e90 <_fwalk_sglue+0x10>

08006ebc <iprintf>:
 8006ebc:	b40f      	push	{r0, r1, r2, r3}
 8006ebe:	b507      	push	{r0, r1, r2, lr}
 8006ec0:	4906      	ldr	r1, [pc, #24]	@ (8006edc <iprintf+0x20>)
 8006ec2:	ab04      	add	r3, sp, #16
 8006ec4:	6808      	ldr	r0, [r1, #0]
 8006ec6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eca:	6881      	ldr	r1, [r0, #8]
 8006ecc:	9301      	str	r3, [sp, #4]
 8006ece:	f000 fa7d 	bl	80073cc <_vfiprintf_r>
 8006ed2:	b003      	add	sp, #12
 8006ed4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ed8:	b004      	add	sp, #16
 8006eda:	4770      	bx	lr
 8006edc:	2000001c 	.word	0x2000001c

08006ee0 <__sread>:
 8006ee0:	b510      	push	{r4, lr}
 8006ee2:	460c      	mov	r4, r1
 8006ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ee8:	f000 f8fc 	bl	80070e4 <_read_r>
 8006eec:	2800      	cmp	r0, #0
 8006eee:	bfab      	itete	ge
 8006ef0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006ef2:	89a3      	ldrhlt	r3, [r4, #12]
 8006ef4:	181b      	addge	r3, r3, r0
 8006ef6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006efa:	bfac      	ite	ge
 8006efc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006efe:	81a3      	strhlt	r3, [r4, #12]
 8006f00:	bd10      	pop	{r4, pc}

08006f02 <__swrite>:
 8006f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f06:	461f      	mov	r7, r3
 8006f08:	898b      	ldrh	r3, [r1, #12]
 8006f0a:	05db      	lsls	r3, r3, #23
 8006f0c:	4605      	mov	r5, r0
 8006f0e:	460c      	mov	r4, r1
 8006f10:	4616      	mov	r6, r2
 8006f12:	d505      	bpl.n	8006f20 <__swrite+0x1e>
 8006f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f18:	2302      	movs	r3, #2
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f000 f8d0 	bl	80070c0 <_lseek_r>
 8006f20:	89a3      	ldrh	r3, [r4, #12]
 8006f22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f2a:	81a3      	strh	r3, [r4, #12]
 8006f2c:	4632      	mov	r2, r6
 8006f2e:	463b      	mov	r3, r7
 8006f30:	4628      	mov	r0, r5
 8006f32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f36:	f000 b8e7 	b.w	8007108 <_write_r>

08006f3a <__sseek>:
 8006f3a:	b510      	push	{r4, lr}
 8006f3c:	460c      	mov	r4, r1
 8006f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f42:	f000 f8bd 	bl	80070c0 <_lseek_r>
 8006f46:	1c43      	adds	r3, r0, #1
 8006f48:	89a3      	ldrh	r3, [r4, #12]
 8006f4a:	bf15      	itete	ne
 8006f4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f56:	81a3      	strheq	r3, [r4, #12]
 8006f58:	bf18      	it	ne
 8006f5a:	81a3      	strhne	r3, [r4, #12]
 8006f5c:	bd10      	pop	{r4, pc}

08006f5e <__sclose>:
 8006f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f62:	f000 b89d 	b.w	80070a0 <_close_r>

08006f66 <__swbuf_r>:
 8006f66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f68:	460e      	mov	r6, r1
 8006f6a:	4614      	mov	r4, r2
 8006f6c:	4605      	mov	r5, r0
 8006f6e:	b118      	cbz	r0, 8006f78 <__swbuf_r+0x12>
 8006f70:	6a03      	ldr	r3, [r0, #32]
 8006f72:	b90b      	cbnz	r3, 8006f78 <__swbuf_r+0x12>
 8006f74:	f7ff ff6c 	bl	8006e50 <__sinit>
 8006f78:	69a3      	ldr	r3, [r4, #24]
 8006f7a:	60a3      	str	r3, [r4, #8]
 8006f7c:	89a3      	ldrh	r3, [r4, #12]
 8006f7e:	071a      	lsls	r2, r3, #28
 8006f80:	d501      	bpl.n	8006f86 <__swbuf_r+0x20>
 8006f82:	6923      	ldr	r3, [r4, #16]
 8006f84:	b943      	cbnz	r3, 8006f98 <__swbuf_r+0x32>
 8006f86:	4621      	mov	r1, r4
 8006f88:	4628      	mov	r0, r5
 8006f8a:	f000 f82b 	bl	8006fe4 <__swsetup_r>
 8006f8e:	b118      	cbz	r0, 8006f98 <__swbuf_r+0x32>
 8006f90:	f04f 37ff 	mov.w	r7, #4294967295
 8006f94:	4638      	mov	r0, r7
 8006f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f98:	6823      	ldr	r3, [r4, #0]
 8006f9a:	6922      	ldr	r2, [r4, #16]
 8006f9c:	1a98      	subs	r0, r3, r2
 8006f9e:	6963      	ldr	r3, [r4, #20]
 8006fa0:	b2f6      	uxtb	r6, r6
 8006fa2:	4283      	cmp	r3, r0
 8006fa4:	4637      	mov	r7, r6
 8006fa6:	dc05      	bgt.n	8006fb4 <__swbuf_r+0x4e>
 8006fa8:	4621      	mov	r1, r4
 8006faa:	4628      	mov	r0, r5
 8006fac:	f000 fd36 	bl	8007a1c <_fflush_r>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	d1ed      	bne.n	8006f90 <__swbuf_r+0x2a>
 8006fb4:	68a3      	ldr	r3, [r4, #8]
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	60a3      	str	r3, [r4, #8]
 8006fba:	6823      	ldr	r3, [r4, #0]
 8006fbc:	1c5a      	adds	r2, r3, #1
 8006fbe:	6022      	str	r2, [r4, #0]
 8006fc0:	701e      	strb	r6, [r3, #0]
 8006fc2:	6962      	ldr	r2, [r4, #20]
 8006fc4:	1c43      	adds	r3, r0, #1
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d004      	beq.n	8006fd4 <__swbuf_r+0x6e>
 8006fca:	89a3      	ldrh	r3, [r4, #12]
 8006fcc:	07db      	lsls	r3, r3, #31
 8006fce:	d5e1      	bpl.n	8006f94 <__swbuf_r+0x2e>
 8006fd0:	2e0a      	cmp	r6, #10
 8006fd2:	d1df      	bne.n	8006f94 <__swbuf_r+0x2e>
 8006fd4:	4621      	mov	r1, r4
 8006fd6:	4628      	mov	r0, r5
 8006fd8:	f000 fd20 	bl	8007a1c <_fflush_r>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	d0d9      	beq.n	8006f94 <__swbuf_r+0x2e>
 8006fe0:	e7d6      	b.n	8006f90 <__swbuf_r+0x2a>
	...

08006fe4 <__swsetup_r>:
 8006fe4:	b538      	push	{r3, r4, r5, lr}
 8006fe6:	4b29      	ldr	r3, [pc, #164]	@ (800708c <__swsetup_r+0xa8>)
 8006fe8:	4605      	mov	r5, r0
 8006fea:	6818      	ldr	r0, [r3, #0]
 8006fec:	460c      	mov	r4, r1
 8006fee:	b118      	cbz	r0, 8006ff8 <__swsetup_r+0x14>
 8006ff0:	6a03      	ldr	r3, [r0, #32]
 8006ff2:	b90b      	cbnz	r3, 8006ff8 <__swsetup_r+0x14>
 8006ff4:	f7ff ff2c 	bl	8006e50 <__sinit>
 8006ff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ffc:	0719      	lsls	r1, r3, #28
 8006ffe:	d422      	bmi.n	8007046 <__swsetup_r+0x62>
 8007000:	06da      	lsls	r2, r3, #27
 8007002:	d407      	bmi.n	8007014 <__swsetup_r+0x30>
 8007004:	2209      	movs	r2, #9
 8007006:	602a      	str	r2, [r5, #0]
 8007008:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800700c:	81a3      	strh	r3, [r4, #12]
 800700e:	f04f 30ff 	mov.w	r0, #4294967295
 8007012:	e033      	b.n	800707c <__swsetup_r+0x98>
 8007014:	0758      	lsls	r0, r3, #29
 8007016:	d512      	bpl.n	800703e <__swsetup_r+0x5a>
 8007018:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800701a:	b141      	cbz	r1, 800702e <__swsetup_r+0x4a>
 800701c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007020:	4299      	cmp	r1, r3
 8007022:	d002      	beq.n	800702a <__swsetup_r+0x46>
 8007024:	4628      	mov	r0, r5
 8007026:	f000 f8af 	bl	8007188 <_free_r>
 800702a:	2300      	movs	r3, #0
 800702c:	6363      	str	r3, [r4, #52]	@ 0x34
 800702e:	89a3      	ldrh	r3, [r4, #12]
 8007030:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007034:	81a3      	strh	r3, [r4, #12]
 8007036:	2300      	movs	r3, #0
 8007038:	6063      	str	r3, [r4, #4]
 800703a:	6923      	ldr	r3, [r4, #16]
 800703c:	6023      	str	r3, [r4, #0]
 800703e:	89a3      	ldrh	r3, [r4, #12]
 8007040:	f043 0308 	orr.w	r3, r3, #8
 8007044:	81a3      	strh	r3, [r4, #12]
 8007046:	6923      	ldr	r3, [r4, #16]
 8007048:	b94b      	cbnz	r3, 800705e <__swsetup_r+0x7a>
 800704a:	89a3      	ldrh	r3, [r4, #12]
 800704c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007050:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007054:	d003      	beq.n	800705e <__swsetup_r+0x7a>
 8007056:	4621      	mov	r1, r4
 8007058:	4628      	mov	r0, r5
 800705a:	f000 fd2d 	bl	8007ab8 <__smakebuf_r>
 800705e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007062:	f013 0201 	ands.w	r2, r3, #1
 8007066:	d00a      	beq.n	800707e <__swsetup_r+0x9a>
 8007068:	2200      	movs	r2, #0
 800706a:	60a2      	str	r2, [r4, #8]
 800706c:	6962      	ldr	r2, [r4, #20]
 800706e:	4252      	negs	r2, r2
 8007070:	61a2      	str	r2, [r4, #24]
 8007072:	6922      	ldr	r2, [r4, #16]
 8007074:	b942      	cbnz	r2, 8007088 <__swsetup_r+0xa4>
 8007076:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800707a:	d1c5      	bne.n	8007008 <__swsetup_r+0x24>
 800707c:	bd38      	pop	{r3, r4, r5, pc}
 800707e:	0799      	lsls	r1, r3, #30
 8007080:	bf58      	it	pl
 8007082:	6962      	ldrpl	r2, [r4, #20]
 8007084:	60a2      	str	r2, [r4, #8]
 8007086:	e7f4      	b.n	8007072 <__swsetup_r+0x8e>
 8007088:	2000      	movs	r0, #0
 800708a:	e7f7      	b.n	800707c <__swsetup_r+0x98>
 800708c:	2000001c 	.word	0x2000001c

08007090 <memset>:
 8007090:	4402      	add	r2, r0
 8007092:	4603      	mov	r3, r0
 8007094:	4293      	cmp	r3, r2
 8007096:	d100      	bne.n	800709a <memset+0xa>
 8007098:	4770      	bx	lr
 800709a:	f803 1b01 	strb.w	r1, [r3], #1
 800709e:	e7f9      	b.n	8007094 <memset+0x4>

080070a0 <_close_r>:
 80070a0:	b538      	push	{r3, r4, r5, lr}
 80070a2:	4d06      	ldr	r5, [pc, #24]	@ (80070bc <_close_r+0x1c>)
 80070a4:	2300      	movs	r3, #0
 80070a6:	4604      	mov	r4, r0
 80070a8:	4608      	mov	r0, r1
 80070aa:	602b      	str	r3, [r5, #0]
 80070ac:	f7fa f9b5 	bl	800141a <_close>
 80070b0:	1c43      	adds	r3, r0, #1
 80070b2:	d102      	bne.n	80070ba <_close_r+0x1a>
 80070b4:	682b      	ldr	r3, [r5, #0]
 80070b6:	b103      	cbz	r3, 80070ba <_close_r+0x1a>
 80070b8:	6023      	str	r3, [r4, #0]
 80070ba:	bd38      	pop	{r3, r4, r5, pc}
 80070bc:	2000063c 	.word	0x2000063c

080070c0 <_lseek_r>:
 80070c0:	b538      	push	{r3, r4, r5, lr}
 80070c2:	4d07      	ldr	r5, [pc, #28]	@ (80070e0 <_lseek_r+0x20>)
 80070c4:	4604      	mov	r4, r0
 80070c6:	4608      	mov	r0, r1
 80070c8:	4611      	mov	r1, r2
 80070ca:	2200      	movs	r2, #0
 80070cc:	602a      	str	r2, [r5, #0]
 80070ce:	461a      	mov	r2, r3
 80070d0:	f7fa f9ca 	bl	8001468 <_lseek>
 80070d4:	1c43      	adds	r3, r0, #1
 80070d6:	d102      	bne.n	80070de <_lseek_r+0x1e>
 80070d8:	682b      	ldr	r3, [r5, #0]
 80070da:	b103      	cbz	r3, 80070de <_lseek_r+0x1e>
 80070dc:	6023      	str	r3, [r4, #0]
 80070de:	bd38      	pop	{r3, r4, r5, pc}
 80070e0:	2000063c 	.word	0x2000063c

080070e4 <_read_r>:
 80070e4:	b538      	push	{r3, r4, r5, lr}
 80070e6:	4d07      	ldr	r5, [pc, #28]	@ (8007104 <_read_r+0x20>)
 80070e8:	4604      	mov	r4, r0
 80070ea:	4608      	mov	r0, r1
 80070ec:	4611      	mov	r1, r2
 80070ee:	2200      	movs	r2, #0
 80070f0:	602a      	str	r2, [r5, #0]
 80070f2:	461a      	mov	r2, r3
 80070f4:	f7fa f958 	bl	80013a8 <_read>
 80070f8:	1c43      	adds	r3, r0, #1
 80070fa:	d102      	bne.n	8007102 <_read_r+0x1e>
 80070fc:	682b      	ldr	r3, [r5, #0]
 80070fe:	b103      	cbz	r3, 8007102 <_read_r+0x1e>
 8007100:	6023      	str	r3, [r4, #0]
 8007102:	bd38      	pop	{r3, r4, r5, pc}
 8007104:	2000063c 	.word	0x2000063c

08007108 <_write_r>:
 8007108:	b538      	push	{r3, r4, r5, lr}
 800710a:	4d07      	ldr	r5, [pc, #28]	@ (8007128 <_write_r+0x20>)
 800710c:	4604      	mov	r4, r0
 800710e:	4608      	mov	r0, r1
 8007110:	4611      	mov	r1, r2
 8007112:	2200      	movs	r2, #0
 8007114:	602a      	str	r2, [r5, #0]
 8007116:	461a      	mov	r2, r3
 8007118:	f7fa f963 	bl	80013e2 <_write>
 800711c:	1c43      	adds	r3, r0, #1
 800711e:	d102      	bne.n	8007126 <_write_r+0x1e>
 8007120:	682b      	ldr	r3, [r5, #0]
 8007122:	b103      	cbz	r3, 8007126 <_write_r+0x1e>
 8007124:	6023      	str	r3, [r4, #0]
 8007126:	bd38      	pop	{r3, r4, r5, pc}
 8007128:	2000063c 	.word	0x2000063c

0800712c <__errno>:
 800712c:	4b01      	ldr	r3, [pc, #4]	@ (8007134 <__errno+0x8>)
 800712e:	6818      	ldr	r0, [r3, #0]
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	2000001c 	.word	0x2000001c

08007138 <__libc_init_array>:
 8007138:	b570      	push	{r4, r5, r6, lr}
 800713a:	4d0d      	ldr	r5, [pc, #52]	@ (8007170 <__libc_init_array+0x38>)
 800713c:	4c0d      	ldr	r4, [pc, #52]	@ (8007174 <__libc_init_array+0x3c>)
 800713e:	1b64      	subs	r4, r4, r5
 8007140:	10a4      	asrs	r4, r4, #2
 8007142:	2600      	movs	r6, #0
 8007144:	42a6      	cmp	r6, r4
 8007146:	d109      	bne.n	800715c <__libc_init_array+0x24>
 8007148:	4d0b      	ldr	r5, [pc, #44]	@ (8007178 <__libc_init_array+0x40>)
 800714a:	4c0c      	ldr	r4, [pc, #48]	@ (800717c <__libc_init_array+0x44>)
 800714c:	f000 fd22 	bl	8007b94 <_init>
 8007150:	1b64      	subs	r4, r4, r5
 8007152:	10a4      	asrs	r4, r4, #2
 8007154:	2600      	movs	r6, #0
 8007156:	42a6      	cmp	r6, r4
 8007158:	d105      	bne.n	8007166 <__libc_init_array+0x2e>
 800715a:	bd70      	pop	{r4, r5, r6, pc}
 800715c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007160:	4798      	blx	r3
 8007162:	3601      	adds	r6, #1
 8007164:	e7ee      	b.n	8007144 <__libc_init_array+0xc>
 8007166:	f855 3b04 	ldr.w	r3, [r5], #4
 800716a:	4798      	blx	r3
 800716c:	3601      	adds	r6, #1
 800716e:	e7f2      	b.n	8007156 <__libc_init_array+0x1e>
 8007170:	08007c64 	.word	0x08007c64
 8007174:	08007c64 	.word	0x08007c64
 8007178:	08007c64 	.word	0x08007c64
 800717c:	08007c68 	.word	0x08007c68

08007180 <__retarget_lock_init_recursive>:
 8007180:	4770      	bx	lr

08007182 <__retarget_lock_acquire_recursive>:
 8007182:	4770      	bx	lr

08007184 <__retarget_lock_release_recursive>:
 8007184:	4770      	bx	lr
	...

08007188 <_free_r>:
 8007188:	b538      	push	{r3, r4, r5, lr}
 800718a:	4605      	mov	r5, r0
 800718c:	2900      	cmp	r1, #0
 800718e:	d041      	beq.n	8007214 <_free_r+0x8c>
 8007190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007194:	1f0c      	subs	r4, r1, #4
 8007196:	2b00      	cmp	r3, #0
 8007198:	bfb8      	it	lt
 800719a:	18e4      	addlt	r4, r4, r3
 800719c:	f000 f8e0 	bl	8007360 <__malloc_lock>
 80071a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007218 <_free_r+0x90>)
 80071a2:	6813      	ldr	r3, [r2, #0]
 80071a4:	b933      	cbnz	r3, 80071b4 <_free_r+0x2c>
 80071a6:	6063      	str	r3, [r4, #4]
 80071a8:	6014      	str	r4, [r2, #0]
 80071aa:	4628      	mov	r0, r5
 80071ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071b0:	f000 b8dc 	b.w	800736c <__malloc_unlock>
 80071b4:	42a3      	cmp	r3, r4
 80071b6:	d908      	bls.n	80071ca <_free_r+0x42>
 80071b8:	6820      	ldr	r0, [r4, #0]
 80071ba:	1821      	adds	r1, r4, r0
 80071bc:	428b      	cmp	r3, r1
 80071be:	bf01      	itttt	eq
 80071c0:	6819      	ldreq	r1, [r3, #0]
 80071c2:	685b      	ldreq	r3, [r3, #4]
 80071c4:	1809      	addeq	r1, r1, r0
 80071c6:	6021      	streq	r1, [r4, #0]
 80071c8:	e7ed      	b.n	80071a6 <_free_r+0x1e>
 80071ca:	461a      	mov	r2, r3
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	b10b      	cbz	r3, 80071d4 <_free_r+0x4c>
 80071d0:	42a3      	cmp	r3, r4
 80071d2:	d9fa      	bls.n	80071ca <_free_r+0x42>
 80071d4:	6811      	ldr	r1, [r2, #0]
 80071d6:	1850      	adds	r0, r2, r1
 80071d8:	42a0      	cmp	r0, r4
 80071da:	d10b      	bne.n	80071f4 <_free_r+0x6c>
 80071dc:	6820      	ldr	r0, [r4, #0]
 80071de:	4401      	add	r1, r0
 80071e0:	1850      	adds	r0, r2, r1
 80071e2:	4283      	cmp	r3, r0
 80071e4:	6011      	str	r1, [r2, #0]
 80071e6:	d1e0      	bne.n	80071aa <_free_r+0x22>
 80071e8:	6818      	ldr	r0, [r3, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	6053      	str	r3, [r2, #4]
 80071ee:	4408      	add	r0, r1
 80071f0:	6010      	str	r0, [r2, #0]
 80071f2:	e7da      	b.n	80071aa <_free_r+0x22>
 80071f4:	d902      	bls.n	80071fc <_free_r+0x74>
 80071f6:	230c      	movs	r3, #12
 80071f8:	602b      	str	r3, [r5, #0]
 80071fa:	e7d6      	b.n	80071aa <_free_r+0x22>
 80071fc:	6820      	ldr	r0, [r4, #0]
 80071fe:	1821      	adds	r1, r4, r0
 8007200:	428b      	cmp	r3, r1
 8007202:	bf04      	itt	eq
 8007204:	6819      	ldreq	r1, [r3, #0]
 8007206:	685b      	ldreq	r3, [r3, #4]
 8007208:	6063      	str	r3, [r4, #4]
 800720a:	bf04      	itt	eq
 800720c:	1809      	addeq	r1, r1, r0
 800720e:	6021      	streq	r1, [r4, #0]
 8007210:	6054      	str	r4, [r2, #4]
 8007212:	e7ca      	b.n	80071aa <_free_r+0x22>
 8007214:	bd38      	pop	{r3, r4, r5, pc}
 8007216:	bf00      	nop
 8007218:	20000648 	.word	0x20000648

0800721c <sbrk_aligned>:
 800721c:	b570      	push	{r4, r5, r6, lr}
 800721e:	4e0f      	ldr	r6, [pc, #60]	@ (800725c <sbrk_aligned+0x40>)
 8007220:	460c      	mov	r4, r1
 8007222:	6831      	ldr	r1, [r6, #0]
 8007224:	4605      	mov	r5, r0
 8007226:	b911      	cbnz	r1, 800722e <sbrk_aligned+0x12>
 8007228:	f000 fca4 	bl	8007b74 <_sbrk_r>
 800722c:	6030      	str	r0, [r6, #0]
 800722e:	4621      	mov	r1, r4
 8007230:	4628      	mov	r0, r5
 8007232:	f000 fc9f 	bl	8007b74 <_sbrk_r>
 8007236:	1c43      	adds	r3, r0, #1
 8007238:	d103      	bne.n	8007242 <sbrk_aligned+0x26>
 800723a:	f04f 34ff 	mov.w	r4, #4294967295
 800723e:	4620      	mov	r0, r4
 8007240:	bd70      	pop	{r4, r5, r6, pc}
 8007242:	1cc4      	adds	r4, r0, #3
 8007244:	f024 0403 	bic.w	r4, r4, #3
 8007248:	42a0      	cmp	r0, r4
 800724a:	d0f8      	beq.n	800723e <sbrk_aligned+0x22>
 800724c:	1a21      	subs	r1, r4, r0
 800724e:	4628      	mov	r0, r5
 8007250:	f000 fc90 	bl	8007b74 <_sbrk_r>
 8007254:	3001      	adds	r0, #1
 8007256:	d1f2      	bne.n	800723e <sbrk_aligned+0x22>
 8007258:	e7ef      	b.n	800723a <sbrk_aligned+0x1e>
 800725a:	bf00      	nop
 800725c:	20000644 	.word	0x20000644

08007260 <_malloc_r>:
 8007260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007264:	1ccd      	adds	r5, r1, #3
 8007266:	f025 0503 	bic.w	r5, r5, #3
 800726a:	3508      	adds	r5, #8
 800726c:	2d0c      	cmp	r5, #12
 800726e:	bf38      	it	cc
 8007270:	250c      	movcc	r5, #12
 8007272:	2d00      	cmp	r5, #0
 8007274:	4606      	mov	r6, r0
 8007276:	db01      	blt.n	800727c <_malloc_r+0x1c>
 8007278:	42a9      	cmp	r1, r5
 800727a:	d904      	bls.n	8007286 <_malloc_r+0x26>
 800727c:	230c      	movs	r3, #12
 800727e:	6033      	str	r3, [r6, #0]
 8007280:	2000      	movs	r0, #0
 8007282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007286:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800735c <_malloc_r+0xfc>
 800728a:	f000 f869 	bl	8007360 <__malloc_lock>
 800728e:	f8d8 3000 	ldr.w	r3, [r8]
 8007292:	461c      	mov	r4, r3
 8007294:	bb44      	cbnz	r4, 80072e8 <_malloc_r+0x88>
 8007296:	4629      	mov	r1, r5
 8007298:	4630      	mov	r0, r6
 800729a:	f7ff ffbf 	bl	800721c <sbrk_aligned>
 800729e:	1c43      	adds	r3, r0, #1
 80072a0:	4604      	mov	r4, r0
 80072a2:	d158      	bne.n	8007356 <_malloc_r+0xf6>
 80072a4:	f8d8 4000 	ldr.w	r4, [r8]
 80072a8:	4627      	mov	r7, r4
 80072aa:	2f00      	cmp	r7, #0
 80072ac:	d143      	bne.n	8007336 <_malloc_r+0xd6>
 80072ae:	2c00      	cmp	r4, #0
 80072b0:	d04b      	beq.n	800734a <_malloc_r+0xea>
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	4639      	mov	r1, r7
 80072b6:	4630      	mov	r0, r6
 80072b8:	eb04 0903 	add.w	r9, r4, r3
 80072bc:	f000 fc5a 	bl	8007b74 <_sbrk_r>
 80072c0:	4581      	cmp	r9, r0
 80072c2:	d142      	bne.n	800734a <_malloc_r+0xea>
 80072c4:	6821      	ldr	r1, [r4, #0]
 80072c6:	1a6d      	subs	r5, r5, r1
 80072c8:	4629      	mov	r1, r5
 80072ca:	4630      	mov	r0, r6
 80072cc:	f7ff ffa6 	bl	800721c <sbrk_aligned>
 80072d0:	3001      	adds	r0, #1
 80072d2:	d03a      	beq.n	800734a <_malloc_r+0xea>
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	442b      	add	r3, r5
 80072d8:	6023      	str	r3, [r4, #0]
 80072da:	f8d8 3000 	ldr.w	r3, [r8]
 80072de:	685a      	ldr	r2, [r3, #4]
 80072e0:	bb62      	cbnz	r2, 800733c <_malloc_r+0xdc>
 80072e2:	f8c8 7000 	str.w	r7, [r8]
 80072e6:	e00f      	b.n	8007308 <_malloc_r+0xa8>
 80072e8:	6822      	ldr	r2, [r4, #0]
 80072ea:	1b52      	subs	r2, r2, r5
 80072ec:	d420      	bmi.n	8007330 <_malloc_r+0xd0>
 80072ee:	2a0b      	cmp	r2, #11
 80072f0:	d917      	bls.n	8007322 <_malloc_r+0xc2>
 80072f2:	1961      	adds	r1, r4, r5
 80072f4:	42a3      	cmp	r3, r4
 80072f6:	6025      	str	r5, [r4, #0]
 80072f8:	bf18      	it	ne
 80072fa:	6059      	strne	r1, [r3, #4]
 80072fc:	6863      	ldr	r3, [r4, #4]
 80072fe:	bf08      	it	eq
 8007300:	f8c8 1000 	streq.w	r1, [r8]
 8007304:	5162      	str	r2, [r4, r5]
 8007306:	604b      	str	r3, [r1, #4]
 8007308:	4630      	mov	r0, r6
 800730a:	f000 f82f 	bl	800736c <__malloc_unlock>
 800730e:	f104 000b 	add.w	r0, r4, #11
 8007312:	1d23      	adds	r3, r4, #4
 8007314:	f020 0007 	bic.w	r0, r0, #7
 8007318:	1ac2      	subs	r2, r0, r3
 800731a:	bf1c      	itt	ne
 800731c:	1a1b      	subne	r3, r3, r0
 800731e:	50a3      	strne	r3, [r4, r2]
 8007320:	e7af      	b.n	8007282 <_malloc_r+0x22>
 8007322:	6862      	ldr	r2, [r4, #4]
 8007324:	42a3      	cmp	r3, r4
 8007326:	bf0c      	ite	eq
 8007328:	f8c8 2000 	streq.w	r2, [r8]
 800732c:	605a      	strne	r2, [r3, #4]
 800732e:	e7eb      	b.n	8007308 <_malloc_r+0xa8>
 8007330:	4623      	mov	r3, r4
 8007332:	6864      	ldr	r4, [r4, #4]
 8007334:	e7ae      	b.n	8007294 <_malloc_r+0x34>
 8007336:	463c      	mov	r4, r7
 8007338:	687f      	ldr	r7, [r7, #4]
 800733a:	e7b6      	b.n	80072aa <_malloc_r+0x4a>
 800733c:	461a      	mov	r2, r3
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	42a3      	cmp	r3, r4
 8007342:	d1fb      	bne.n	800733c <_malloc_r+0xdc>
 8007344:	2300      	movs	r3, #0
 8007346:	6053      	str	r3, [r2, #4]
 8007348:	e7de      	b.n	8007308 <_malloc_r+0xa8>
 800734a:	230c      	movs	r3, #12
 800734c:	6033      	str	r3, [r6, #0]
 800734e:	4630      	mov	r0, r6
 8007350:	f000 f80c 	bl	800736c <__malloc_unlock>
 8007354:	e794      	b.n	8007280 <_malloc_r+0x20>
 8007356:	6005      	str	r5, [r0, #0]
 8007358:	e7d6      	b.n	8007308 <_malloc_r+0xa8>
 800735a:	bf00      	nop
 800735c:	20000648 	.word	0x20000648

08007360 <__malloc_lock>:
 8007360:	4801      	ldr	r0, [pc, #4]	@ (8007368 <__malloc_lock+0x8>)
 8007362:	f7ff bf0e 	b.w	8007182 <__retarget_lock_acquire_recursive>
 8007366:	bf00      	nop
 8007368:	20000640 	.word	0x20000640

0800736c <__malloc_unlock>:
 800736c:	4801      	ldr	r0, [pc, #4]	@ (8007374 <__malloc_unlock+0x8>)
 800736e:	f7ff bf09 	b.w	8007184 <__retarget_lock_release_recursive>
 8007372:	bf00      	nop
 8007374:	20000640 	.word	0x20000640

08007378 <__sfputc_r>:
 8007378:	6893      	ldr	r3, [r2, #8]
 800737a:	3b01      	subs	r3, #1
 800737c:	2b00      	cmp	r3, #0
 800737e:	b410      	push	{r4}
 8007380:	6093      	str	r3, [r2, #8]
 8007382:	da08      	bge.n	8007396 <__sfputc_r+0x1e>
 8007384:	6994      	ldr	r4, [r2, #24]
 8007386:	42a3      	cmp	r3, r4
 8007388:	db01      	blt.n	800738e <__sfputc_r+0x16>
 800738a:	290a      	cmp	r1, #10
 800738c:	d103      	bne.n	8007396 <__sfputc_r+0x1e>
 800738e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007392:	f7ff bde8 	b.w	8006f66 <__swbuf_r>
 8007396:	6813      	ldr	r3, [r2, #0]
 8007398:	1c58      	adds	r0, r3, #1
 800739a:	6010      	str	r0, [r2, #0]
 800739c:	7019      	strb	r1, [r3, #0]
 800739e:	4608      	mov	r0, r1
 80073a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <__sfputs_r>:
 80073a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a8:	4606      	mov	r6, r0
 80073aa:	460f      	mov	r7, r1
 80073ac:	4614      	mov	r4, r2
 80073ae:	18d5      	adds	r5, r2, r3
 80073b0:	42ac      	cmp	r4, r5
 80073b2:	d101      	bne.n	80073b8 <__sfputs_r+0x12>
 80073b4:	2000      	movs	r0, #0
 80073b6:	e007      	b.n	80073c8 <__sfputs_r+0x22>
 80073b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073bc:	463a      	mov	r2, r7
 80073be:	4630      	mov	r0, r6
 80073c0:	f7ff ffda 	bl	8007378 <__sfputc_r>
 80073c4:	1c43      	adds	r3, r0, #1
 80073c6:	d1f3      	bne.n	80073b0 <__sfputs_r+0xa>
 80073c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080073cc <_vfiprintf_r>:
 80073cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d0:	460d      	mov	r5, r1
 80073d2:	b09d      	sub	sp, #116	@ 0x74
 80073d4:	4614      	mov	r4, r2
 80073d6:	4698      	mov	r8, r3
 80073d8:	4606      	mov	r6, r0
 80073da:	b118      	cbz	r0, 80073e4 <_vfiprintf_r+0x18>
 80073dc:	6a03      	ldr	r3, [r0, #32]
 80073de:	b90b      	cbnz	r3, 80073e4 <_vfiprintf_r+0x18>
 80073e0:	f7ff fd36 	bl	8006e50 <__sinit>
 80073e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073e6:	07d9      	lsls	r1, r3, #31
 80073e8:	d405      	bmi.n	80073f6 <_vfiprintf_r+0x2a>
 80073ea:	89ab      	ldrh	r3, [r5, #12]
 80073ec:	059a      	lsls	r2, r3, #22
 80073ee:	d402      	bmi.n	80073f6 <_vfiprintf_r+0x2a>
 80073f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073f2:	f7ff fec6 	bl	8007182 <__retarget_lock_acquire_recursive>
 80073f6:	89ab      	ldrh	r3, [r5, #12]
 80073f8:	071b      	lsls	r3, r3, #28
 80073fa:	d501      	bpl.n	8007400 <_vfiprintf_r+0x34>
 80073fc:	692b      	ldr	r3, [r5, #16]
 80073fe:	b99b      	cbnz	r3, 8007428 <_vfiprintf_r+0x5c>
 8007400:	4629      	mov	r1, r5
 8007402:	4630      	mov	r0, r6
 8007404:	f7ff fdee 	bl	8006fe4 <__swsetup_r>
 8007408:	b170      	cbz	r0, 8007428 <_vfiprintf_r+0x5c>
 800740a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800740c:	07dc      	lsls	r4, r3, #31
 800740e:	d504      	bpl.n	800741a <_vfiprintf_r+0x4e>
 8007410:	f04f 30ff 	mov.w	r0, #4294967295
 8007414:	b01d      	add	sp, #116	@ 0x74
 8007416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800741a:	89ab      	ldrh	r3, [r5, #12]
 800741c:	0598      	lsls	r0, r3, #22
 800741e:	d4f7      	bmi.n	8007410 <_vfiprintf_r+0x44>
 8007420:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007422:	f7ff feaf 	bl	8007184 <__retarget_lock_release_recursive>
 8007426:	e7f3      	b.n	8007410 <_vfiprintf_r+0x44>
 8007428:	2300      	movs	r3, #0
 800742a:	9309      	str	r3, [sp, #36]	@ 0x24
 800742c:	2320      	movs	r3, #32
 800742e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007432:	f8cd 800c 	str.w	r8, [sp, #12]
 8007436:	2330      	movs	r3, #48	@ 0x30
 8007438:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80075e8 <_vfiprintf_r+0x21c>
 800743c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007440:	f04f 0901 	mov.w	r9, #1
 8007444:	4623      	mov	r3, r4
 8007446:	469a      	mov	sl, r3
 8007448:	f813 2b01 	ldrb.w	r2, [r3], #1
 800744c:	b10a      	cbz	r2, 8007452 <_vfiprintf_r+0x86>
 800744e:	2a25      	cmp	r2, #37	@ 0x25
 8007450:	d1f9      	bne.n	8007446 <_vfiprintf_r+0x7a>
 8007452:	ebba 0b04 	subs.w	fp, sl, r4
 8007456:	d00b      	beq.n	8007470 <_vfiprintf_r+0xa4>
 8007458:	465b      	mov	r3, fp
 800745a:	4622      	mov	r2, r4
 800745c:	4629      	mov	r1, r5
 800745e:	4630      	mov	r0, r6
 8007460:	f7ff ffa1 	bl	80073a6 <__sfputs_r>
 8007464:	3001      	adds	r0, #1
 8007466:	f000 80a7 	beq.w	80075b8 <_vfiprintf_r+0x1ec>
 800746a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800746c:	445a      	add	r2, fp
 800746e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007470:	f89a 3000 	ldrb.w	r3, [sl]
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 809f 	beq.w	80075b8 <_vfiprintf_r+0x1ec>
 800747a:	2300      	movs	r3, #0
 800747c:	f04f 32ff 	mov.w	r2, #4294967295
 8007480:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007484:	f10a 0a01 	add.w	sl, sl, #1
 8007488:	9304      	str	r3, [sp, #16]
 800748a:	9307      	str	r3, [sp, #28]
 800748c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007490:	931a      	str	r3, [sp, #104]	@ 0x68
 8007492:	4654      	mov	r4, sl
 8007494:	2205      	movs	r2, #5
 8007496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800749a:	4853      	ldr	r0, [pc, #332]	@ (80075e8 <_vfiprintf_r+0x21c>)
 800749c:	f7f8 fe98 	bl	80001d0 <memchr>
 80074a0:	9a04      	ldr	r2, [sp, #16]
 80074a2:	b9d8      	cbnz	r0, 80074dc <_vfiprintf_r+0x110>
 80074a4:	06d1      	lsls	r1, r2, #27
 80074a6:	bf44      	itt	mi
 80074a8:	2320      	movmi	r3, #32
 80074aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074ae:	0713      	lsls	r3, r2, #28
 80074b0:	bf44      	itt	mi
 80074b2:	232b      	movmi	r3, #43	@ 0x2b
 80074b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074b8:	f89a 3000 	ldrb.w	r3, [sl]
 80074bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80074be:	d015      	beq.n	80074ec <_vfiprintf_r+0x120>
 80074c0:	9a07      	ldr	r2, [sp, #28]
 80074c2:	4654      	mov	r4, sl
 80074c4:	2000      	movs	r0, #0
 80074c6:	f04f 0c0a 	mov.w	ip, #10
 80074ca:	4621      	mov	r1, r4
 80074cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074d0:	3b30      	subs	r3, #48	@ 0x30
 80074d2:	2b09      	cmp	r3, #9
 80074d4:	d94b      	bls.n	800756e <_vfiprintf_r+0x1a2>
 80074d6:	b1b0      	cbz	r0, 8007506 <_vfiprintf_r+0x13a>
 80074d8:	9207      	str	r2, [sp, #28]
 80074da:	e014      	b.n	8007506 <_vfiprintf_r+0x13a>
 80074dc:	eba0 0308 	sub.w	r3, r0, r8
 80074e0:	fa09 f303 	lsl.w	r3, r9, r3
 80074e4:	4313      	orrs	r3, r2
 80074e6:	9304      	str	r3, [sp, #16]
 80074e8:	46a2      	mov	sl, r4
 80074ea:	e7d2      	b.n	8007492 <_vfiprintf_r+0xc6>
 80074ec:	9b03      	ldr	r3, [sp, #12]
 80074ee:	1d19      	adds	r1, r3, #4
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	9103      	str	r1, [sp, #12]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	bfbb      	ittet	lt
 80074f8:	425b      	neglt	r3, r3
 80074fa:	f042 0202 	orrlt.w	r2, r2, #2
 80074fe:	9307      	strge	r3, [sp, #28]
 8007500:	9307      	strlt	r3, [sp, #28]
 8007502:	bfb8      	it	lt
 8007504:	9204      	strlt	r2, [sp, #16]
 8007506:	7823      	ldrb	r3, [r4, #0]
 8007508:	2b2e      	cmp	r3, #46	@ 0x2e
 800750a:	d10a      	bne.n	8007522 <_vfiprintf_r+0x156>
 800750c:	7863      	ldrb	r3, [r4, #1]
 800750e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007510:	d132      	bne.n	8007578 <_vfiprintf_r+0x1ac>
 8007512:	9b03      	ldr	r3, [sp, #12]
 8007514:	1d1a      	adds	r2, r3, #4
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	9203      	str	r2, [sp, #12]
 800751a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800751e:	3402      	adds	r4, #2
 8007520:	9305      	str	r3, [sp, #20]
 8007522:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80075f8 <_vfiprintf_r+0x22c>
 8007526:	7821      	ldrb	r1, [r4, #0]
 8007528:	2203      	movs	r2, #3
 800752a:	4650      	mov	r0, sl
 800752c:	f7f8 fe50 	bl	80001d0 <memchr>
 8007530:	b138      	cbz	r0, 8007542 <_vfiprintf_r+0x176>
 8007532:	9b04      	ldr	r3, [sp, #16]
 8007534:	eba0 000a 	sub.w	r0, r0, sl
 8007538:	2240      	movs	r2, #64	@ 0x40
 800753a:	4082      	lsls	r2, r0
 800753c:	4313      	orrs	r3, r2
 800753e:	3401      	adds	r4, #1
 8007540:	9304      	str	r3, [sp, #16]
 8007542:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007546:	4829      	ldr	r0, [pc, #164]	@ (80075ec <_vfiprintf_r+0x220>)
 8007548:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800754c:	2206      	movs	r2, #6
 800754e:	f7f8 fe3f 	bl	80001d0 <memchr>
 8007552:	2800      	cmp	r0, #0
 8007554:	d03f      	beq.n	80075d6 <_vfiprintf_r+0x20a>
 8007556:	4b26      	ldr	r3, [pc, #152]	@ (80075f0 <_vfiprintf_r+0x224>)
 8007558:	bb1b      	cbnz	r3, 80075a2 <_vfiprintf_r+0x1d6>
 800755a:	9b03      	ldr	r3, [sp, #12]
 800755c:	3307      	adds	r3, #7
 800755e:	f023 0307 	bic.w	r3, r3, #7
 8007562:	3308      	adds	r3, #8
 8007564:	9303      	str	r3, [sp, #12]
 8007566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007568:	443b      	add	r3, r7
 800756a:	9309      	str	r3, [sp, #36]	@ 0x24
 800756c:	e76a      	b.n	8007444 <_vfiprintf_r+0x78>
 800756e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007572:	460c      	mov	r4, r1
 8007574:	2001      	movs	r0, #1
 8007576:	e7a8      	b.n	80074ca <_vfiprintf_r+0xfe>
 8007578:	2300      	movs	r3, #0
 800757a:	3401      	adds	r4, #1
 800757c:	9305      	str	r3, [sp, #20]
 800757e:	4619      	mov	r1, r3
 8007580:	f04f 0c0a 	mov.w	ip, #10
 8007584:	4620      	mov	r0, r4
 8007586:	f810 2b01 	ldrb.w	r2, [r0], #1
 800758a:	3a30      	subs	r2, #48	@ 0x30
 800758c:	2a09      	cmp	r2, #9
 800758e:	d903      	bls.n	8007598 <_vfiprintf_r+0x1cc>
 8007590:	2b00      	cmp	r3, #0
 8007592:	d0c6      	beq.n	8007522 <_vfiprintf_r+0x156>
 8007594:	9105      	str	r1, [sp, #20]
 8007596:	e7c4      	b.n	8007522 <_vfiprintf_r+0x156>
 8007598:	fb0c 2101 	mla	r1, ip, r1, r2
 800759c:	4604      	mov	r4, r0
 800759e:	2301      	movs	r3, #1
 80075a0:	e7f0      	b.n	8007584 <_vfiprintf_r+0x1b8>
 80075a2:	ab03      	add	r3, sp, #12
 80075a4:	9300      	str	r3, [sp, #0]
 80075a6:	462a      	mov	r2, r5
 80075a8:	4b12      	ldr	r3, [pc, #72]	@ (80075f4 <_vfiprintf_r+0x228>)
 80075aa:	a904      	add	r1, sp, #16
 80075ac:	4630      	mov	r0, r6
 80075ae:	f3af 8000 	nop.w
 80075b2:	4607      	mov	r7, r0
 80075b4:	1c78      	adds	r0, r7, #1
 80075b6:	d1d6      	bne.n	8007566 <_vfiprintf_r+0x19a>
 80075b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075ba:	07d9      	lsls	r1, r3, #31
 80075bc:	d405      	bmi.n	80075ca <_vfiprintf_r+0x1fe>
 80075be:	89ab      	ldrh	r3, [r5, #12]
 80075c0:	059a      	lsls	r2, r3, #22
 80075c2:	d402      	bmi.n	80075ca <_vfiprintf_r+0x1fe>
 80075c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075c6:	f7ff fddd 	bl	8007184 <__retarget_lock_release_recursive>
 80075ca:	89ab      	ldrh	r3, [r5, #12]
 80075cc:	065b      	lsls	r3, r3, #25
 80075ce:	f53f af1f 	bmi.w	8007410 <_vfiprintf_r+0x44>
 80075d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075d4:	e71e      	b.n	8007414 <_vfiprintf_r+0x48>
 80075d6:	ab03      	add	r3, sp, #12
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	462a      	mov	r2, r5
 80075dc:	4b05      	ldr	r3, [pc, #20]	@ (80075f4 <_vfiprintf_r+0x228>)
 80075de:	a904      	add	r1, sp, #16
 80075e0:	4630      	mov	r0, r6
 80075e2:	f000 f879 	bl	80076d8 <_printf_i>
 80075e6:	e7e4      	b.n	80075b2 <_vfiprintf_r+0x1e6>
 80075e8:	08007c28 	.word	0x08007c28
 80075ec:	08007c32 	.word	0x08007c32
 80075f0:	00000000 	.word	0x00000000
 80075f4:	080073a7 	.word	0x080073a7
 80075f8:	08007c2e 	.word	0x08007c2e

080075fc <_printf_common>:
 80075fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007600:	4616      	mov	r6, r2
 8007602:	4698      	mov	r8, r3
 8007604:	688a      	ldr	r2, [r1, #8]
 8007606:	690b      	ldr	r3, [r1, #16]
 8007608:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800760c:	4293      	cmp	r3, r2
 800760e:	bfb8      	it	lt
 8007610:	4613      	movlt	r3, r2
 8007612:	6033      	str	r3, [r6, #0]
 8007614:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007618:	4607      	mov	r7, r0
 800761a:	460c      	mov	r4, r1
 800761c:	b10a      	cbz	r2, 8007622 <_printf_common+0x26>
 800761e:	3301      	adds	r3, #1
 8007620:	6033      	str	r3, [r6, #0]
 8007622:	6823      	ldr	r3, [r4, #0]
 8007624:	0699      	lsls	r1, r3, #26
 8007626:	bf42      	ittt	mi
 8007628:	6833      	ldrmi	r3, [r6, #0]
 800762a:	3302      	addmi	r3, #2
 800762c:	6033      	strmi	r3, [r6, #0]
 800762e:	6825      	ldr	r5, [r4, #0]
 8007630:	f015 0506 	ands.w	r5, r5, #6
 8007634:	d106      	bne.n	8007644 <_printf_common+0x48>
 8007636:	f104 0a19 	add.w	sl, r4, #25
 800763a:	68e3      	ldr	r3, [r4, #12]
 800763c:	6832      	ldr	r2, [r6, #0]
 800763e:	1a9b      	subs	r3, r3, r2
 8007640:	42ab      	cmp	r3, r5
 8007642:	dc26      	bgt.n	8007692 <_printf_common+0x96>
 8007644:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007648:	6822      	ldr	r2, [r4, #0]
 800764a:	3b00      	subs	r3, #0
 800764c:	bf18      	it	ne
 800764e:	2301      	movne	r3, #1
 8007650:	0692      	lsls	r2, r2, #26
 8007652:	d42b      	bmi.n	80076ac <_printf_common+0xb0>
 8007654:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007658:	4641      	mov	r1, r8
 800765a:	4638      	mov	r0, r7
 800765c:	47c8      	blx	r9
 800765e:	3001      	adds	r0, #1
 8007660:	d01e      	beq.n	80076a0 <_printf_common+0xa4>
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	6922      	ldr	r2, [r4, #16]
 8007666:	f003 0306 	and.w	r3, r3, #6
 800766a:	2b04      	cmp	r3, #4
 800766c:	bf02      	ittt	eq
 800766e:	68e5      	ldreq	r5, [r4, #12]
 8007670:	6833      	ldreq	r3, [r6, #0]
 8007672:	1aed      	subeq	r5, r5, r3
 8007674:	68a3      	ldr	r3, [r4, #8]
 8007676:	bf0c      	ite	eq
 8007678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800767c:	2500      	movne	r5, #0
 800767e:	4293      	cmp	r3, r2
 8007680:	bfc4      	itt	gt
 8007682:	1a9b      	subgt	r3, r3, r2
 8007684:	18ed      	addgt	r5, r5, r3
 8007686:	2600      	movs	r6, #0
 8007688:	341a      	adds	r4, #26
 800768a:	42b5      	cmp	r5, r6
 800768c:	d11a      	bne.n	80076c4 <_printf_common+0xc8>
 800768e:	2000      	movs	r0, #0
 8007690:	e008      	b.n	80076a4 <_printf_common+0xa8>
 8007692:	2301      	movs	r3, #1
 8007694:	4652      	mov	r2, sl
 8007696:	4641      	mov	r1, r8
 8007698:	4638      	mov	r0, r7
 800769a:	47c8      	blx	r9
 800769c:	3001      	adds	r0, #1
 800769e:	d103      	bne.n	80076a8 <_printf_common+0xac>
 80076a0:	f04f 30ff 	mov.w	r0, #4294967295
 80076a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076a8:	3501      	adds	r5, #1
 80076aa:	e7c6      	b.n	800763a <_printf_common+0x3e>
 80076ac:	18e1      	adds	r1, r4, r3
 80076ae:	1c5a      	adds	r2, r3, #1
 80076b0:	2030      	movs	r0, #48	@ 0x30
 80076b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80076b6:	4422      	add	r2, r4
 80076b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80076bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80076c0:	3302      	adds	r3, #2
 80076c2:	e7c7      	b.n	8007654 <_printf_common+0x58>
 80076c4:	2301      	movs	r3, #1
 80076c6:	4622      	mov	r2, r4
 80076c8:	4641      	mov	r1, r8
 80076ca:	4638      	mov	r0, r7
 80076cc:	47c8      	blx	r9
 80076ce:	3001      	adds	r0, #1
 80076d0:	d0e6      	beq.n	80076a0 <_printf_common+0xa4>
 80076d2:	3601      	adds	r6, #1
 80076d4:	e7d9      	b.n	800768a <_printf_common+0x8e>
	...

080076d8 <_printf_i>:
 80076d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076dc:	7e0f      	ldrb	r7, [r1, #24]
 80076de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80076e0:	2f78      	cmp	r7, #120	@ 0x78
 80076e2:	4691      	mov	r9, r2
 80076e4:	4680      	mov	r8, r0
 80076e6:	460c      	mov	r4, r1
 80076e8:	469a      	mov	sl, r3
 80076ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80076ee:	d807      	bhi.n	8007700 <_printf_i+0x28>
 80076f0:	2f62      	cmp	r7, #98	@ 0x62
 80076f2:	d80a      	bhi.n	800770a <_printf_i+0x32>
 80076f4:	2f00      	cmp	r7, #0
 80076f6:	f000 80d1 	beq.w	800789c <_printf_i+0x1c4>
 80076fa:	2f58      	cmp	r7, #88	@ 0x58
 80076fc:	f000 80b8 	beq.w	8007870 <_printf_i+0x198>
 8007700:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007704:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007708:	e03a      	b.n	8007780 <_printf_i+0xa8>
 800770a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800770e:	2b15      	cmp	r3, #21
 8007710:	d8f6      	bhi.n	8007700 <_printf_i+0x28>
 8007712:	a101      	add	r1, pc, #4	@ (adr r1, 8007718 <_printf_i+0x40>)
 8007714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007718:	08007771 	.word	0x08007771
 800771c:	08007785 	.word	0x08007785
 8007720:	08007701 	.word	0x08007701
 8007724:	08007701 	.word	0x08007701
 8007728:	08007701 	.word	0x08007701
 800772c:	08007701 	.word	0x08007701
 8007730:	08007785 	.word	0x08007785
 8007734:	08007701 	.word	0x08007701
 8007738:	08007701 	.word	0x08007701
 800773c:	08007701 	.word	0x08007701
 8007740:	08007701 	.word	0x08007701
 8007744:	08007883 	.word	0x08007883
 8007748:	080077af 	.word	0x080077af
 800774c:	0800783d 	.word	0x0800783d
 8007750:	08007701 	.word	0x08007701
 8007754:	08007701 	.word	0x08007701
 8007758:	080078a5 	.word	0x080078a5
 800775c:	08007701 	.word	0x08007701
 8007760:	080077af 	.word	0x080077af
 8007764:	08007701 	.word	0x08007701
 8007768:	08007701 	.word	0x08007701
 800776c:	08007845 	.word	0x08007845
 8007770:	6833      	ldr	r3, [r6, #0]
 8007772:	1d1a      	adds	r2, r3, #4
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	6032      	str	r2, [r6, #0]
 8007778:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800777c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007780:	2301      	movs	r3, #1
 8007782:	e09c      	b.n	80078be <_printf_i+0x1e6>
 8007784:	6833      	ldr	r3, [r6, #0]
 8007786:	6820      	ldr	r0, [r4, #0]
 8007788:	1d19      	adds	r1, r3, #4
 800778a:	6031      	str	r1, [r6, #0]
 800778c:	0606      	lsls	r6, r0, #24
 800778e:	d501      	bpl.n	8007794 <_printf_i+0xbc>
 8007790:	681d      	ldr	r5, [r3, #0]
 8007792:	e003      	b.n	800779c <_printf_i+0xc4>
 8007794:	0645      	lsls	r5, r0, #25
 8007796:	d5fb      	bpl.n	8007790 <_printf_i+0xb8>
 8007798:	f9b3 5000 	ldrsh.w	r5, [r3]
 800779c:	2d00      	cmp	r5, #0
 800779e:	da03      	bge.n	80077a8 <_printf_i+0xd0>
 80077a0:	232d      	movs	r3, #45	@ 0x2d
 80077a2:	426d      	negs	r5, r5
 80077a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077a8:	4858      	ldr	r0, [pc, #352]	@ (800790c <_printf_i+0x234>)
 80077aa:	230a      	movs	r3, #10
 80077ac:	e011      	b.n	80077d2 <_printf_i+0xfa>
 80077ae:	6821      	ldr	r1, [r4, #0]
 80077b0:	6833      	ldr	r3, [r6, #0]
 80077b2:	0608      	lsls	r0, r1, #24
 80077b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80077b8:	d402      	bmi.n	80077c0 <_printf_i+0xe8>
 80077ba:	0649      	lsls	r1, r1, #25
 80077bc:	bf48      	it	mi
 80077be:	b2ad      	uxthmi	r5, r5
 80077c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80077c2:	4852      	ldr	r0, [pc, #328]	@ (800790c <_printf_i+0x234>)
 80077c4:	6033      	str	r3, [r6, #0]
 80077c6:	bf14      	ite	ne
 80077c8:	230a      	movne	r3, #10
 80077ca:	2308      	moveq	r3, #8
 80077cc:	2100      	movs	r1, #0
 80077ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80077d2:	6866      	ldr	r6, [r4, #4]
 80077d4:	60a6      	str	r6, [r4, #8]
 80077d6:	2e00      	cmp	r6, #0
 80077d8:	db05      	blt.n	80077e6 <_printf_i+0x10e>
 80077da:	6821      	ldr	r1, [r4, #0]
 80077dc:	432e      	orrs	r6, r5
 80077de:	f021 0104 	bic.w	r1, r1, #4
 80077e2:	6021      	str	r1, [r4, #0]
 80077e4:	d04b      	beq.n	800787e <_printf_i+0x1a6>
 80077e6:	4616      	mov	r6, r2
 80077e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80077ec:	fb03 5711 	mls	r7, r3, r1, r5
 80077f0:	5dc7      	ldrb	r7, [r0, r7]
 80077f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80077f6:	462f      	mov	r7, r5
 80077f8:	42bb      	cmp	r3, r7
 80077fa:	460d      	mov	r5, r1
 80077fc:	d9f4      	bls.n	80077e8 <_printf_i+0x110>
 80077fe:	2b08      	cmp	r3, #8
 8007800:	d10b      	bne.n	800781a <_printf_i+0x142>
 8007802:	6823      	ldr	r3, [r4, #0]
 8007804:	07df      	lsls	r7, r3, #31
 8007806:	d508      	bpl.n	800781a <_printf_i+0x142>
 8007808:	6923      	ldr	r3, [r4, #16]
 800780a:	6861      	ldr	r1, [r4, #4]
 800780c:	4299      	cmp	r1, r3
 800780e:	bfde      	ittt	le
 8007810:	2330      	movle	r3, #48	@ 0x30
 8007812:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007816:	f106 36ff 	addle.w	r6, r6, #4294967295
 800781a:	1b92      	subs	r2, r2, r6
 800781c:	6122      	str	r2, [r4, #16]
 800781e:	f8cd a000 	str.w	sl, [sp]
 8007822:	464b      	mov	r3, r9
 8007824:	aa03      	add	r2, sp, #12
 8007826:	4621      	mov	r1, r4
 8007828:	4640      	mov	r0, r8
 800782a:	f7ff fee7 	bl	80075fc <_printf_common>
 800782e:	3001      	adds	r0, #1
 8007830:	d14a      	bne.n	80078c8 <_printf_i+0x1f0>
 8007832:	f04f 30ff 	mov.w	r0, #4294967295
 8007836:	b004      	add	sp, #16
 8007838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800783c:	6823      	ldr	r3, [r4, #0]
 800783e:	f043 0320 	orr.w	r3, r3, #32
 8007842:	6023      	str	r3, [r4, #0]
 8007844:	4832      	ldr	r0, [pc, #200]	@ (8007910 <_printf_i+0x238>)
 8007846:	2778      	movs	r7, #120	@ 0x78
 8007848:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800784c:	6823      	ldr	r3, [r4, #0]
 800784e:	6831      	ldr	r1, [r6, #0]
 8007850:	061f      	lsls	r7, r3, #24
 8007852:	f851 5b04 	ldr.w	r5, [r1], #4
 8007856:	d402      	bmi.n	800785e <_printf_i+0x186>
 8007858:	065f      	lsls	r7, r3, #25
 800785a:	bf48      	it	mi
 800785c:	b2ad      	uxthmi	r5, r5
 800785e:	6031      	str	r1, [r6, #0]
 8007860:	07d9      	lsls	r1, r3, #31
 8007862:	bf44      	itt	mi
 8007864:	f043 0320 	orrmi.w	r3, r3, #32
 8007868:	6023      	strmi	r3, [r4, #0]
 800786a:	b11d      	cbz	r5, 8007874 <_printf_i+0x19c>
 800786c:	2310      	movs	r3, #16
 800786e:	e7ad      	b.n	80077cc <_printf_i+0xf4>
 8007870:	4826      	ldr	r0, [pc, #152]	@ (800790c <_printf_i+0x234>)
 8007872:	e7e9      	b.n	8007848 <_printf_i+0x170>
 8007874:	6823      	ldr	r3, [r4, #0]
 8007876:	f023 0320 	bic.w	r3, r3, #32
 800787a:	6023      	str	r3, [r4, #0]
 800787c:	e7f6      	b.n	800786c <_printf_i+0x194>
 800787e:	4616      	mov	r6, r2
 8007880:	e7bd      	b.n	80077fe <_printf_i+0x126>
 8007882:	6833      	ldr	r3, [r6, #0]
 8007884:	6825      	ldr	r5, [r4, #0]
 8007886:	6961      	ldr	r1, [r4, #20]
 8007888:	1d18      	adds	r0, r3, #4
 800788a:	6030      	str	r0, [r6, #0]
 800788c:	062e      	lsls	r6, r5, #24
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	d501      	bpl.n	8007896 <_printf_i+0x1be>
 8007892:	6019      	str	r1, [r3, #0]
 8007894:	e002      	b.n	800789c <_printf_i+0x1c4>
 8007896:	0668      	lsls	r0, r5, #25
 8007898:	d5fb      	bpl.n	8007892 <_printf_i+0x1ba>
 800789a:	8019      	strh	r1, [r3, #0]
 800789c:	2300      	movs	r3, #0
 800789e:	6123      	str	r3, [r4, #16]
 80078a0:	4616      	mov	r6, r2
 80078a2:	e7bc      	b.n	800781e <_printf_i+0x146>
 80078a4:	6833      	ldr	r3, [r6, #0]
 80078a6:	1d1a      	adds	r2, r3, #4
 80078a8:	6032      	str	r2, [r6, #0]
 80078aa:	681e      	ldr	r6, [r3, #0]
 80078ac:	6862      	ldr	r2, [r4, #4]
 80078ae:	2100      	movs	r1, #0
 80078b0:	4630      	mov	r0, r6
 80078b2:	f7f8 fc8d 	bl	80001d0 <memchr>
 80078b6:	b108      	cbz	r0, 80078bc <_printf_i+0x1e4>
 80078b8:	1b80      	subs	r0, r0, r6
 80078ba:	6060      	str	r0, [r4, #4]
 80078bc:	6863      	ldr	r3, [r4, #4]
 80078be:	6123      	str	r3, [r4, #16]
 80078c0:	2300      	movs	r3, #0
 80078c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078c6:	e7aa      	b.n	800781e <_printf_i+0x146>
 80078c8:	6923      	ldr	r3, [r4, #16]
 80078ca:	4632      	mov	r2, r6
 80078cc:	4649      	mov	r1, r9
 80078ce:	4640      	mov	r0, r8
 80078d0:	47d0      	blx	sl
 80078d2:	3001      	adds	r0, #1
 80078d4:	d0ad      	beq.n	8007832 <_printf_i+0x15a>
 80078d6:	6823      	ldr	r3, [r4, #0]
 80078d8:	079b      	lsls	r3, r3, #30
 80078da:	d413      	bmi.n	8007904 <_printf_i+0x22c>
 80078dc:	68e0      	ldr	r0, [r4, #12]
 80078de:	9b03      	ldr	r3, [sp, #12]
 80078e0:	4298      	cmp	r0, r3
 80078e2:	bfb8      	it	lt
 80078e4:	4618      	movlt	r0, r3
 80078e6:	e7a6      	b.n	8007836 <_printf_i+0x15e>
 80078e8:	2301      	movs	r3, #1
 80078ea:	4632      	mov	r2, r6
 80078ec:	4649      	mov	r1, r9
 80078ee:	4640      	mov	r0, r8
 80078f0:	47d0      	blx	sl
 80078f2:	3001      	adds	r0, #1
 80078f4:	d09d      	beq.n	8007832 <_printf_i+0x15a>
 80078f6:	3501      	adds	r5, #1
 80078f8:	68e3      	ldr	r3, [r4, #12]
 80078fa:	9903      	ldr	r1, [sp, #12]
 80078fc:	1a5b      	subs	r3, r3, r1
 80078fe:	42ab      	cmp	r3, r5
 8007900:	dcf2      	bgt.n	80078e8 <_printf_i+0x210>
 8007902:	e7eb      	b.n	80078dc <_printf_i+0x204>
 8007904:	2500      	movs	r5, #0
 8007906:	f104 0619 	add.w	r6, r4, #25
 800790a:	e7f5      	b.n	80078f8 <_printf_i+0x220>
 800790c:	08007c39 	.word	0x08007c39
 8007910:	08007c4a 	.word	0x08007c4a

08007914 <__sflush_r>:
 8007914:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800791c:	0716      	lsls	r6, r2, #28
 800791e:	4605      	mov	r5, r0
 8007920:	460c      	mov	r4, r1
 8007922:	d454      	bmi.n	80079ce <__sflush_r+0xba>
 8007924:	684b      	ldr	r3, [r1, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	dc02      	bgt.n	8007930 <__sflush_r+0x1c>
 800792a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800792c:	2b00      	cmp	r3, #0
 800792e:	dd48      	ble.n	80079c2 <__sflush_r+0xae>
 8007930:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007932:	2e00      	cmp	r6, #0
 8007934:	d045      	beq.n	80079c2 <__sflush_r+0xae>
 8007936:	2300      	movs	r3, #0
 8007938:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800793c:	682f      	ldr	r7, [r5, #0]
 800793e:	6a21      	ldr	r1, [r4, #32]
 8007940:	602b      	str	r3, [r5, #0]
 8007942:	d030      	beq.n	80079a6 <__sflush_r+0x92>
 8007944:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007946:	89a3      	ldrh	r3, [r4, #12]
 8007948:	0759      	lsls	r1, r3, #29
 800794a:	d505      	bpl.n	8007958 <__sflush_r+0x44>
 800794c:	6863      	ldr	r3, [r4, #4]
 800794e:	1ad2      	subs	r2, r2, r3
 8007950:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007952:	b10b      	cbz	r3, 8007958 <__sflush_r+0x44>
 8007954:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007956:	1ad2      	subs	r2, r2, r3
 8007958:	2300      	movs	r3, #0
 800795a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800795c:	6a21      	ldr	r1, [r4, #32]
 800795e:	4628      	mov	r0, r5
 8007960:	47b0      	blx	r6
 8007962:	1c43      	adds	r3, r0, #1
 8007964:	89a3      	ldrh	r3, [r4, #12]
 8007966:	d106      	bne.n	8007976 <__sflush_r+0x62>
 8007968:	6829      	ldr	r1, [r5, #0]
 800796a:	291d      	cmp	r1, #29
 800796c:	d82b      	bhi.n	80079c6 <__sflush_r+0xb2>
 800796e:	4a2a      	ldr	r2, [pc, #168]	@ (8007a18 <__sflush_r+0x104>)
 8007970:	40ca      	lsrs	r2, r1
 8007972:	07d6      	lsls	r6, r2, #31
 8007974:	d527      	bpl.n	80079c6 <__sflush_r+0xb2>
 8007976:	2200      	movs	r2, #0
 8007978:	6062      	str	r2, [r4, #4]
 800797a:	04d9      	lsls	r1, r3, #19
 800797c:	6922      	ldr	r2, [r4, #16]
 800797e:	6022      	str	r2, [r4, #0]
 8007980:	d504      	bpl.n	800798c <__sflush_r+0x78>
 8007982:	1c42      	adds	r2, r0, #1
 8007984:	d101      	bne.n	800798a <__sflush_r+0x76>
 8007986:	682b      	ldr	r3, [r5, #0]
 8007988:	b903      	cbnz	r3, 800798c <__sflush_r+0x78>
 800798a:	6560      	str	r0, [r4, #84]	@ 0x54
 800798c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800798e:	602f      	str	r7, [r5, #0]
 8007990:	b1b9      	cbz	r1, 80079c2 <__sflush_r+0xae>
 8007992:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007996:	4299      	cmp	r1, r3
 8007998:	d002      	beq.n	80079a0 <__sflush_r+0x8c>
 800799a:	4628      	mov	r0, r5
 800799c:	f7ff fbf4 	bl	8007188 <_free_r>
 80079a0:	2300      	movs	r3, #0
 80079a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80079a4:	e00d      	b.n	80079c2 <__sflush_r+0xae>
 80079a6:	2301      	movs	r3, #1
 80079a8:	4628      	mov	r0, r5
 80079aa:	47b0      	blx	r6
 80079ac:	4602      	mov	r2, r0
 80079ae:	1c50      	adds	r0, r2, #1
 80079b0:	d1c9      	bne.n	8007946 <__sflush_r+0x32>
 80079b2:	682b      	ldr	r3, [r5, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d0c6      	beq.n	8007946 <__sflush_r+0x32>
 80079b8:	2b1d      	cmp	r3, #29
 80079ba:	d001      	beq.n	80079c0 <__sflush_r+0xac>
 80079bc:	2b16      	cmp	r3, #22
 80079be:	d11e      	bne.n	80079fe <__sflush_r+0xea>
 80079c0:	602f      	str	r7, [r5, #0]
 80079c2:	2000      	movs	r0, #0
 80079c4:	e022      	b.n	8007a0c <__sflush_r+0xf8>
 80079c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079ca:	b21b      	sxth	r3, r3
 80079cc:	e01b      	b.n	8007a06 <__sflush_r+0xf2>
 80079ce:	690f      	ldr	r7, [r1, #16]
 80079d0:	2f00      	cmp	r7, #0
 80079d2:	d0f6      	beq.n	80079c2 <__sflush_r+0xae>
 80079d4:	0793      	lsls	r3, r2, #30
 80079d6:	680e      	ldr	r6, [r1, #0]
 80079d8:	bf08      	it	eq
 80079da:	694b      	ldreq	r3, [r1, #20]
 80079dc:	600f      	str	r7, [r1, #0]
 80079de:	bf18      	it	ne
 80079e0:	2300      	movne	r3, #0
 80079e2:	eba6 0807 	sub.w	r8, r6, r7
 80079e6:	608b      	str	r3, [r1, #8]
 80079e8:	f1b8 0f00 	cmp.w	r8, #0
 80079ec:	dde9      	ble.n	80079c2 <__sflush_r+0xae>
 80079ee:	6a21      	ldr	r1, [r4, #32]
 80079f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80079f2:	4643      	mov	r3, r8
 80079f4:	463a      	mov	r2, r7
 80079f6:	4628      	mov	r0, r5
 80079f8:	47b0      	blx	r6
 80079fa:	2800      	cmp	r0, #0
 80079fc:	dc08      	bgt.n	8007a10 <__sflush_r+0xfc>
 80079fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a06:	81a3      	strh	r3, [r4, #12]
 8007a08:	f04f 30ff 	mov.w	r0, #4294967295
 8007a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a10:	4407      	add	r7, r0
 8007a12:	eba8 0800 	sub.w	r8, r8, r0
 8007a16:	e7e7      	b.n	80079e8 <__sflush_r+0xd4>
 8007a18:	20400001 	.word	0x20400001

08007a1c <_fflush_r>:
 8007a1c:	b538      	push	{r3, r4, r5, lr}
 8007a1e:	690b      	ldr	r3, [r1, #16]
 8007a20:	4605      	mov	r5, r0
 8007a22:	460c      	mov	r4, r1
 8007a24:	b913      	cbnz	r3, 8007a2c <_fflush_r+0x10>
 8007a26:	2500      	movs	r5, #0
 8007a28:	4628      	mov	r0, r5
 8007a2a:	bd38      	pop	{r3, r4, r5, pc}
 8007a2c:	b118      	cbz	r0, 8007a36 <_fflush_r+0x1a>
 8007a2e:	6a03      	ldr	r3, [r0, #32]
 8007a30:	b90b      	cbnz	r3, 8007a36 <_fflush_r+0x1a>
 8007a32:	f7ff fa0d 	bl	8006e50 <__sinit>
 8007a36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d0f3      	beq.n	8007a26 <_fflush_r+0xa>
 8007a3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a40:	07d0      	lsls	r0, r2, #31
 8007a42:	d404      	bmi.n	8007a4e <_fflush_r+0x32>
 8007a44:	0599      	lsls	r1, r3, #22
 8007a46:	d402      	bmi.n	8007a4e <_fflush_r+0x32>
 8007a48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a4a:	f7ff fb9a 	bl	8007182 <__retarget_lock_acquire_recursive>
 8007a4e:	4628      	mov	r0, r5
 8007a50:	4621      	mov	r1, r4
 8007a52:	f7ff ff5f 	bl	8007914 <__sflush_r>
 8007a56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a58:	07da      	lsls	r2, r3, #31
 8007a5a:	4605      	mov	r5, r0
 8007a5c:	d4e4      	bmi.n	8007a28 <_fflush_r+0xc>
 8007a5e:	89a3      	ldrh	r3, [r4, #12]
 8007a60:	059b      	lsls	r3, r3, #22
 8007a62:	d4e1      	bmi.n	8007a28 <_fflush_r+0xc>
 8007a64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a66:	f7ff fb8d 	bl	8007184 <__retarget_lock_release_recursive>
 8007a6a:	e7dd      	b.n	8007a28 <_fflush_r+0xc>

08007a6c <__swhatbuf_r>:
 8007a6c:	b570      	push	{r4, r5, r6, lr}
 8007a6e:	460c      	mov	r4, r1
 8007a70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a74:	2900      	cmp	r1, #0
 8007a76:	b096      	sub	sp, #88	@ 0x58
 8007a78:	4615      	mov	r5, r2
 8007a7a:	461e      	mov	r6, r3
 8007a7c:	da0d      	bge.n	8007a9a <__swhatbuf_r+0x2e>
 8007a7e:	89a3      	ldrh	r3, [r4, #12]
 8007a80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a84:	f04f 0100 	mov.w	r1, #0
 8007a88:	bf14      	ite	ne
 8007a8a:	2340      	movne	r3, #64	@ 0x40
 8007a8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a90:	2000      	movs	r0, #0
 8007a92:	6031      	str	r1, [r6, #0]
 8007a94:	602b      	str	r3, [r5, #0]
 8007a96:	b016      	add	sp, #88	@ 0x58
 8007a98:	bd70      	pop	{r4, r5, r6, pc}
 8007a9a:	466a      	mov	r2, sp
 8007a9c:	f000 f848 	bl	8007b30 <_fstat_r>
 8007aa0:	2800      	cmp	r0, #0
 8007aa2:	dbec      	blt.n	8007a7e <__swhatbuf_r+0x12>
 8007aa4:	9901      	ldr	r1, [sp, #4]
 8007aa6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007aaa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007aae:	4259      	negs	r1, r3
 8007ab0:	4159      	adcs	r1, r3
 8007ab2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ab6:	e7eb      	b.n	8007a90 <__swhatbuf_r+0x24>

08007ab8 <__smakebuf_r>:
 8007ab8:	898b      	ldrh	r3, [r1, #12]
 8007aba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007abc:	079d      	lsls	r5, r3, #30
 8007abe:	4606      	mov	r6, r0
 8007ac0:	460c      	mov	r4, r1
 8007ac2:	d507      	bpl.n	8007ad4 <__smakebuf_r+0x1c>
 8007ac4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007ac8:	6023      	str	r3, [r4, #0]
 8007aca:	6123      	str	r3, [r4, #16]
 8007acc:	2301      	movs	r3, #1
 8007ace:	6163      	str	r3, [r4, #20]
 8007ad0:	b003      	add	sp, #12
 8007ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ad4:	ab01      	add	r3, sp, #4
 8007ad6:	466a      	mov	r2, sp
 8007ad8:	f7ff ffc8 	bl	8007a6c <__swhatbuf_r>
 8007adc:	9f00      	ldr	r7, [sp, #0]
 8007ade:	4605      	mov	r5, r0
 8007ae0:	4639      	mov	r1, r7
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	f7ff fbbc 	bl	8007260 <_malloc_r>
 8007ae8:	b948      	cbnz	r0, 8007afe <__smakebuf_r+0x46>
 8007aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aee:	059a      	lsls	r2, r3, #22
 8007af0:	d4ee      	bmi.n	8007ad0 <__smakebuf_r+0x18>
 8007af2:	f023 0303 	bic.w	r3, r3, #3
 8007af6:	f043 0302 	orr.w	r3, r3, #2
 8007afa:	81a3      	strh	r3, [r4, #12]
 8007afc:	e7e2      	b.n	8007ac4 <__smakebuf_r+0xc>
 8007afe:	89a3      	ldrh	r3, [r4, #12]
 8007b00:	6020      	str	r0, [r4, #0]
 8007b02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b06:	81a3      	strh	r3, [r4, #12]
 8007b08:	9b01      	ldr	r3, [sp, #4]
 8007b0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007b0e:	b15b      	cbz	r3, 8007b28 <__smakebuf_r+0x70>
 8007b10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b14:	4630      	mov	r0, r6
 8007b16:	f000 f81d 	bl	8007b54 <_isatty_r>
 8007b1a:	b128      	cbz	r0, 8007b28 <__smakebuf_r+0x70>
 8007b1c:	89a3      	ldrh	r3, [r4, #12]
 8007b1e:	f023 0303 	bic.w	r3, r3, #3
 8007b22:	f043 0301 	orr.w	r3, r3, #1
 8007b26:	81a3      	strh	r3, [r4, #12]
 8007b28:	89a3      	ldrh	r3, [r4, #12]
 8007b2a:	431d      	orrs	r5, r3
 8007b2c:	81a5      	strh	r5, [r4, #12]
 8007b2e:	e7cf      	b.n	8007ad0 <__smakebuf_r+0x18>

08007b30 <_fstat_r>:
 8007b30:	b538      	push	{r3, r4, r5, lr}
 8007b32:	4d07      	ldr	r5, [pc, #28]	@ (8007b50 <_fstat_r+0x20>)
 8007b34:	2300      	movs	r3, #0
 8007b36:	4604      	mov	r4, r0
 8007b38:	4608      	mov	r0, r1
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	602b      	str	r3, [r5, #0]
 8007b3e:	f7f9 fc78 	bl	8001432 <_fstat>
 8007b42:	1c43      	adds	r3, r0, #1
 8007b44:	d102      	bne.n	8007b4c <_fstat_r+0x1c>
 8007b46:	682b      	ldr	r3, [r5, #0]
 8007b48:	b103      	cbz	r3, 8007b4c <_fstat_r+0x1c>
 8007b4a:	6023      	str	r3, [r4, #0]
 8007b4c:	bd38      	pop	{r3, r4, r5, pc}
 8007b4e:	bf00      	nop
 8007b50:	2000063c 	.word	0x2000063c

08007b54 <_isatty_r>:
 8007b54:	b538      	push	{r3, r4, r5, lr}
 8007b56:	4d06      	ldr	r5, [pc, #24]	@ (8007b70 <_isatty_r+0x1c>)
 8007b58:	2300      	movs	r3, #0
 8007b5a:	4604      	mov	r4, r0
 8007b5c:	4608      	mov	r0, r1
 8007b5e:	602b      	str	r3, [r5, #0]
 8007b60:	f7f9 fc77 	bl	8001452 <_isatty>
 8007b64:	1c43      	adds	r3, r0, #1
 8007b66:	d102      	bne.n	8007b6e <_isatty_r+0x1a>
 8007b68:	682b      	ldr	r3, [r5, #0]
 8007b6a:	b103      	cbz	r3, 8007b6e <_isatty_r+0x1a>
 8007b6c:	6023      	str	r3, [r4, #0]
 8007b6e:	bd38      	pop	{r3, r4, r5, pc}
 8007b70:	2000063c 	.word	0x2000063c

08007b74 <_sbrk_r>:
 8007b74:	b538      	push	{r3, r4, r5, lr}
 8007b76:	4d06      	ldr	r5, [pc, #24]	@ (8007b90 <_sbrk_r+0x1c>)
 8007b78:	2300      	movs	r3, #0
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	4608      	mov	r0, r1
 8007b7e:	602b      	str	r3, [r5, #0]
 8007b80:	f7f9 fc80 	bl	8001484 <_sbrk>
 8007b84:	1c43      	adds	r3, r0, #1
 8007b86:	d102      	bne.n	8007b8e <_sbrk_r+0x1a>
 8007b88:	682b      	ldr	r3, [r5, #0]
 8007b8a:	b103      	cbz	r3, 8007b8e <_sbrk_r+0x1a>
 8007b8c:	6023      	str	r3, [r4, #0]
 8007b8e:	bd38      	pop	{r3, r4, r5, pc}
 8007b90:	2000063c 	.word	0x2000063c

08007b94 <_init>:
 8007b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b96:	bf00      	nop
 8007b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b9a:	bc08      	pop	{r3}
 8007b9c:	469e      	mov	lr, r3
 8007b9e:	4770      	bx	lr

08007ba0 <_fini>:
 8007ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ba2:	bf00      	nop
 8007ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ba6:	bc08      	pop	{r3}
 8007ba8:	469e      	mov	lr, r3
 8007baa:	4770      	bx	lr
